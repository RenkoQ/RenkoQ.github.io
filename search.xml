<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[微服务（一）介绍]]></title>
      <url>/2018/09/10/%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%88%E4%B8%80%EF%BC%89%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h3 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1.软件架构"></a>1.软件架构</h3><p>有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。是在软件内容，经过综合各种因素的考量，权衡，选择特定的技术，将系统划分成不同部分，并使用这些部分相互分工，彼此协作，为用户提供需要的价值。</p>
<h4 id="影响因素"><a href="#影响因素" class="headerlink" title="影响因素"></a>影响因素</h4><p>业务需求，技术栈，成本，组织架构，可扩展性，可维护性。</p>
<h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><p>功能，业务集中在一个发布包里，部署运行在同一个进程中。</p>
<ul>
<li>优势: 易于开发，易于测试，易于部署，易于水平伸缩</li>
<li>劣势: 代码膨胀，难以维护，构建成本大，持续交付周期长，新人上周周期长，创新困难，可扩展性差</li>
</ul>
<h3 id="2-微服务"><a href="#2-微服务" class="headerlink" title="2. 微服务"></a>2. 微服务</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><pre><code>微服务就是一些可独立运行、可协同工作的小的服务。
</code></pre><p>使用一套小服务来开发单个应用的方式，每个服务运行在独立的进程里，一般采用轻量级的通讯机制互联，并且他们可以通过自动化方式部署。</p>
<a id="more"></a>
<h4 id="2-微服务特征"><a href="#2-微服务特征" class="headerlink" title="2. 微服务特征"></a>2. 微服务特征</h4><p>单一职责，轻量级通讯，隔离性，业务数据独立，技术多样性。</p>
<h4 id="3-微服务架构优劣"><a href="#3-微服务架构优劣" class="headerlink" title="3. 微服务架构优劣"></a>3. 微服务架构优劣</h4><ul>
<li>优势：独立性，敏捷性，技术栈灵活，高效团队。</li>
<li>劣势：额外的工作，数据一致性，沟通成本。</li>
</ul>
<h4 id="4-微服务通讯"><a href="#4-微服务通讯" class="headerlink" title="4. 微服务通讯"></a>4. 微服务通讯</h4><table><br>    <tr><br>        <th></th><br>        <th>一对一</th><br>        <th>一对多</th><br>    </tr><br>    <tr><br>        <th>同步</th><br>        <td>请求响应模式，最常见</td><br>        <td>—————</td><br>    </tr><br>    <tr><br>        <th>异步</th><br>        <td>通知/请求异步响应</td><br>        <td>发布订阅/发布异步响应</td><br>    </tr><br></table>


<h4 id="5-通讯协议"><a href="#5-通讯协议" class="headerlink" title="5. 通讯协议"></a>5. 通讯协议</h4><ol>
<li>REST API</li>
<li>RPC<br>IO/线程调用模型，序列化方式，多语言支持，服务治理（dubbo,dubbox,thrift,motan,grpc）</li>
<li>MQ</li>
</ol>
<h4 id="6-流行的RPC框架"><a href="#6-流行的RPC框架" class="headerlink" title="6. 流行的RPC框架"></a>6. 流行的RPC框架</h4><figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6k6qhb4rj20o10agmyt.jpg" alt="阿里Dubbo" title="" class="">
                <p>阿里Dubbo</p>
            </figure>
<p>（实线表示同步，虚线表示异步）</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6k9l4hynj20oa09jgo5.jpg" alt="新浪Motan" title="" class="">
                <p>新浪Motan</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kbhlfvvj20no0atwfv.jpg" alt="Facebook Thrift" title="" class="">
                <p>Facebook Thrift</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kezda8hj20lw0b2414.jpg" alt="google Grpc" title="" class="">
                <p>google Grpc</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kfq5aawj20m10bcdjb.jpg" alt="四种RPC框架对比" title="" class="">
                <p>四种RPC框架对比</p>
            </figure>
<h4 id="7-微服务发现"><a href="#7-微服务发现" class="headerlink" title="7. 微服务发现"></a>7. 微服务发现</h4><pre><code>让客户端/调用者知道服务提供者的IP/端口号。
</code></pre><figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kk6oliwj20lr0b476q.jpg" alt="传统服务发现" title="" class="">
                <p>传统服务发现</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kljn4nxj20lt0bx0w5.jpg" alt="微服务客户端发现" title="" class="">
                <p>微服务客户端发现</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6kljlcfkj20ly0axmzs.jpg" alt="微服务服务端发现" title="" class="">
                <p>微服务服务端发现</p>
            </figure>
<h4 id="8-服务编排"><a href="#8-服务编排" class="headerlink" title="8. 服务编排"></a>8. 服务编排</h4><pre><code>服务部署，更新，扩缩容
</code></pre><p>Mesos, Docker Swarm, Kubernetes</p>
<h4 id="9-SpringBoot-SpringCloud与微服务"><a href="#9-SpringBoot-SpringCloud与微服务" class="headerlink" title="9. SpringBoot/SpringCloud与微服务"></a>9. SpringBoot/SpringCloud与微服务</h4><ol>
<li><p><strong>SpringBoot</strong><br>化繁为简，java开发微服务的润滑剂</p>
<p> <em>核心功能：</em><br> 独立运行 <code>java -jar xxx.jar</code><br> 内嵌web服务器<br> 简化配置</p>
</li>
<li><p><strong>SpringCloud</strong><br>一系列框架，简化java的分布式系统，SpringBoot封装</p>
</li>
</ol>
<p>SpringBoot意在简化，是一种开发、配置功能。<br>SpringCloud意在简化分布式，是功能的集合、风格的统一。</p>
<p>SpringCloud是java的微服务的解决方案，侧重功能，侧重开发。</p>
<p>SpringCloud核心组件：<br>Netflix Eureka/Ribbon/Hystrix/Zuul， Spring Cloud Config</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6ldvaci5j20zn0j1gs5.jpg" alt="Netflix Eureka" title="" class="">
                <p>Netflix Eureka</p>
            </figure>
<p>（客户端发现）</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6lh6oa7ij20yr0ijdsn.jpg" alt="Netflix Ribbon" title="" class="">
                <p>Netflix Ribbon</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6ljfex48j20xt0i142x.jpg" alt="Netflix Hystrix" title="" class="">
                <p>Netflix Hystrix</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6llh48q1j20z40hngrh.jpg" alt="Netflix Zuul" title="" class="">
                <p>Netflix Zuul</p>
            </figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6lnkkdh3j20wa0j27as.jpg" alt="Spring Cloud Config" title="" class="">
                <p>Spring Cloud Config</p>
            </figure>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[json editor]]></title>
      <url>/2018/08/29/json%20editor/</url>
      <content type="html"><![CDATA[<h3 id="1-工具"><a href="#1-工具" class="headerlink" title="1. 工具"></a>1. 工具</h3><h4 id="1-JSON-Editor"><a href="#1-JSON-Editor" class="headerlink" title="1. JSON Editor"></a>1. JSON Editor</h4><p><a href="https://github.com/josdejong/jsoneditor" target="_blank" rel="noopener">https://github.com/josdejong/jsoneditor</a></p>
<pre><code>A web-based tool to view, edit, format, and validate JSON
</code></pre><p><a href="http://jsoneditoronline.org" target="_blank" rel="noopener">http://jsoneditoronline.org</a></p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1ftszcj0i7gj20nb0d4jsr.jpg" alt="JSON Editor" title="" class="">
                <p>JSON Editor</p>
            </figure>
<h4 id="2-JSON-Handle"><a href="#2-JSON-Handle" class="headerlink" title="2.JSON-Handle"></a>2.JSON-Handle</h4><p><a href="http://jsonhandle.sinaapp.com/" target="_blank" rel="noopener">http://jsonhandle.sinaapp.com/</a></p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1ftsvf86e0sj20sh0lcdib.jpg" alt="JSON-Handle" title="" class="">
                <p>JSON-Handle</p>
            </figure>
<a id="more"></a>
<h4 id="3-json-schema-editor-visual"><a href="#3-json-schema-editor-visual" class="headerlink" title="3. json-schema-editor-visual"></a>3. json-schema-editor-visual</h4><pre><code>A json-schema editor of high efficient and easy-to-use, base on React.
</code></pre><p><a href="http://yapi.demo.qunar.com/editor/" target="_blank" rel="noopener">http://yapi.demo.qunar.com/editor/</a><br><img src="https://raw.githubusercontent.com/YMFE/json-schema-editor-visual/master/json-schema-editor-visual.jpg" alt="json-schema-editor-visual"></p>
<h4 id="4-json-editor"><a href="#4-json-editor" class="headerlink" title="4. json-editor"></a>4. json-editor</h4><pre><code>JSON Schema Based Editor
</code></pre><p><a href="https://github.com/jdorn/json-editor" target="_blank" rel="noopener">https://github.com/jdorn/json-editor</a><br><a href="https://github.com/json-editor/json-editor" target="_blank" rel="noopener">https://github.com/json-editor/json-editor</a></p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1ftsvj5nrmyj20xk0ixad4.jpg" alt="JSON Schema Based Editor" title="" class="">
                <p>JSON Schema Based Editor</p>
            </figure>
<h4 id="5-JSONmate"><a href="#5-JSONmate" class="headerlink" title="5. JSONmate"></a>5. JSONmate</h4><pre><code>JSON editor jQuery plugin
</code></pre><p><a href="https://github.com/DavidDurman/FlexiJsonEditor" target="_blank" rel="noopener">https://github.com/DavidDurman/FlexiJsonEditor</a><br><a href="http://jsonmate.com" target="_blank" rel="noopener">http://jsonmate.com</a></p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1ftsvl9351yj20wt0jin09.jpg" alt="JSONmate" title="" class="">
                <p>JSONmate</p>
            </figure>
<h4 id="6-JSONedit"><a href="#6-JSONedit" class="headerlink" title="6. JSONedit"></a>6. JSONedit</h4><pre><code>User friendly, visual JSON editor built as an Angular 1 directive.
</code></pre><p><a href="https://github.com/mb21/JSONedit" target="_blank" rel="noopener">https://github.com/mb21/JSONedit</a></p>
<p><a href="http://mb21.github.io/JSONedit/" target="_blank" rel="noopener">http://mb21.github.io/JSONedit/</a></p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1ftsvor69r7j20mj0j5gmy.jpg" alt="JSONedit" title="" class="">
                <p>JSONedit</p>
            </figure>
<h3 id="2-JSON-Editor使用"><a href="#2-JSON-Editor使用" class="headerlink" title="2. JSON Editor使用"></a>2. JSON Editor使用</h3><p><a href="https://github.com/josdejong/jsoneditor/blob/master/docs/usage.md" target="_blank" rel="noopener">INSTALL&amp;USE</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install jsoneditor</span><br><span class="line">----</span><br><span class="line">bower install jsoneditor</span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/josdejong/jsoneditor/blob/master/docs/api.md" target="_blank" rel="noopener">API</a></p>
<p><a href="https://github.com/josdejong/jsoneditor/tree/master/examples" target="_blank" rel="noopener">EXAMPLE</a></p>
<h3 id="3-整合示例"><a href="#3-整合示例" class="headerlink" title="3. 整合示例"></a>3. 整合示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONEditor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/jsoneditor.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jsoneditor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://bgrins.github.io/filereader.js/filereader.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2014-11-29/FileSaver.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">      font: 11pt arial;</span></span><br><span class="line"><span class="undefined">      color: #4d4d4d;</span></span><br><span class="line"><span class="undefined">      line-height: 150%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    code &#123;</span></span><br><span class="line"><span class="undefined">      background-color: #f5f5f5;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #title &#123;</span></span><br><span class="line"><span class="undefined">      height: 150px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #container1 &#123;</span></span><br><span class="line"><span class="undefined">      float: left;</span></span><br><span class="line"><span class="undefined">      width: 500px;</span></span><br><span class="line"><span class="undefined">      height: calc(100vh - 150px);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #container2 &#123;</span></span><br><span class="line"><span class="undefined">      margin-left: 500px;</span></span><br><span class="line"><span class="undefined">      height: calc(100vh - 150px);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Load and save JSON documents<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Load a JSON document:</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"loadDocument"</span> <span class="attr">value</span>=<span class="string">"Load"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Save a JSON document:</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"saveDocument"</span> <span class="attr">value</span>=<span class="string">"Save"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>set and get JSON<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"setJSON"</span>&gt;</span>Set JSON<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"getJSON"</span>&gt;</span>Get JSON<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>the field</span><br><span class="line">      <span class="tag">&lt;<span class="name">code</span>&gt;</span>example_id<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and its value are read-only<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>the field</span><br><span class="line">      <span class="tag">&lt;<span class="name">code</span>&gt;</span>example_name<span class="tag">&lt;/<span class="name">code</span>&gt;</span> is read-only but has an editable value<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>the field</span><br><span class="line">      <span class="tag">&lt;<span class="name">code</span>&gt;</span>example_age<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and its value are editable<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Item templates<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Using item templates, the options in the context menu under "insert" and "append" can be extended with extra options, containing</span><br><span class="line">    a domain specific template like a "Person", "Contact", "Order", "Address", etc.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> container1 = <span class="built_in">document</span>.getElementById(<span class="string">'container1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> options1 = &#123;</span></span><br><span class="line"><span class="javascript">      mode: <span class="string">'text'</span>,</span></span><br><span class="line"><span class="javascript">      error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(err.toString());</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      change: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (editor1 != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">          editor2.setText(editor1.getText());</span></span><br><span class="line"><span class="undefined">          editor2.expandAll();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> json = &#123;</span></span><br><span class="line"><span class="undefined">      example_id: 123456,</span></span><br><span class="line"><span class="javascript">      example_name: <span class="string">'John'</span>,</span></span><br><span class="line"><span class="undefined">      example_age: 32</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> editor1 = <span class="keyword">new</span> JSONEditor(container1, options1, json);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> container2 = <span class="built_in">document</span>.getElementById(<span class="string">'container2'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> options2 = &#123;</span></span><br><span class="line"><span class="javascript">      mode: <span class="string">"tree"</span>,</span></span><br><span class="line"><span class="javascript">      onError: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(err.toString());</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      onChange: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (editor2 != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">          editor1.setText(editor2.getText());</span></span><br><span class="line"><span class="undefined">          editor1.expandAll();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      onEditable: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// node is an object like:</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     field: 'FIELD',</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     value: 'VALUE',</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     path: ['PATH', 'TO', 'NODE']</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (node.field) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'example_id'</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="string">'example_name'</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">              field: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">              value: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      templates: [&#123;</span></span><br><span class="line"><span class="javascript">          text: <span class="string">'Person'</span>,</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Insert a Person Node'</span>,</span></span><br><span class="line"><span class="javascript">          className: <span class="string">'jsoneditor-type-object'</span>,</span></span><br><span class="line"><span class="javascript">          field: <span class="string">'PersonTemplate'</span>,</span></span><br><span class="line"><span class="undefined">          value: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'firstName'</span>: <span class="string">'John'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'lastName'</span>: <span class="string">'Do'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>: <span class="number">28</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          text: <span class="string">'Address'</span>,</span></span><br><span class="line"><span class="javascript">          title: <span class="string">'Insert a Address Node'</span>,</span></span><br><span class="line"><span class="javascript">          field: <span class="string">'AddressTemplate'</span>,</span></span><br><span class="line"><span class="undefined">          value: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'street'</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'city'</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'state'</span>: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'ZIP code'</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ],</span></span><br><span class="line"><span class="undefined">      autocomplete: &#123;</span></span><br><span class="line"><span class="javascript">        applyTo: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="javascript">        getOptions: <span class="function"><span class="keyword">function</span> (<span class="params">text, path, input, editor</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> options = extractUniqueWords(editor.get());</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (options.length &gt; <span class="number">0</span>) resolve(options);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span> reject();</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> editor2 = <span class="keyword">new</span> JSONEditor(container2, options2, json);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// set json</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'setJSON'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> json = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">"definitions"</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="string">"Beef"</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">"type"</span>: <span class="string">"object"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"properties"</span>: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="string">"BID"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"type"</span>: <span class="string">"string"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"id"</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="javascript">              <span class="string">"Species"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"type"</span>: <span class="string">"string"</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="javascript">              <span class="string">"Birthday"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"type"</span>: <span class="string">"string"</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="javascript">              <span class="string">"Color"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"type"</span>: <span class="string">"string"</span></span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="javascript">              <span class="string">"Status"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"type"</span>: <span class="string">"int"</span></span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">      editor1.set(json);</span></span><br><span class="line"><span class="undefined">      editor2.set(json);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// get json</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'getJSON'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> json = editor1.get();</span></span><br><span class="line"><span class="javascript">      alert(<span class="built_in">JSON</span>.stringify(json, <span class="literal">null</span>, <span class="number">2</span>));</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Load a JSON document</span></span></span><br><span class="line"><span class="javascript">    FileReaderJS.setupInput(<span class="built_in">document</span>.getElementById(<span class="string">'loadDocument'</span>), &#123;</span></span><br><span class="line"><span class="javascript">      readAsDefault: <span class="string">'Text'</span>,</span></span><br><span class="line"><span class="undefined">      on: &#123;</span></span><br><span class="line"><span class="javascript">        load: <span class="function"><span class="keyword">function</span> (<span class="params">event, file</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">          editor1.setText(event.target.result);</span></span><br><span class="line"><span class="undefined">          editor2.setText(event.target.result);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Save a JSON document</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'saveDocument'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Save Dialog</span></span></span><br><span class="line"><span class="javascript">      fname = <span class="built_in">window</span>.prompt(<span class="string">"Save as..."</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Check json extension in file name</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (fname.indexOf(<span class="string">"."</span>) == <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        fname = fname + <span class="string">".json"</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (fname.split(<span class="string">'.'</span>).pop().toLowerCase() == <span class="string">"json"</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// Nothing to do</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          fname = fname.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">".json"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([editor1.getText()], &#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'application/json;charset=utf-8'</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">      saveAs(blob, fname);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// helper function to extract all unique words in the keys and values of a JSON object</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">extractUniqueWords</span>(<span class="params">json</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> _.uniq(_.flatMapDeep(json, <span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> _.isObject(value) ?</span></span><br><span class="line"><span class="undefined">          [key] :</span></span><br><span class="line"><span class="javascript">          [key, <span class="built_in">String</span>(value)]</span></span><br><span class="line"><span class="undefined">      &#125;))</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-相关依赖学习"><a href="#4-相关依赖学习" class="headerlink" title="4. 相关依赖学习"></a>4. 相关依赖学习</h3><h4 id="1-JSON-Schema"><a href="#1-JSON-Schema" class="headerlink" title="1. JSON Schema"></a>1. JSON Schema</h4><p><a href="http://json-schema.org/" target="_blank" rel="noopener">http://json-schema.org/</a></p>
<pre><code>JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.
</code></pre><p>JSON Schema 用于规范化描述 JSON 数据结构，包括 JSON 数据所包含的字 段、以及字段值的类型，以及依赖关系等。</p>
<p><strong>声明 JSON Schema</strong><br>将普通 JSON 和 JSON Schema 区分开来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;$schema&quot;: &quot;http://json-schema.org/schema#&quot; &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>应用</strong></p>
<ol>
<li><p><strong>用于描述数据结构</strong><br>在描述 JSON 数据时，如果数据本身的复杂度很高，高到三维四维，普通的标签函数已经无法表示这种层级结构了，而 JSON Schema 利用 object 和 array 字段类型的反复嵌套，可以规避掉这个缺陷。<br>当然，除了键值等基本信息，规范层面还提供了丰富的关键词支持，如果想通过自定义扩展字段，解决特定场景的业务需求，也是非常方便的。</p>
</li>
<li><p><strong>用于构建人机可读的文档</strong><br>计算机领域有个概念叫做自描述。所谓自描述，可以理解为：文档本身包含了自身与其他文档交互相关的描述信息，不需要其他的配置文件或者额外信息来描述。<br>而 JSON Schema 就是自描述的，它本身就是一份很完善的说明文档，字段的含义说明、该如何取值、格式的要求等都清晰明了。</p>
</li>
<li><p><strong>用于生成模拟数据</strong><br>通过标签函数生成模拟数据，只能解决基本的格式要求。比如 string 类型的字段，模拟出来的数据，无非是一个随机字符串。<br>但在 JSON Schema 中，由于字段的描述不仅仅是类型，更多的约束条件，可以确保模拟数据更接近于真实数据。</p>
</li>
<li><p><strong>用于校验数据，实现自动化测试</strong><br>接口数据的校验工作，往往依赖于测试代码逻辑和用例。如果用 JSON Schema 描述一个数据接口，就不需要再编写测试代码了，所有的逻辑都可以移植到 JSON Schema 中维护。配合 jsv、tv4 等二方校验工具，接口测试可以真正自动化。</p>
</li>
</ol>
<p><a href="http://json-schema.org/learn/getting-started-step-by-step.html#data" target="_blank" rel="noopener">Getting Started Step-By-Step</a></p>
<p><a href="https://spacetelescope.github.io/understanding-json-schema/UnderstandingJSONSchema.pdf" target="_blank" rel="noopener">UnderstandingJSONSchema</a></p>
<p><a href="http://imweb.io/topic/56b1b4bb5c49f9d377ed8ee9" target="_blank" rel="noopener">JSON Schema 的举例</a></p>
<p><a href="https://jsonschema.net/" target="_blank" rel="noopener">JSON Schema Generator</a></p>
<pre><code>automatically generate JSON schema from JSON.
</code></pre><h4 id="2-ace-Ajax-org-Cloud9-Editor"><a href="#2-ace-Ajax-org-Cloud9-Editor" class="headerlink" title="2. ace (Ajax.org Cloud9 Editor)"></a>2. ace (Ajax.org Cloud9 Editor)</h4><p>web代码编辑器</p>
<p><a href="https://ace.c9.io/" target="_blank" rel="noopener">https://ace.c9.io/</a></p>
<pre><code>Ace is an embeddable code editor written in JavaScript. It matches the features and performance of native editors such as Sublime, Vim and TextMate. It can be easily embedded in any web page and JavaScript application. Ace is maintained as the primary editor for Cloud9 IDE and is the successor of the Mozilla Skywriter (Bespin) project.
</code></pre><p><a href="https://ace.c9.io/build/kitchen-sink.html" target="_blank" rel="noopener">demo</a></p>
<p><a href="https://github.com/ajaxorg/ace" target="_blank" rel="noopener">https://github.com/ajaxorg/ace</a></p>
<h4 id="3-文本读取和导出"><a href="#3-文本读取和导出" class="headerlink" title="3. 文本读取和导出"></a>3. 文本读取和导出</h4><p><a href="https://www.zhangxinxu.com/wordpress/2017/07/js-text-string-download-as-html-json-file/" target="_blank" rel="noopener">JS前端创建html或json文件并浏览器导出下载</a></p>
<p><a href="https://www.zhangxinxu.com/wordpress/2018/03/js-parse-text-file/" target="_blank" rel="noopener">纯前端JS读取与解析本地文本类文件</a></p>
<p><a href="https://github.com/bgrins/filereader.js" target="_blank" rel="noopener">filereader.js</a></p>
<p><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener">FileSaver.js</a></p>
<h3 id="5-form生成json"><a href="#5-form生成json" class="headerlink" title="5. form生成json"></a>5. form生成json</h3><p><a href="https://github.com/servanter/json-template" target="_blank" rel="noopener">https://github.com/servanter/json-template</a></p>
<p><a href="https://code.lengstorf.com/get-form-values-as-json/" target="_blank" rel="noopener">How to Convert HTML Form Field Values to a JSON Object</a></p>
<p><a href="http://www.ngui.cc/news/show-1846.html" target="_blank" rel="noopener">http://www.ngui.cc/news/show-1846.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js（二） promise]]></title>
      <url>/2018/08/16/Node.js%EF%BC%88%E4%BA%8C%EF%BC%89%20promise/</url>
      <content type="html"><![CDATA[<h3 id="1-参考链接"><a href="#1-参考链接" class="headerlink" title="1. 参考链接"></a>1. 参考链接</h3><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a><br>（基础）</li>
<li><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">http://liubin.org/promises-book/</a> （开源 Promise 迷你书）</li>
<li><a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="noopener">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a><br>（进阶）</li>
<li><a href="https://promisesaplus.com/" target="_blank" rel="noopener">https://promisesaplus.com/</a> （官方定义规范）</li>
</ol>
<p>本文大部分都摘抄总结于<a href="http://liubin.org/promises-book/#introduction" target="_blank" rel="noopener">JavaScript Promise迷你书</a>，侵删致歉。</p>
<h3 id="2-概念"><a href="#2-概念" class="headerlink" title="2. 概念"></a>2. 概念</h3><p>Promise是抽象异步处理对象以及对其进行各种操作的组件。</p>
<pre><code>The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.
</code></pre><blockquote>
<p>A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.</p>
</blockquote>
<blockquote>
<p>A Promise is in one of these states:</p>
</blockquote>
<blockquote>
<p><strong>pending</strong>: initial state, neither fulfilled nor rejected.<br><strong>fulfilled</strong>: meaning that the operation completed successfully.<br><strong>rejected</strong>: meaning that the operation failed.</p>
</blockquote>
<a id="more"></a>
<h4 id="回调函数的异步处理"><a href="#回调函数的异步处理" class="headerlink" title="回调函数的异步处理"></a>回调函数的异步处理</h4><p><strong>Node.js规定在JavaScript的回调函数的第一个参数为 Error 对象。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用了回调函数的异步处理</span><br><span class="line">----</span><br><span class="line">getAsync(<span class="string">"fileA.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;<span class="comment">// 取得失败时的处理</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取得成功时的处理</span></span><br><span class="line">&#125;);</span><br><span class="line">----</span><br><span class="line">&lt;<span class="number">1</span>&gt; 传给回调函数的参数为(error对象， 执行结果)组合</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">通过async方法重写 promise 链</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProcessedData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> downloadData(url) <span class="comment">// returns a promise</span></span><br><span class="line">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> downloadFallbackData(url)  <span class="comment">// returns a promise</span></span><br><span class="line">        .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> processDataInWorker(v); <span class="comment">// returns a promise</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> processDataInWorker(v); <span class="comment">// returns a promise</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getProcessedData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadData(url);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    v = <span class="keyword">await</span> downloadFallbackData(url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> processDataInWorker(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Promise进行异步处理"><a href="#Promise进行异步处理" class="headerlink" title="Promise进行异步处理"></a>Promise进行异步处理</h4><p>Promise把类似的<em>异步处理对象和处理规则进行规范化</em>， 并按照采用统一的接口来编写，而采取规定方法之外的写法都会出错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">下面是使用了<span class="built_in">Promise</span>进行异步处理的一个例子</span><br><span class="line">----</span><br><span class="line"><span class="keyword">var</span> promise = getAsyncPromise(<span class="string">"fileA.txt"</span>);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件内容成功时的处理</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件内容失败时的处理</span></span><br><span class="line">&#125;);</span><br><span class="line">----</span><br><span class="line">&lt;<span class="number">1</span>&gt; 返回promise对象</span><br></pre></td></tr></table></figure>
<h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>
<p><code>resolve</code>(成功)时<code>onFulfilled</code> 会被调用</p>
<p><code>reject</code>(失败)时<code>onRejected</code> 会被调用</p>
<p>只想对异常进行处理时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.catch(onRejected)</span><br></pre></td></tr></table></figure></p>
<h4 id="Promise-workflow"><a href="#Promise-workflow" class="headerlink" title="Promise workflow"></a>Promise workflow</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(<span class="string">'Async Hello world'</span>);</span><br><span class="line">        &#125;, <span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunction().then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);    <span class="comment">// =&gt; 'Async Hello world'</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>asyncFunction</code> 这个函数会返回<code>promise</code>对象， 对于这个<code>promise</code>对象，我们调用它的 <code>then</code> 方法来设置<code>resolve</code>后的回调函数， <code>catch</code> 方法来设置发生错误时的回调函数。</p>
<p>该<code>promise</code>对象会在<code>setTimeout</code>之后的16ms时被<code>resolve</code>, 这时 <code>then</code> 的回调函数会被调用，并输出<code>&#39;Async Hello world&#39;</code>。</p>
<h3 id="3-创建Promise对象"><a href="#3-创建Promise对象" class="headerlink" title="3. 创建Promise对象"></a>3. 创建Promise对象</h3><h4 id="创建XHR的promise对象"><a href="#创建XHR的promise对象" class="headerlink" title="创建XHR的promise对象"></a>创建XHR的promise对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(req.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-Promise方法"><a href="#4-Promise方法" class="headerlink" title="4. Promise方法"></a>4. Promise方法</h3><h4 id="1-Promise-resolve"><a href="#1-Promise-resolve" class="headerlink" title="1. Promise.resolve"></a>1. Promise.resolve</h4><p><code>Promise.resolve(value)</code> 可以认为是 <code>new Promise()</code> 方法的快捷方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">42</span>)</span><br><span class="line">----</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="2-Promise-reject"><a href="#2-Promise-reject" class="headerlink" title="2. Promise.reject"></a>2. Promise.reject</h4><p><code>Promise.reject(error)</code>也是 <code>new Promise()</code> 方法的快捷方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"出错了"</span>))</span><br><span class="line">----</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"出错了"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"BOOM!"</span>)).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>reject</code> 会比使用 <code>throw</code> 安全。<br>因为我们很难区分<code>throw</code>是我们主动抛出来的，还是因为真正的其它异常导致的。</p>
<p>Chrome的开发者工具提供了在程序发生异常的时候自动在调试器中<code>break</code>的功能。当我们开启这个功能的时候，在执行到下面代码中的 <code>throw</code> 时就会触发调试器的<code>break</code>行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"message"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，promise 状态一旦改变则不能再变。或者说 promise 内部状态一经改变，并且有了一个值，那么后续每次调用 .then 或者 .catch 都会直接拿到该值。</strong></p>
<h5 id="在then中进行reject"><a href="#在then中进行reject" class="headerlink" title="在then中进行reject"></a>在then中进行reject</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> retPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// resolve or reject 的状态决定 onFulfilled or onRejected 的哪个方法会被调用</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> retPromise;</span><br><span class="line">&#125;).then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onRejected = <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>);</span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"this promise is rejected"</span>));</span><br><span class="line">&#125;).catch(onRejected);</span><br></pre></td></tr></table></figure>
<h4 id="3-Thenable"><a href="#3-Thenable" class="headerlink" title="3. Thenable"></a>3. Thenable</h4><blockquote>
<p>类Promise对象。 拥有名为.then方法的对象。</p>
</blockquote>
<p> <code>jQuery.ajax()</code>的返回值是一个具有 <code>.then</code> 方法的 <code>jqXHR Object</code>对象,就是<code>thenable</code>的:</p>
<pre><code>$.ajax(&apos;/json/comment.json&apos;);// =&gt; 拥有 `.then` 方法的对象
</code></pre><p><code>Promise.resolve</code> 方法将 <code>thenable</code> 对象转换为promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'/json/comment.json'</span>));<span class="comment">// =&gt; promise对象</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但即使一个对象具有 <code>.then</code> 方法，也不一定就能作为ES6 Promises对象使用。</p>
<h4 id="4-Promise-then-catch"><a href="#4-Promise-then-catch" class="headerlink" title="4. Promise#then#catch"></a>4. Promise#then#catch</h4><p>promise方法链（<code>promise chain</code>）</p>
<p><strong>then</strong>: 注册onFulfilled时的回调函数</p>
<p><strong>catch</strong>: 注册onRejected时的回调函数</p>
<p><code>Promise#catch</code> 只是 <code>promise.then(undefined, onRejected);</code>方法别名</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">promise-then-<span class="keyword">catch</span>-flow.js</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Catch Error: A or B"</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise</span><br><span class="line">    .then(taskA)</span><br><span class="line">    .then(taskB)</span><br><span class="line">    .catch(onRejected)</span><br><span class="line">    .then(finalTask);</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">Task A</span><br><span class="line">Task B</span><br><span class="line">Final Task</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">taskA异常</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task A"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"throw Error @ Task A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Task B"</span>);<span class="comment">// 不会被调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);<span class="comment">// =&gt; "throw Error @ Task A"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Final Task"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise</span><br><span class="line">    .then(taskA)</span><br><span class="line">    .then(taskB)</span><br><span class="line">    .catch(onRejected)</span><br><span class="line">    .then(finalTask);</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">Task A</span><br><span class="line"><span class="built_in">Error</span>: <span class="keyword">throw</span> <span class="built_in">Error</span> @ Task A</span><br><span class="line">Final TaskPromise Anti-patterns</span><br></pre></td></tr></table></figure>
<p><code>Promise#then</code>不仅仅是注册一个回调函数那么简单，它还会将回调函数的返回值进行变换，创建并返回一个promise对象。</p>
<p><strong>点标记法（dot notation）</strong><br>要求对象的属性必须是有效的标识符（在ECMAScript 3中则不能使用保留字），</p>
<p><strong>中括号标记法（bracket notation）</strong><br>可以将非合法标识符作为对象的属性名使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"message"</span>));</span><br><span class="line">promise[<span class="string">"catch"</span>](<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"><span class="built_in">Error</span>: message</span><br></pre></td></tr></table></figure>
<p><a href="http://taoofcode.net/promise-anti-patterns/" target="_blank" rel="noopener">Promise Anti-patterns</a></p>
<h4 id="5-Promise-all"><a href="#5-Promise-all" class="headerlink" title="5. Promise.all"></a>5. Promise.all</h4><p><code>Promise.all</code> 接收一个 promise对象的数组作为参数，当这个数组里的所有promise对象全部变为resolve或reject状态的时候，它才会去调用<code>.then</code>方法。</p>
<p>传递给 <code>Promise.all</code> 的promise是同时开始、并行执行的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `delay`毫秒后执行resolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerPromisefy</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(delay);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> startDate = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="comment">// 所有promise变为resolve后程序退出</span></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    timerPromisefy(<span class="number">1</span>),</span><br><span class="line">    timerPromisefy(<span class="number">32</span>),</span><br><span class="line">    timerPromisefy(<span class="number">64</span>),</span><br><span class="line">    timerPromisefy(<span class="number">128</span>)</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - startDate + <span class="string">'ms'</span>);</span><br><span class="line">    <span class="comment">// 約128ms</span></span><br><span class="line">    <span class="built_in">console</span>.log(values);    <span class="comment">// [1,32,64,128]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"><span class="number">128</span>ms(及以上)</span><br><span class="line"><span class="number">1</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span></span><br></pre></td></tr></table></figure>
<h4 id="6-Promise-race"><a href="#6-Promise-race" class="headerlink" title="6. Promise.race"></a>6. Promise.race</h4><p><code>Promise.all</code> 在接收到的所有的对象promise都变为 <code>FulFilled</code> 或者 <code>Rejected</code> 状态之后才会继续进行后面的处理。</p>
<p><code>Promise.race</code> 只要有一个promise对象进入 <code>FulFilled</code> 或者 <code>Rejected</code> 状态的话，就会继续进行后面的处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `delay`毫秒后执行resolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerPromisefy</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(delay);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任何一个promise变为resolve或reject 的话程序就停止运行</span></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">    timerPromisefy(<span class="number">1</span>),</span><br><span class="line">    timerPromisefy(<span class="number">32</span>),</span><br><span class="line">    timerPromisefy(<span class="number">64</span>),</span><br><span class="line">    timerPromisefy(<span class="number">128</span>)</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);    <span class="comment">// =&gt; 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>Promise.race</code> 在第一个promise对象变为<code>Fulfilled</code>之后，并不会取消其他promise对象的执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> winnerPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is winner'</span>);</span><br><span class="line">            resolve(<span class="string">'this is winner'</span>);</span><br><span class="line">        &#125;, <span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="keyword">var</span> loserPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'this is loser'</span>);</span><br><span class="line">            resolve(<span class="string">'this is loser'</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 第一个promise变为resolve后程序停止</span></span><br><span class="line"><span class="built_in">Promise</span>.race([winnerPromise, loserPromise]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);    <span class="comment">// =&gt; 'this is winner'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line"><span class="keyword">this</span> is winner</span><br><span class="line"><span class="keyword">this</span> is winner</span><br><span class="line"><span class="keyword">this</span> is loser</span><br></pre></td></tr></table></figure>
<h3 id="5-Promise只能进行异步操作"><a href="#5-Promise只能进行异步操作" class="headerlink" title="5. Promise只能进行异步操作"></a>5. Promise只能进行异步操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"inner promise"</span>); <span class="comment">// 1</span></span><br><span class="line">    resolve(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// 3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"outer promise"</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">inner promise <span class="comment">// 1</span></span><br><span class="line">outer promise <span class="comment">// 2</span></span><br><span class="line"><span class="number">42</span>            <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>由于JavaScript代码会按照文件的从上到下的顺序执行，所以最开始<code>resolve(42)</code>被执行。这时候 promise 对象的已经变为确定状态，<code>FulFilled</code>被设置为了 42 。</p>
<p>但是即使在调用 <code>promise.then</code> 注册回调函数的时候promise对象已经是确定的状态，Promise也会以异步的方式调用该回调函数，这是在Promise设计上的规定方针。</p>
<blockquote>
<p>绝对不能对异步回调函数（即使在数据已经就绪）进行同步调用。</p>
<p>如果对异步回调函数进行同步调用的话，处理顺序可能会与预期不符，可能带来意料之外的后果。</p>
<p>对异步回调函数进行同步调用，还可能导致栈溢出或异常处理错乱等问题。</p>
<p>如果想在将来某时刻调用异步回调函数的话，可以使用 setTimeout 等异步API。</p>
<p>Effective JavaScript — David Herman</p>
</blockquote>
<h3 id="6-错误处理机制"><a href="#6-错误处理机制" class="headerlink" title="6. 错误处理机制"></a>6. 错误处理机制</h3><pre><code>promise.then(onFulfilled, onRejected)
</code></pre><p>在 <code>onFulfilled</code> 中发生异常的话，在 <code>onRejected</code> 中是捕获不到这个异常的。</p>
<pre><code>promise.then(onFulfilled).catch(onRejected)
</code></pre><p><code>then</code> 中产生的异常能在 <code>.catch</code> 中捕获。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwError</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &lt;1&gt; onRejected不会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">badMain</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">42</span>).then(throwError, onRejected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &lt;2&gt; 有异常发生时onRejected会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goodMain</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">42</span>).then(throwError).catch(onRejected);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line">badMain(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"BAD"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">goodMain(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"GOOD"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line">GOOD</span><br></pre></td></tr></table></figure>
<p><code>goodMain</code> 的代码则遵循了 <strong><code>throwError→onRejected</code></strong> 的调用流程。 这时候 <code>throwError</code> 中出现异常的话，在会被方法链中的下一个方法，即 <code>.catch</code> 所捕获，进行相应的错误处理。</p>
<p><code>.then</code> 方法中的<code>onRejected</code>参数所指定的回调函数，实际上针对的是其promise对象或者之前的promise对象，而不是针对 <code>.then</code> 方法里面指定的第一个参数，即<code>onFulfilled</code>所指向的对象，这也是 <code>then</code> 和 <code>catch</code>表现不同的原因。</p>
<p><img src="http://liubin.org/promises-book/Ch2_HowToWrite/img/then_catch.png" alt="then&amp;catch flow"></p>
<p>只用then方法也可以,但意图不够明确</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Promise.resolve(42).then(throwError).then(null, onRejected);</span><br></pre></td></tr></table></figure>
<h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mocha</span><br></pre></td></tr></table></figure>
<h4 id="1-使用done和回调函数测试"><a href="#1-使用done和回调函数测试" class="headerlink" title="1. 使用done和回调函数测试"></a>1. 使用done和回调函数测试</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise-done-example.js</span></span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span>.prototype.done === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.prototype.done = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.then(onFulfilled, onRejected).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise.done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">JSON</span>.parse(<span class="string">'this is not json'</span>);    <span class="comment">// =&gt; SyntaxError: JSON.parse</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; 请打开浏览器的开发者工具中的控制台窗口看一下</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>done</code> 并不返回promise对象</p>
<ul>
<li>也就是说，在<code>done</code>之后不能使用 <code>catch</code> 等方法组成方法链</li>
</ul>
</li>
<li><p><code>done</code> 中发生的异常会被直接抛给外面</p>
<ul>
<li>也就是说，不会进行Promise的错误处理（Error Handling）。done会在函数中跳过错误处理，直接抛出异常。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">basic-test.js</span><br><span class="line">-------------</span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'power-assert'</span>);</span><br><span class="line">describe(<span class="string">'Basic Test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context(<span class="string">'When Callback(high-order function)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        it(<span class="string">'should use `done` for test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                assert(<span class="literal">true</span>);</span><br><span class="line">                done();</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    context(<span class="string">'When promise object'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        it(<span class="string">'should use `done` for test?'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// このテストコードはある欠陥があります</span></span><br><span class="line">            promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                assert(value === <span class="number">1</span>);</span><br><span class="line">                done();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通常情况下，<code>assert</code> 失败的时候，会throw一个error， 测试框架会捕获该error，来判断测试失败。</p>
<p>但是，Promise的情况下 <code>.then</code> 绑定的函数执行时发生的error 会被Promise捕获，而测试框架则对此error将会一无所知。</p>
<p>为了处理 <code>assert</code> 失败的情况，我们需要额外添加 <code>.then(done, done);</code> 的代码。 这就要求我们在编写Promise测试时要格外小心，忘了加上上面语句的话，很可能就会写出一个永远不会返回直到超时的测试代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">"should use `done` for test?"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        assert(<span class="literal">false</span>);<span class="comment">// =&gt; throw AssertionError</span></span><br><span class="line">        done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--------修改</span><br><span class="line">it(<span class="string">"should use `done` for test?"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;).then(done, done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha basic-test.js</span><br></pre></td></tr></table></figure>
<h4 id="2-对Promise测试"><a href="#2-对Promise测试" class="headerlink" title="2. 对Promise测试"></a>2. 对Promise测试</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除了 done, 返回结果为promise对象</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'power-assert'</span>);</span><br><span class="line">describe(<span class="string">'Promise Test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'should return a promise object'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            assert(value === <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="8-Promise的实现类库"><a href="#8-Promise的实现类库" class="headerlink" title="8. Promise的实现类库"></a>8. Promise的实现类库</h3><p><a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">jakearchibald/es6-promise</a><br>一个兼容 ES6 Promises 的Polyfill类库。 它基于 RSVP.js 这个兼容 Promises/A+ 的类库， 它只是 RSVP.js 的一个子集，只实现了Promises 规定的 API。</p>
<p><a href="https://github.com/yahoo/ypromise" target="_blank" rel="noopener">yahoo/ypromise</a><br>这是一个独立版本的 YUI 的 Promise Polyfill，具有和 ES6 Promises 的兼容性。 本书的示例代码也都是基于这个 ypromise 的 Polyfill 来在线运行的。</p>
<p><a href="https://github.com/getify/native-promise-only/" target="_blank" rel="noopener">getify/native-promise-only</a><br>以作为ES6 Promises的polyfill为目的的类库 它严格按照ES6 Promises的规范设计，没有添加在规范中没有定义的功能。 如果运行环境有原生的Promise支持的话，则优先使用原生的Promise支持。</p>
<h4 id="Promise扩展类库"><a href="#Promise扩展类库" class="headerlink" title="Promise扩展类库"></a>Promise扩展类库</h4><p><a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">kriskowal/q</a><br>类库 Q 实现了 Promises 和 Deferreds 等规范。 它自2009年开始开发，还提供了面向Node.js的文件IO API Q-IO 等， 是一个在很多场景下都能用得到的类库。</p>
<p><a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="noopener">petkaantonov/bluebird</a><br>这个类库除了兼容 Promise 规范之外，还扩展了取消promise对象的运行，取得promise的运行进度，以及错误处理的扩展检测等非常丰富的功能，此外它在实现上还在性能问题下了很大的功夫。</p>
<h3 id="9-callback-amp-promise-amp-thenable"><a href="#9-callback-amp-promise-amp-thenable" class="headerlink" title="9. callback &amp; promise &amp; thenable"></a>9. callback &amp; promise &amp; thenable</h3><h4 id="1-Web-Notification-包装函数（wrapper）"><a href="#1-Web-Notification-包装函数（wrapper）" class="headerlink" title="1. Web Notification 包装函数（wrapper）"></a>1. Web Notification 包装函数（wrapper）</h4><p>回调风格<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//notification-callback.js</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyMessage</span>(<span class="params">message, options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Notification &amp;&amp; Notification.permission === <span class="string">'granted'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">        callback(<span class="literal">null</span>, notification);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Notification.requestPermission) &#123;</span><br><span class="line">        Notification.requestPermission(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Notification.permission !== status) &#123;</span><br><span class="line">                Notification.permission = status;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (status === <span class="string">'granted'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">                callback(<span class="literal">null</span>, notification);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'user denied'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'doesn\'t support Notification API'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="comment">// 第二个参数是传给 `Notification` 的option对象</span></span><br><span class="line">notifyMessage(<span class="string">"Hi!"</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, notification</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(notification);<span class="comment">// 通知对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="2-Web-Notification-as-Promise"><a href="#2-Web-Notification-as-Promise" class="headerlink" title="2. Web Notification as Promise"></a>2. Web Notification as Promise</h4><p>返回promise对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//notification-as-promise.js</span></span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyMessage</span>(<span class="params">message, options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Notification &amp;&amp; Notification.permission === <span class="string">'granted'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">        callback(<span class="literal">null</span>, notification);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Notification.requestPermission) &#123;</span><br><span class="line">        Notification.requestPermission(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Notification.permission !== status) &#123;</span><br><span class="line">                Notification.permission = status;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (status === <span class="string">'granted'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">                callback(<span class="literal">null</span>, notification);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'user denied'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'doesn\'t support Notification API'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyMessageAsPromise</span>(<span class="params">message, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        notifyMessage(message, options, <span class="function"><span class="keyword">function</span> (<span class="params">error, notification</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                reject(error);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(notification);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line">notifyMessageAsPromise(<span class="string">"Hi!"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">notification</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(notification);<span class="comment">// 通知对象</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="3-Web-Notifications-As-Thenable"><a href="#3-Web-Notifications-As-Thenable" class="headerlink" title="3. Web Notifications As Thenable"></a>3. Web Notifications As Thenable</h4><p><code>thenable</code>就是一个具有 <code>.then</code>方法的一个对象。</p>
<p><code>then</code>方法的参数和 <code>new Promise(function (resolve, reject){})</code> 一样，在确定时执行 <code>resolve</code> 方法，拒绝时调用 <code>reject</code> 方法。</p>
<p>我们可以看出， <code>Promise.resolve(thenable)</code> 通过使用了  <code>thenable</code> 这个promise对象，就能利用Promise功能了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//notification-thenable.js</span></span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyMessage</span>(<span class="params">message, options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Notification &amp;&amp; Notification.permission === <span class="string">'granted'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">        callback(<span class="literal">null</span>, notification);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Notification.requestPermission) &#123;</span><br><span class="line">        Notification.requestPermission(<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Notification.permission !== status) &#123;</span><br><span class="line">                Notification.permission = status;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (status === <span class="string">'granted'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> notification = <span class="keyword">new</span> Notification(message, options);</span><br><span class="line">                callback(<span class="literal">null</span>, notification);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'user denied'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'doesn\'t support Notification API'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回 `thenable`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyMessageAsThenable</span>(<span class="params">message, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'then'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            notifyMessage(message, options, <span class="function"><span class="keyword">function</span> (<span class="params">error, notification</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    reject(error);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve(notification);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(notifyMessageAsThenable(<span class="string">"message"</span>)).then(<span class="function"><span class="keyword">function</span> (<span class="params">notification</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(notification);<span class="comment">// 通知对象</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>Thenable</code>本身并不依赖于Promise功能，但是Promise之外也没有使用<code>Thenable</code>的方式，所以可以认为<code>Thenable</code>间接依赖于Promise。</p>
<h3 id="10-Deferred-amp-Promise"><a href="#10-Deferred-amp-Promise" class="headerlink" title="10. Deferred &amp; Promise"></a>10. Deferred &amp; Promise</h3><h4 id="deferred-介绍"><a href="#deferred-介绍" class="headerlink" title="deferred 介绍"></a>deferred 介绍</h4><blockquote>
<p>The Deferred object, introduced in jQuery 1.5, is a chainable utility object created by calling the jQuery.Deferred() method. It can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</p>
</blockquote>
<p>Deferred最初是在Python的 <a href="https://twistedmatrix.com/trac/" target="_blank" rel="noopener">Twisted</a> 框架中被提出来的概念。 在JavaScript领域可以认为它是由 <a href="http://mochi.github.io/mochikit/doc/html/MochiKit/Async.html" target="_blank" rel="noopener">MochiKit.Async</a> 、 <a href="http://dojotoolkit.org/reference-guide/1.9/dojo/Deferred.html" target="_blank" rel="noopener">dojo/Deferred</a> 等Library引入的。    </p>
<p><a href="http://api.jquery.com/category/deferred-object/" target="_blank" rel="noopener">jQuery.Deferred</a></p>
<p><a href="https://cho45.stfuawsc.com/jsdeferred/" target="_blank" rel="noopener">JSDeferred</a></p>
<p>下图为<code>jQuery.Deferred</code>结构的简化版。当然也有的<code>Deferred</code>实现并没有内涵Promise。</p>
<p><img src="http://liubin.org/promises-book/Ch4_AdvancedPromises/img/deferred-and-promise.png" alt="Deferred &amp; Promise"></p>
<h4 id="基于Promise实现Deferred"><a href="#基于Promise实现Deferred" class="headerlink" title="基于Promise实现Deferred"></a>基于Promise实现Deferred</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deferred</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._resolve = resolve;</span><br><span class="line">        <span class="keyword">this</span>._reject = reject;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">Deferred.prototype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._resolve.call(<span class="keyword">this</span>.promise, value);</span><br><span class="line">&#125;;</span><br><span class="line">Deferred.prototype.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._reject.call(<span class="keyword">this</span>.promise, reason);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>所谓的能对Promise状态进行操作的特权方法，指的就是能对promise对象的状态进行<code>resolve</code>、<code>reject</code>等调用的方法，而通常的Promise的话只能在通过构造函数传递的方法之内对promise对象的状态进行操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr-promise.js</span></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(req.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr-deferred.js</span></span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deferred</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._resolve = resolve;</span><br><span class="line">        <span class="keyword">this</span>._reject = reject;</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">Deferred.prototype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._resolve.call(<span class="keyword">this</span>.promise, value);</span><br><span class="line">&#125;;</span><br><span class="line">Deferred.prototype.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._reject.call(<span class="keyword">this</span>.promise, reason);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deferred = <span class="keyword">new</span> Deferred();</span><br><span class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">    req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">            deferred.resolve(req.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deferred.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        deferred.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">    &#125;;</span><br><span class="line">    req.send();</span><br><span class="line">    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>Deferred 不需要将代码用Promise括起来</li>
<li>由于没有被嵌套在函数中，可以减少一层缩进</li>
<li>反过来没有Promise里的错误处理逻辑</li>
</ul>
<blockquote>
<p><strong>Promise代表了一个对象</strong>，这个对象的状态现在还不确定，但是未来一个时间点它的状态要么变为正常值（FulFilled），要么变为异常值（Rejected）；<br><strong>Deferred对象表示了一个处理还没有结束的这种事实</strong>，在它的处理结束的时候，可以通过Promise来取得处理结果。</p>
</blockquote>
<h3 id="11-使用Promise-race来实现超时机制"><a href="#11-使用Promise-race来实现超时机制" class="headerlink" title="11. 使用Promise.race来实现超时机制"></a>11. 使用Promise.race来实现超时机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//delayPromise.js</span></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayPromise</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//simple-timeout-promise.js</span></span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayPromise</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutPromise</span>(<span class="params">promise, ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = delayPromise(ms).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Operation timed out after '</span> + ms + <span class="string">' ms'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([promise, timeout]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数 <code>timeoutPromise(比较对象promise, ms)</code> 接收两个参数，第一个是需要使用超时机制的promise对象，第二个参数是超时时间，它返回一个由 <code>Promise.race</code> 创建的相互竞争的promise对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayPromise</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutPromise</span>(<span class="params">promise, ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = delayPromise(ms).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Operation timed out after '</span> + ms + <span class="string">' ms'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([promise, timeout]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> taskPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 随便一些什么处理</span></span><br><span class="line">    <span class="keyword">var</span> delay = <span class="built_in">Math</span>.random() * <span class="number">2000</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(delay + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">&#125;);</span><br><span class="line">timeoutPromise(taskPromise, <span class="number">1000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"taskPromise在规定时间内结束 : "</span> + value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"发生超时"</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//delay-race-cancel-play.js</span></span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyOwnFrom</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(source).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">propName</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target, propName, <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, propName));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TimeoutError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> superInstance = <span class="built_in">Error</span>.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    copyOwnFrom(<span class="keyword">this</span>, superInstance);</span><br><span class="line">&#125;</span><br><span class="line">TimeoutError.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Error</span>.prototype);</span><br><span class="line">TimeoutError.prototype.constructor = TimeoutError;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayPromise</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutPromise</span>(<span class="params">promise, ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = delayPromise(ms).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> TimeoutError(<span class="string">'Operation timed out after '</span> + ms + <span class="string">' ms'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([promise, timeout]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelableXHR</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">            req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(req.responseText);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;;</span><br><span class="line">            req.onabort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'abort this request'</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">            req.send();</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">var</span> abort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果request还没有结束的话就执行abort</span></span><br><span class="line">        <span class="comment">// https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</span></span><br><span class="line">        <span class="keyword">if</span> (req.readyState !== XMLHttpRequest.UNSENT) &#123;</span><br><span class="line">            req.abort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        promise: promise,</span><br><span class="line">        abort: abort</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> object = cancelableXHR(<span class="string">'http://httpbin.org/get'</span>);</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line">timeoutPromise(object.promise, <span class="number">1000</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Contents'</span>, contents);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error <span class="keyword">instanceof</span> TimeoutError) &#123;</span><br><span class="line">        object.abort();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'XHR Error :'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li><p>通过 <code>cancelableXHR</code> 方法取得包装了XHR的promise对象和取消该XHR请求的方法</p>
</li>
<li><p>在 <code>timeoutPromise</code> 方法中通过 <code>Promise.race</code> 让XHR的包装promise和超时用promise进行竞争。</p>
<ul>
<li><p>XHR在超时前返回结果的话</p>
<ul>
<li>和正常的promise一样，通过 <code>then</code> 返回请求结果</li>
</ul>
</li>
<li><p>发生超时的时候</p>
<ul>
<li><p>抛出 <code>throw TimeoutError</code> 异常并被 <code>catch</code></p>
</li>
<li><p><code>catch</code>的错误对象如果是 <code>TimeoutError</code> 类型的话，则调用 <code>abort</code> 方法取消XHR请求</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="12-易错点"><a href="#12-易错点" class="headerlink" title="12. 易错点"></a>12. 易错点</h3><p><a href="http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/" target="_blank" rel="noopener">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a></p>
<h4 id="1-promises-vs-promises-factories"><a href="#1-promises-vs-promises-factories" class="headerlink" title="1. promises vs promises factories"></a>1. promises vs promises factories</h4><p>当我们希望执行一个个的执行一个 promises 序列，即类似 Promise.all() 但是并非并行的执行所有 promises。</p>
<p>错误写法(传入 executeSequentially() 的 promises 依然会并行执行)：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  promises.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">    result = result.then(promise);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其根源在于你所希望的，实际上根本不是去执行一个 promises 序列。<br>依照 promises 规范，<strong>一旦一个 promise 被创建，它就被执行了</strong>。<br>因此你实际上需要的是一个 promise factories 数组。</p>
<p>正确写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promiseFactories</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  promiseFactories.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promiseFactory</span>) </span>&#123;</span><br><span class="line">    result = result.then(promiseFactory);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromiseFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> somethingThatCreatesAPromise();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个 promises factory 仅仅是一个可以返回 promise 的函数， 在被执行之前并不会创建 promise。它就像一个 then 函数一样，而实际上，它们就是完全一样的东西。</p>
<h4 id="2-promise依赖-amp-命名函数"><a href="#2-promise依赖-amp-命名函数" class="headerlink" title="2. promise依赖 &amp; 命名函数"></a>2. promise依赖 &amp; 命名函数</h4><p>有时候，一个 promise 会依赖于另一个，但是如果我们希望同时获得这两个 promises 的输出。</p>
<p>错误写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// dangit, I need the "user" object too!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>正确的金字塔写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getUserByName(<span class="string">'nolan'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// okay, I have both the "user" and the "userAccount"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>避免缩进问题，将函数抽离到一个命名函数中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUserAndUserAccount</span>(<span class="params">user, userAccount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomething(user, userAccount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUser</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUserAccountById(user.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> onGetUserAndUserAccount(user, userAccount);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserByName(<span class="string">'nolan'</span>)</span><br><span class="line">  .then(onGetUser)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// at this point, doSomething() is done, and we are back to indentation 0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="3-promise穿透"><a href="#3-promise穿透" class="headerlink" title="3. promise穿透"></a>3. promise穿透</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>)).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line">result: foo</span><br></pre></td></tr></table></figure>
<p>发生这个的原因是如果你像 <code>then()</code> 传递的并非是一个函数（比如 promise），它实际上会将其解释为 <code>then(null)</code>，这就会导致前一个 promise 的结果会穿透下面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="literal">null</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>then()</code> 是期望获取一个函数。</p>
<p>正确写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---------------</span><br><span class="line">result: bar</span><br></pre></td></tr></table></figure>
<h3 id="13-经典问题"><a href="#13-经典问题" class="headerlink" title="13. 经典问题"></a>13. 经典问题</h3><h4 id="Puzzle-1"><a href="#Puzzle-1" class="headerlink" title="Puzzle #1"></a>Puzzle #1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>
<p>Answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(undefined)</span><br><span class="line">                  |------------------|</span><br><span class="line">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class="line">                                     |------------------|</span><br></pre></td></tr></table></figure>
<h4 id="Puzzle-2"><a href="#Puzzle-2" class="headerlink" title="Puzzle #2"></a>Puzzle #2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;).then(finalHandler);</span><br></pre></td></tr></table></figure>
<p>Answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(undefined)</span><br><span class="line">                  |------------------|</span><br><span class="line">                  finalHandler(undefined)</span><br><span class="line">                  |------------------|</span><br></pre></td></tr></table></figure>
<h4 id="Puzzle-3"><a href="#Puzzle-3" class="headerlink" title="Puzzle #3"></a>Puzzle #3</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse())</span><br><span class="line">  .then(finalHandler);</span><br></pre></td></tr></table></figure>
<p>Answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">doSomethingElse(undefined)</span><br><span class="line">|---------------------------------|</span><br><span class="line">                  finalHandler(resultOfDoSomething)</span><br><span class="line">                  |------------------|</span><br></pre></td></tr></table></figure>
<h4 id="Puzzle-4"><a href="#Puzzle-4" class="headerlink" title="Puzzle #4"></a>Puzzle #4</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse)</span><br><span class="line">  .then(finalHandler);</span><br></pre></td></tr></table></figure>
<p>Answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doSomething</span><br><span class="line">|-----------------|</span><br><span class="line">                  doSomethingElse(resultOfDoSomething)</span><br><span class="line">                  |------------------|</span><br><span class="line">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class="line">                                     |------------------|</span><br></pre></td></tr></table></figure>
<h4 id="5-深入阅读"><a href="#5-深入阅读" class="headerlink" title="5. 深入阅读"></a>5. 深入阅读</h4><p><a href="https://zhuanlan.zhihu.com/p/30797777" target="_blank" rel="noopener">Promise 必知必会（十道题）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25178630" target="_blank" rel="noopener">深入 Promise(一)——Promise 实现详解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25198178" target="_blank" rel="noopener">深入 Promise(二)——进击的 Promise</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25199781" target="_blank" rel="noopener">深入 Promise(三)——命名 Promise</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js (一) Express]]></title>
      <url>/2018/08/15/Node.js%20(%E4%B8%80)%20Express/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<p><a href="https://github.com/nswbmw/N-blog/" target="_blank" rel="noopener">https://github.com/nswbmw/N-blog/</a></p>
<h3 id="1-环境变量"><a href="#1-环境变量" class="headerlink" title="1. 环境变量"></a>1. 环境变量</h3><p><code>环境变量（environment variables）</code>一般是指在操作系统中用来指定操作系统运行环境的一些参数。</p>
<p>简单来讲，环境变量就是传递参数给运行程序的。</p>
<pre><code>env  //显示环境变量
</code></pre><p>nodejs使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=test node app</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(process.env.NODE_ENV) <span class="comment">//test</span></span><br></pre></td></tr></table></figure>
<p>debug模块使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=* node app</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"><span class="comment">//windows用户设置</span></span><br><span class="line"></span><br><span class="line">set DEBUG=*</span><br><span class="line">set NODE_ENV=test</span><br><span class="line">node app</span><br></pre></td></tr></table></figure>
<p><a href="https://www.npmjs.com/package/cross-env" target="_blank" rel="noopener">cross-env</a></p>
<pre><code>Run scripts that set and use environment variables across platforms
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cross-env NODE_ENV=test node app</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-package-json"><a href="#2-package-json" class="headerlink" title="2. package.json"></a>2. package.json</h3><p><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">https://docs.npmjs.com/files/package.json</a></p>
<p><code>语义化版本（semver）</code>即 dependencies、devDependencies 和 peerDependencies 里的如：<code>&quot;co&quot;: &quot;^4.6.0&quot;</code>。</p>
<p><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">http://semver.org/lang/zh-CN/</a></p>
<p>semver 格式：<code>主版本号.次版本号.修订号</code>。版本号递增规则如下：</p>
<ul>
<li><code>主版本号</code>：做了不兼容的 API 修改</li>
<li><code>次版本号</code>：做了向下兼容的功能性新增</li>
<li><code>修订号</code>：做了向下兼容的 bug 修正</li>
</ul>
<h3 id="3-npm操作"><a href="#3-npm操作" class="headerlink" title="3. npm操作"></a>3. npm操作</h3><h4 id="搜索npm模块"><a href="#搜索npm模块" class="headerlink" title="搜索npm模块"></a>搜索npm模块</h4><ul>
<li><a href="http://npmjs.com" target="_blank" rel="noopener">http://npmjs.com</a>(npm 官网)</li>
<li><a href="http://node-modules.com" target="_blank" rel="noopener">http://node-modules.com</a></li>
<li><a href="https://npms.io" target="_blank" rel="noopener">https://npms.io</a></li>
<li><a href="https://nodejsmodules.org" target="_blank" rel="noopener">https://nodejsmodules.org</a></li>
</ul>
<h4 id="1-npm-init"><a href="#1-npm-init" class="headerlink" title="1. npm init"></a>1. npm init</h4><p>初始化一个空项目</p>
<h4 id="2-npm-install"><a href="#2-npm-install" class="headerlink" title="2. npm install"></a>2. npm install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -h</span><br><span class="line"></span><br><span class="line">npm install (with no args, <span class="keyword">in</span> package dir)</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;tag&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version&gt;</span><br><span class="line">npm install [&lt;@scope&gt;/]&lt;pkg&gt;@&lt;version range&gt;</span><br><span class="line">npm install &lt;folder&gt;</span><br><span class="line">npm install &lt;tarball file&gt;</span><br><span class="line">npm install &lt;tarball url&gt;</span><br><span class="line">npm install &lt;git:// url&gt;</span><br><span class="line">npm install &lt;github username&gt;/&lt;github project&gt;</span><br><span class="line"></span><br><span class="line">aliases: i, isntall, add</span><br><span class="line">common options: [--save-prod|--save-dev|--save-optional] [--save-exact] [--no-save]</span><br></pre></td></tr></table></figure>
<p>直接使用 <code>npm i</code> 安装的模块是不会写入 <code>package.json</code> 的 dependencies (或 devDependencies)，需要额外加个参数:</p>
<blockquote>
<ol>
<li><code>npm i express --save</code>/<code>npm i express -S</code><br>(安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 dependencies )</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li><code>npm i express --save-dev</code>/<code>npm i express -D</code><br>(安装 express，同时将 <code>&quot;express&quot;: &quot;^4.14.0&quot;</code> 写入 devDependencies )</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li><code>npm i express --save --save-exact</code><br>(安装 express，同时将固定版本号 <code>&quot;express&quot;: &quot;4.14.0&quot;</code> 写入 dependencies )</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set save-exact true</span><br></pre></td></tr></table></figure>
<p>这样每次 <code>npm i xxx --save</code> 的时候会锁定依赖的版本号，相当于加了 <code>--save-exact</code> 参数。(<code>npm config set</code> 命令将配置写到了 <code>~/.npmrc</code> 文件，运行 <code>npm config list</code>查看。)</p>
<h4 id="3-npm-scripts"><a href="#3-npm-scripts" class="headerlink" title="3. npm scripts"></a>3. npm scripts</h4><p><a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener">npm scripts</a></p>
<p><code>npm start</code> 等价于<code>npm run start</code><br><code>npm test</code> 等价于 <code>npm run test</code></p>
<h4 id="4-npm-shrinkwrap"><a href="#4-npm-shrinkwrap" class="headerlink" title="4. npm shrinkwrap"></a>4. npm shrinkwrap</h4><p><a href="https://docs.npmjs.com/cli/shrinkwrap" target="_blank" rel="noopener">npm-shrinkwrap</a></p>
<p>运行后会在当前目录下产生一个 <code>npm-shrinkwrap.json</code>，里面包含了通过 <code>node_modules</code> 计算出的模块的依赖树及版本。</p>
<p>只要目录下有 <code>npm-shrinkwrap.json</code> 则运行 <code>npm install</code> 的时候会优先使用 <code>npm-shrinkwrap.json</code> 进行安装，没有则使用 <code>package.json</code> 进行安装。</p>
<p><code>npm shrinkwrap</code> 只会生成 dependencies 的依赖，不会生成 devDependencies 的。</p>
<h3 id="4-初始化express项目"><a href="#4-初始化express项目" class="headerlink" title="4. 初始化express项目"></a>4. 初始化express项目</h3><p><a href="http://expressjs.com/en/4x/api.html" target="_blank" rel="noopener">express官方文档</a></p>
<p><code>npm init</code></p>
<p><code>npm i express --save</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, express'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p>运行 <code>node index</code>，打开浏览器访问 <code>localhost:3000</code> 时，页面应显示 <code>hello, express</code>。</p>
<h3 id="5-node-supervisor"><a href="#5-node-supervisor" class="headerlink" title="5. node-supervisor"></a>5. node-supervisor</h3><p><a href="https://www.npmjs.com/package/supervisor" target="_blank" rel="noopener">node-supervisor</a></p>
<pre><code>A little supervisor script for nodejs. It runs your program, and watches for code changes, so you can have hot-code reloading-ish behavior, without worrying about memory leaks and making sure you clean up all the inter-module references, and without a whole new require system.
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g supervisor</span><br></pre></td></tr></table></figure>
<p>运行 <code>supervisor index</code> 启动程序, supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p>
<h3 id="6-路由匹配"><a href="#6-路由匹配" class="headerlink" title="6. 路由匹配"></a>6. 路由匹配</h3><p><a href="https://www.npmjs.com/package/path-to-regexp" target="_blank" rel="noopener">Path-to-RegExp</a></p>
<pre><code>Turn a path string such as /user/:name into a regular expression.
</code></pre><p>express 使用了 <code>path-to-regexp</code> 模块实现的路由匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/users/:name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, '</span> + req.params.name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>req 包含了请求来的相关信息，res 则用来返回该请求的响应。</p>
<h4 id="常用的-req-的属性："><a href="#常用的-req-的属性：" class="headerlink" title="常用的 req 的属性："></a>常用的 req 的属性：</h4><p><strong>req.query</strong>:<br>解析 url 中的<code>querystring</code>，如 <code>?name=haha</code>，req.query 的值为 <code>{name: &#39;haha&#39;}</code></p>
<p><strong>req.params</strong>:<br>解析 url 中的占位符，如 <code>/:name</code>，访问 <code>/haha</code>，req.params 的值为 <code>{name: &#39;haha&#39;}</code></p>
<p><strong>req.body</strong>:<br>解析后请求体，需使用相关的模块，如 <code>body-parser</code>，请求体为 <code>{&quot;name&quot;: &quot;haha&quot;}</code>，则 req.body 为 <code>{name: &#39;haha&#39;}</code></p>
<h4 id="express-Router"><a href="#express-Router" class="headerlink" title="express.Router"></a>express.Router</h4><p><a href="http://expressjs.com/en/4x/api.html#router" target="_blank" rel="noopener">express.Router</a></p>
<p>创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js。最后代码如下：</p>
<p><strong>index.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>)</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, indexRouter)</span><br><span class="line">app.use(<span class="string">'/users'</span>, userRouter)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p><strong>routes/index.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, express'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p><strong>routes/users.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/:name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, '</span> + req.params.name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>以上代码的意思是：我们将 <code>/</code> 和 <code>/users/:name</code> 的路由分别放到了 routes/index.js 和 routes/users.js 中，<em>每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 <code>app.use</code> 挂载到不同的路径</em>。这两种代码实现了相同的功能，但在实际开发中推荐使用 express.Router 将不同的路由分离到不同的路由文件中。</p>
<h3 id="7-模板引擎ejs"><a href="#7-模板引擎ejs" class="headerlink" title="7. 模板引擎ejs"></a>7. 模板引擎ejs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs --save</span><br></pre></td></tr></table></figure>
<p><strong>index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>)</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>)</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>))<span class="comment">// 设置存放模板文件的目录</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>)<span class="comment">// 设置模板引擎为 ejs</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, indexRouter)</span><br><span class="line">app.use(<span class="string">'/users'</span>, userRouter)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>
<p>通过 <code>app.set</code> 设置模板引擎为 ejs 和存放模板的目录。<br>在 myblog 下新建 views 文件夹，在 views 下新建 <code>users.ejs</code>，添加如下代码：</p>
<p><strong>views/users.ejs</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      body &#123;padding: 50px;font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name.toUpperCase</span>() %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello, <span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>routes/users.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/:name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'users'</span>, &#123;</span><br><span class="line">    name: req.params.name</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>
<p>通过调用 <code>res.render</code> 函数渲染 ejs 模板。</p>
<p><code>res.render</code> 第一个参数是模板的名字，这里是 <code>users</code> 则会匹配 <code>views/users.ejs</code>，第二个参数是传给模板的数据，这里传入 <code>name</code>，则在 ejs 模板中可使用 <code>name</code>。</p>
<p><code>res.render</code> 的作用就是将模板和数据结合生成 html，同时设置响应头中的 <code>Content-Type: text/html</code>，告诉浏览器我返回的是 html，不是纯文本，要按 html 展示。</p>
<h4 id="ejs-3-种常用标签："><a href="#ejs-3-种常用标签：" class="headerlink" title="ejs 3 种常用标签："></a>ejs 3 种常用标签：</h4><blockquote>
<p><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出<br><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容<br><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</p>
</blockquote>
<p><code>&lt;%= code %&gt;</code> 和 <code>&lt;%- code %&gt;</code> 都可以是 JavaScript 表达式生成的字符串。</p>
<p>当变量 <code>code</code> 为普通字符串时，两者没有区别。<br>当 code 比如为 <code>&lt;h1&gt;hello&lt;/h1&gt;</code> 这种字符串时，<code>&lt;%= code %&gt;</code> 会原样输出 <code>&lt;h1&gt;hello&lt;/h1&gt;</code>，而 <code>&lt;%- code %&gt;</code> 则会显示 H1 大的 hello 字符串。</p>
<p><a href="https://www.npmjs.com/package/ejs#tags" target="_blank" rel="noopener">ejs#tags</a></p>
<h4 id="拆分模板组件"><a href="#拆分模板组件" class="headerlink" title="拆分模板组件"></a>拆分模板组件</h4><ul>
<li>模板可复用，减少重复代码</li>
<li>主模板结构清晰</li>
</ul>
<p><strong>views/header.ejs</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      body &#123;padding: 50px;font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>views/footer.ejs</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>views/users.ejs</strong></p>
<p>在 <code>users.ejs</code> 通过 ejs 内置的 <code>include</code> 方法引入<code>header.ejs</code> 和 <code>footer.ejs</code></p>
<p>(要用 <code>&lt;%- include(&#39;header&#39;) %&gt;</code> 而不是 <code>&lt;%= include(&#39;header&#39;) %&gt;</code>)</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>('<span class="attr">header</span>') %&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name.toUpperCase</span>() %&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>hello, <span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>('<span class="attr">footer</span>') %&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="8-中间件"><a href="#8-中间件" class="headerlink" title="8. 中间件"></a>8. 中间件</h3><p><a href="http://expressjs.com/en/4x/api.html#app.use" target="_blank" rel="noopener">app.use([path,] callback [, callback…])</a></p>
<p>express 中的<code>中间件（middleware）</code>就是用来处理请求的，当一个中间件处理完，可以通过调用 <code>next()</code> 传递给下一个中间件，如果没有调用 <code>next()</code>，则请求不会往下传递，如内置的 <code>res.render</code>其实就是渲染完 html 直接返回给客户端，没有调用 <code>next()</code>，从而没有传递给下一个中间件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">  res.status(<span class="number">200</span>).end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>app.use</code> 加载中间件，在中间件中通过 <code>next</code> 将请求传递到下一个中间件，<code>next</code> 可接受一个参数接收错误信息，如果使用了 <code>next(error)</code>，则会返回错误而不会传递到下一个中间件。</p>
<p>中间件的加载顺序很重要。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'haha'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">  res.status(<span class="number">200</span>).end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="built_in">Error</span>: haha</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/ea0122ad1ac0" target="_blank" rel="noopener">Express 中间件—-body-parser</a></p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p><a href="http://expressjs.com/en/guide/error-handling.html" target="_blank" rel="noopener">Error Handling</a></p>
<p>express 内置了一个默认的错误处理器，假如我们想手动控制返回的错误内容，则需要加载一个自定义错误处理的中间件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'haha'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">  res.status(<span class="number">200</span>).end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">Something broke!</span><br></pre></td></tr></table></figure>
<h3 id="9-配置文件config-lite"><a href="#9-配置文件config-lite" class="headerlink" title="9. 配置文件config-lite"></a>9. 配置文件config-lite</h3><p><a href="https://www.npmjs.com/package/config-lite" target="_blank" rel="noopener">config-lite</a></p>
<pre><code>A super simple &amp; flexible &amp; intuitive config module, support yaml &amp; toml.
</code></pre><p><code>config-lite</code> 是一个轻量的读取配置文件的模块。<code>config-lite</code> 会根据<code>环境变量（NODE_ENV）</code>的不同加载 config 目录下不同的配置文件。如果不设置<code>NODE_ENV</code>，则读取默认的 default 配置文件，如果设置了 <code>NODE_ENV</code>，则会合并指定的配置文件和 default 配置文件作为配置，<code>config-lite</code> 支持 <code>.js、.json、.node、.yml、.yaml</code>后缀的文件(依次降级查找并合并 default 配置)。</p>
<p>例子：如果程序以 NODE_ENV=production node app 启动，则 config-lite 会依次降级查找 config/production.js、config/production.json、config/production.node、config/production.yml、config/production.yaml 并合并 default 配置。</p>
<h3 id="10-会话"><a href="#10-会话" class="headerlink" title="10. 会话"></a>10. 会话</h3><p>由于 HTTP 协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户，这个机制就是<code>会话（Session）</code>。</p>
<h4 id="cookie-与-session-的区别"><a href="#cookie-与-session-的区别" class="headerlink" title="cookie 与 session 的区别"></a>cookie 与 session 的区别</h4><ul>
<li>cookie 存储在浏览器（有大小限制），session 存储在服务端（没有大小限制）</li>
<li>通常 session 的实现是基于 cookie 的，session id 存储于 cookie 中 session 更安全，cookie可以直接在浏览器查看甚至编辑</li>
</ul>
<p><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener">COOKIE和SESSION有什么区别？</a></p>
<ul>
<li>Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</li>
<li>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li>
</ul>
<h4 id="express-session-中间件"><a href="#express-session-中间件" class="headerlink" title="express-session 中间件"></a>express-session 中间件</h4><p>引入中间件，实现对会话的支持.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(options))</span><br></pre></td></tr></table></figure>
<p>session 中间件会在 req 上添加 session 对象，即 <code>req.session</code> 初始值为 <code>{}</code>，当我们登录后设置 <code>req.session.user = 用户信息</code>，返回浏览器的头信息中会带上 <code>set-cookie</code> 将 <code>session id</code> 写到浏览器 cookie 中，那么该用户下次请求时，通过带上来的 cookie 中的 <code>session id</code> 我们就可以查找到该用户，并将用户信息保存到 <code>req.session.user</code>。</p>
<h4 id="connect-flash中间件"><a href="#connect-flash中间件" class="headerlink" title="connect-flash中间件"></a>connect-flash中间件</h4><p>引入中间件，实现页面通知只显示一次，刷新后消失。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install connect-flash</span><br></pre></td></tr></table></figure>
<pre><code>The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. The flash is typically used in combination with redirects, ensuring that the message is available to the next page that is to be rendered.
</code></pre><p>它是基于 session 实现的，设置初始值 <code>req.session.flash={}</code>，通过 <code>req.flash(name, value)</code> 设置这个对象下的字段和值，通过 <code>req.flash(name)</code> 获取这个对象下的值，同时删除这个字段，实现了只显示一次刷新后消失的功能。</p>
<h4 id="express-session、connect-mongo-和-connect-flash-的区别与联系"><a href="#express-session、connect-mongo-和-connect-flash-的区别与联系" class="headerlink" title="express-session、connect-mongo 和 connect-flash 的区别与联系"></a>express-session、connect-mongo 和 connect-flash 的区别与联系</h4><blockquote>
<p><strong>express-session</strong>: 会话（session）支持中间件<br><strong>connect-mongo</strong>: 将 session 存储于 mongodb，需结合 express-session 使用，我们也可以将 session 存储于 redis，如 connect-redis<br><strong>connect-flash</strong>: 基于 session 实现的用于通知功能的中间件，需结合 express-session 使用</p>
</blockquote>
<h3 id="11-objectid-to-timestamp"><a href="#11-objectid-to-timestamp" class="headerlink" title="11. objectid-to-timestamp"></a>11. objectid-to-timestamp</h3><p>addCreatedAt 自定义插件（通过 _id 生成时间戳）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lib/mongo.js</span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</span><br><span class="line"><span class="keyword">const</span> objectIdToTimestamp = <span class="built_in">require</span>(<span class="string">'objectid-to-timestamp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 id 生成创建时间 created_at</span></span><br><span class="line">mongolass.plugin(<span class="string">'addCreatedAt'</span>, &#123;</span><br><span class="line">  afterFind: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    results.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      item.created_at = moment(objectIdToTimestamp(item._id)).format(<span class="string">'YYYY-MM-DD HH:mm'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">  &#125;,</span><br><span class="line">  afterFindOne: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      result.created_at = moment(objectIdToTimestamp(result._id)).format(<span class="string">'YYYY-MM-DD HH:mm'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>24 位长的 ObjectId 前 4 个字节是精确到秒的时间戳，所以我们没有额外的存创建时间（如: createdAt）的字段。</p>
<p>ObjectId 生成规则</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fujpninp8lj209g019dg4.jpg" alt="ObjectId 生成规则" title="" class="">
                <p>ObjectId 生成规则</p>
            </figure>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JWT规范]]></title>
      <url>/2018/07/27/JWT%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>文章参考</p>
<p><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">Introduction to JSON Web Tokens</a></p>
<p><a href="https://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">JSON Web Token - 在Web应用间安全地传递信息</a></p>
<h3 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h3><p>使用JWT规范在用户和服务器之间传递安全可靠的信息。<br>适合用于向Web应用传递一些<strong>非敏感</strong>信息。</p>
<a id="more"></a>
<p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noopener">JSON Web Token</a></p>
<blockquote>
<p>JSON Web Token (JWT, sometimes pronounced /dʒɒt/) is a JSON-based open standard (RFC 7519) for creating access tokens that assert some number of claims.</p>
</blockquote>
<blockquote>
<p>For example, a server could generate a token that has the claim “logged in as admin” and provide that to a client. The client could then use that token to prove that it is logged in as admin.</p>
</blockquote>
<blockquote>
<p>The tokens are signed by the server’s key, so the client and server are both able to verify that the token is legitimate. The tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context. JWT claims can be typically used to pass identity of authenticated users between an identity provider and a service provider, or any other type of claims as required by business processes. The tokens can also be authenticated and encrypted.</p>
</blockquote>
<h3 id="JSON-Web-Token-structure"><a href="#JSON-Web-Token-structure" class="headerlink" title="JSON Web Token structure"></a>JSON Web Token structure</h3><h4 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h4><p>描述类型以及签名所用的算法</p>
<p>the type of the token, which is JWT, and the hashing algorithm being used, such as HMAC SHA256 or RSA.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行Base64编码，之后的字符串就成了JWT的Header</p>
<pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
</code></pre><h4 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h4><p>Claims are statements about an entity (typically, the user) and additional metadata. There are three types of claims: registered, public, and private claims.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"iss"</span>: <span class="string">"John Wu JWT"</span>,</span><br><span class="line">    <span class="attr">"iat"</span>: <span class="number">1441593502</span>,</span><br><span class="line">    <span class="attr">"exp"</span>: <span class="number">1441594722</span>,</span><br><span class="line">    <span class="attr">"aud"</span>: <span class="string">"www.example.com"</span>,</span><br><span class="line">    <span class="attr">"sub"</span>: <span class="string">"jrocket@example.com"</span>,</span><br><span class="line">    <span class="attr">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line">    <span class="attr">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>iss: 该JWT的签发者
sub: 该JWT所面向的用户
aud: 接收该JWT的一方
exp(expires): 什么时候过期，这里是一个Unix时间戳
iat(issued at): 在什么时候签发的
</code></pre><p>将上面的JSON对象进行[base64编码]可以得到下面的字符串。这个字符串我们将它称作JWT的Payload（载荷）。</p>
<pre><code>eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base64url = <span class="built_in">require</span>(<span class="string">'base64url'</span>)</span><br><span class="line"><span class="keyword">var</span> header = &#123;</span><br><span class="line">    <span class="string">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line">    <span class="string">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(base64url(<span class="built_in">JSON</span>.stringify(header)))</span><br><span class="line"><span class="comment">// 输出：eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</span></span><br></pre></td></tr></table></figure>
<h4 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a>签名（Signature）</h4><p>To create the signature part you have to take the <code>encoded header</code>, the <code>encoded payload</code>, a <code>secret</code>(密钥), the <code>algorithm specified in the header</code>, and sign that.</p>
<p>使用HMAC SHA256 算法创建signature</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>
<p>将上面的两个编码后的字符串都用句号.连接在一起（头部在前），就形成了</p>
<pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9
</code></pre><p>如果我们用mystar作为密钥的话，那么就可以得到我们加密后的内容</p>
<pre><code>rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM
</code></pre><p>最后将这一部分签名也拼接在被签名的字符串后面，我们就得到了完整的JWT,然后更改URL等（?jwt=字符串）</p>
<p><strong>Do not put secret information in the payload or header elements of a JWT unless it is encrypted.</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[word & git版本控制]]></title>
      <url>/2018/07/13/word%20&amp;%20git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>为了毕设学习一下:-D</p>
<p>原文<a href="https://github.com/vigente/gerardus/wiki/Integrate-git-diffs-with-word-docx-files" target="_blank" rel="noopener">Integrate git diffs with word docx files</a><br>以下基本为简要翻译</p>
<h3 id="1-安装Pandoc"><a href="#1-安装Pandoc" class="headerlink" title="1. 安装Pandoc"></a>1. 安装Pandoc</h3><pre><code>a universal document converter
</code></pre><p><a href="http://pandoc.org/installing.html" target="_blank" rel="noopener">安装地址</a></p>
<p><a href="http://pandoc.org/MANUAL.html" target="_blank" rel="noopener">Pandoc User’s Guide</a></p>
<a id="more"></a>
<h3 id="2-编辑gitconfig文件"><a href="#2-编辑gitconfig文件" class="headerlink" title="2. 编辑gitconfig文件"></a>2. 编辑gitconfig文件</h3><p>创建或编辑 <code>file ~/.gitconfig (linux, Mac)</code> 或<code>&quot;c:\Documents and Settings\user.gitconfig&quot; (Windows)</code> 文件，添加如下代码</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[diff <span class="string">"pandoc"</span>]</span><br><span class="line">   textconv=pandoc --<span class="keyword">to</span>=markdown</span><br><span class="line">   prompt = false</span><br><span class="line"> [alias]</span><br><span class="line">   wdiff = diff --word-diff=color --unified=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="3-编辑gitattributes文件"><a href="#3-编辑gitattributes文件" class="headerlink" title="3. 编辑gitattributes文件"></a>3. 编辑gitattributes文件</h3><p>在word文件目录创建或编辑<code>.gitattributes (linux, Windows and Mac)</code> 文件，添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.docx diff=pandoc</span><br></pre></td></tr></table></figure>
<h3 id="4-commit后命令查看word修改"><a href="#4-commit后命令查看word修改" class="headerlink" title="4. commit后命令查看word修改"></a>4. commit后命令查看word修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git wdiff file.docx</span><br></pre></td></tr></table></figure>
<p>查看所有修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p --word-diff=color file.docx</span><br></pre></td></tr></table></figure>
<h3 id="5-自动在commit后获得diff"><a href="#5-自动在commit后获得diff" class="headerlink" title="5. 自动在commit后获得diff"></a>5. 自动在commit后获得diff</h3><p>设置 git hooks</p>
<p>复制hook文件到git目录 <code>.git/hooks directory</code>,再重命名以下文件<br>or soft-link to them with ln -s, and make them executable (chmod u+x *.sh):</p>
<p><code>pre-commit-git-diff-docx.sh</code> -&gt; <code>.git/hooks/pre-commit</code><br><code>post-commit-git-diff-docx.sh</code> -&gt; <code>.git/hooks/post-commit</code></p>
<p>会自动生成markdown文件并显示修改</p>
<h3 id="6-手工创建md文件备份"><a href="#6-手工创建md文件备份" class="headerlink" title="6. 手工创建md文件备份"></a>6. 手工创建md文件备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pandoc -s file.docx -t markdown -o file.md</span><br><span class="line"></span><br><span class="line">git add file.docx file.md</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[excel转markdown]]></title>
      <url>/2018/07/02/excel%E8%BD%ACmarkdown/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/fanfeilong/exceltk" target="_blank" rel="noopener">exceltk</a></p>
<p><a href="https://www.cnblogs.com/math/p/exceltk.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.cnblogs.com/math/p/exceltk.html?utm_source=itdadao&amp;utm_medium=referral</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exceltk -t md -xls table123.xls</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA GO YAML JSON]]></title>
      <url>/2018/06/23/JAVA%20GO%20YAML%20JSON/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><h2 id="用Java的snakeYaml解析YAML"><a href="#用Java的snakeYaml解析YAML" class="headerlink" title="用Java的snakeYaml解析YAML"></a>用Java的snakeYaml解析YAML</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testload</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//初始化Yaml解析器</span></span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"/Users/wangzulong/mycode/yamtest/src/main/resources/testload.yaml"</span>);</span><br><span class="line">        <span class="comment">//读入文件</span></span><br><span class="line">        Object result= yaml.load(<span class="keyword">new</span> FileInputStream(f));</span><br><span class="line">        System.out.println(result.getClass());</span><br><span class="line">        System.out.println( result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/Users/wangzulong/mycode/yamtest/src/main/resources/testload.yaml"</span>));</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map = (Map&lt;String, Object&gt;) yaml.load(is);</span><br><span class="line">            is.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadObjects</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"src/test/resources/example.yaml"</span>));</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Object obj : yaml.loadAll(is)) &#123;</span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        String json= JSON.toJSONString(list, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(<span class="string">"src/test/resources/topology.json"</span>);</span><br><span class="line">        BufferedWriter output = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">        output.write(json);</span><br><span class="line">        output.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>参考</p>
<p><a href="https://blog.csdn.net/LUNG108/article/details/73240640" target="_blank" rel="noopener">把json格式数据写入到本地文件</a></p>
<h2 id="Go-Unmarshal处理json数据"><a href="#Go-Unmarshal处理json数据" class="headerlink" title="Go Unmarshal处理json数据"></a>Go Unmarshal处理json数据</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"encoding/json"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"io/ioutil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name   <span class="keyword">string</span></span><br><span class="line">		Age    <span class="keyword">int</span></span><br><span class="line">		Gender <span class="keyword">bool</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// unmarshal to slice-struct</span></span><br><span class="line">	<span class="keyword">var</span> ps []Person</span><br><span class="line">	fn := <span class="string">"/Users/wangzulong/mycode/go/learn/xxx.json"</span></span><br><span class="line">	bJson, err := ioutil.ReadFile(fn)</span><br><span class="line">	<span class="comment">// var aJson = `[&#123;"Name":"junbin", "Age":21, "Gender":true&#125;,</span></span><br><span class="line">	<span class="comment">// 			&#123;"Name":"junbin", "Age":21, "Gender":true&#125;]`</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"ReadFile: "</span>, err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	json.Unmarshal([]<span class="keyword">byte</span>(bJson), &amp;ps)</span><br><span class="line">	<span class="comment">//result --&gt; [&#123;junbin 21 true&#125; &#123;junbin 21 true&#125;] len is 2</span></span><br><span class="line">	fmt.Println(ps, <span class="string">"len is"</span>, <span class="built_in">len</span>(ps))</span><br><span class="line">	fmt.Println(ps[<span class="number">0</span>].Name, <span class="string">":"</span>, ps[<span class="number">0</span>].Age, <span class="string">":"</span>, ps[<span class="number">0</span>].Gender)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="GO-解析-JSON"><a href="#GO-解析-JSON" class="headerlink" title="GO 解析 JSON"></a><a href="http://golang.org/pkg/encoding/json/" target="_blank" rel="noopener">GO 解析 JSON</a></h1><p><a href="https://studygolang.com/articles/1698" target="_blank" rel="noopener">Go_Json_Unmarshal_Marshal</a><br><a href="http://rgyq.blog.163.com/blog/static/316125382013934153244/" target="_blank" rel="noopener">JSON与Go</a>  </p>
<h2 id="func-Marshal"><a href="#func-Marshal" class="headerlink" title="func Marshal"></a><a href="https://golang.org/pkg/encoding/json/#Marshal" target="_blank" rel="noopener">func Marshal</a></h2><pre><code>func Marshal(v interface{}) ([]byte, error)
</code></pre><p><em>Marshal returns the JSON encoding of v<br>Marshal 用于将struct对象序列化到JSON对象中</em></p>
<p>给定Go的数据结构:Message<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Body <span class="keyword">string</span></span><br><span class="line">    Time <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以及Message的一个实例<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := Message&#123;<span class="string">"Alice"</span>, <span class="string">"Hello"</span>, <span class="number">1294706395881547000</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过<code>json.Marshal</code>就可以得到一个JSON格式的m：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b, err := json.Marshal(m)</span><br></pre></td></tr></table></figure></p>
<p>如果一切顺利，err将会是nil，b将会是一个包含JSON数据的 <code>[]byte</code>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b == []<span class="keyword">byte</span>(<span class="string">`&#123;"Name":"Alice","Body":"Hello","Time":1294706395881547000&#125;`</span>)</span><br></pre></td></tr></table></figure>
<p>只有能够被表示成合法的JSON的数据才会被编码。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"encoding/json"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//tag中的第一个参数是用来指定别名</span></span><br><span class="line"><span class="comment">//比如Name 指定别名为 username `json:"username"`</span></span><br><span class="line"><span class="comment">//如果不想指定别名但是想指定其他参数,用逗号来分隔</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//omitempty 指定到一个field时</span></span><br><span class="line"><span class="comment">//如果在赋值时没有对该属性赋值,或者对该属性赋值为 zero value</span></span><br><span class="line"><span class="comment">//那么将Person序列化成json时会忽略该字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//- 指定到一个field时</span></span><br><span class="line"><span class="comment">//无论有没有值将Person序列化成json时都会忽略该字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string 指定到一个field时</span></span><br><span class="line"><span class="comment">//比如Person中的Count为int类型 如果没有任何指定在序列化</span></span><br><span class="line"><span class="comment">//到json之后也是int 比如这个样子 "Count":0</span></span><br><span class="line"><span class="comment">//但是如果指定了string之后序列化之后也是string类型的</span></span><br><span class="line"><span class="comment">//那么就是这个样子"Count":"0"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name        <span class="keyword">string</span> <span class="string">`json:"username"`</span></span><br><span class="line">	Age         <span class="keyword">int</span></span><br><span class="line">	Gender      <span class="keyword">bool</span> <span class="string">`json:",omitempty"`</span></span><br><span class="line">	Profile     <span class="keyword">string</span></span><br><span class="line">	OmitContent <span class="keyword">string</span> <span class="string">`json:"-"`</span></span><br><span class="line">	Count       <span class="keyword">int</span>    <span class="string">`json:",string"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p *Person = &amp;Person&#123;</span><br><span class="line">		Name:        <span class="string">"brainwu"</span>,</span><br><span class="line">		Age:         <span class="number">21</span>,</span><br><span class="line">		Gender:      <span class="literal">true</span>,</span><br><span class="line">		Profile:     <span class="string">"I am Wujunbin"</span>,</span><br><span class="line">		OmitContent: <span class="string">"OmitConent"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> bs, err := json.Marshal(&amp;p); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//result --&gt; &#123;"username":"brainwu","Age":21,"Gender":true,"Profile":"I am Wujunbin","Count":"0"&#125;</span></span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(bs))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> p2 *Person = &amp;Person&#123;</span><br><span class="line">		Name:        <span class="string">"brainwu"</span>,</span><br><span class="line">		Age:         <span class="number">21</span>,</span><br><span class="line">		Profile:     <span class="string">"I am Wujunbin"</span>,</span><br><span class="line">		OmitContent: <span class="string">"OmitConent"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> bs, err := json.Marshal(&amp;p2); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//result --&gt; &#123;"username":"brainwu","Age":21,"Profile":"I am Wujunbin","Count":"0"&#125;</span></span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(bs))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// slice 序列化为json</span></span><br><span class="line">	<span class="keyword">var</span> aStr []<span class="keyword">string</span> = []<span class="keyword">string</span>&#123;<span class="string">"Go"</span>, <span class="string">"Java"</span>, <span class="string">"Python"</span>, <span class="string">"Android"</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> bs, err := json.Marshal(aStr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//result --&gt; ["Go","Java","Python","Android"]</span></span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(bs))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//map 序列化为json</span></span><br><span class="line">	<span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">	m[<span class="string">"Go"</span>] = <span class="string">"No.1"</span></span><br><span class="line">	m[<span class="string">"Java"</span>] = <span class="string">"No.2"</span></span><br><span class="line">	m[<span class="string">"C"</span>] = <span class="string">"No.3"</span></span><br><span class="line">	<span class="keyword">if</span> bs, err := json.Marshal(m); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//result --&gt; &#123;"C":"No.3","Go":"No.1","Java":"No.2"&#125;</span></span><br><span class="line">		fmt.Println(<span class="keyword">string</span>(bs))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="func-Unmarshal"><a href="#func-Unmarshal" class="headerlink" title="func Unmarshal"></a><a href="https://golang.org/pkg/encoding/json/#Unmarshal" target="_blank" rel="noopener">func Unmarshal</a></h2><pre><code>func Unmarshal(data []byte, v interface{}) error
</code></pre><p><em>Unmarshal parses the JSON-encoded data and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.<br>Unmarshal用于反序列化json的函数，根据data将数据反序列化到传入的对象中</em></p>
<p>首先，声明一个变量用于存放解码后的数据<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m Message</span><br></pre></td></tr></table></figure></p>
<p>然后调用json.Unmarshal，传递参数JSON数据的[]byte以及指向m的指针<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := json.Unmarshal(b, &amp;m)</span><br></pre></td></tr></table></figure></p>
<p>如果b中包含匹配m的合法的JSON，那么函数调用之后，err值为nil，b中的数据会存到结构体m中，就像下面这样的赋值：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m = Message&#123;</span><br><span class="line">    Name: <span class="string">"Alice"</span>,</span><br><span class="line">    Body: <span class="string">"Hello"</span>,</span><br><span class="line">    Time: <span class="number">1294706395881547000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>对于一个给定的 JSON key “Foo”，Unmarshal会查询结构体的域来寻找（in order of preference）：</strong></p>
<ol>
<li><p>一个带有标签”Foo” 的可导出域（更多关于结构体标签见Go spec）</p>
</li>
<li><p>一个名为”Foo” 的可导出域</p>
</li>
<li><p>或者一个名为”FOO” 或者 “FoO 或者其他大小写的匹配”Foo”的可导出域</p>
</li>
</ol>
<p><strong>当 JSON 数据结构跟 Go 类型不一致时：</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b := []<span class="keyword">byte</span>(<span class="string">`&#123;"Name":"Bob","Food":"Pickle"&#125;`</span>)</span><br><span class="line"><span class="keyword">var</span> m Message</span><br><span class="line">err := json.Unmarshal(b, &amp;m)</span><br></pre></td></tr></table></figure></p>
<p>Unmarshal只会解码在目标类型中出现的域。<br>在上面的例子中，m只有Name域会被填充，Food域将被忽略。这种行为在你想从一个大的JSON blob中选择几个指定的域时会特别有用。这也意味着Unmarshal不会影响目标结构体中的不可导出域。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"encoding/json"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">		Name   <span class="keyword">string</span></span><br><span class="line">		Age    <span class="keyword">int</span></span><br><span class="line">		Gender <span class="keyword">bool</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//unmarshal to struct</span></span><br><span class="line">	<span class="keyword">var</span> p Person</span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">`&#123;"Name":"junbin", "Age":21, "Gender":true&#125;`</span></span><br><span class="line">	json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;p)</span><br><span class="line">	<span class="comment">//result --&gt; junbin : 21 : true</span></span><br><span class="line">	fmt.Println(p.Name, <span class="string">":"</span>, p.Age, <span class="string">":"</span>, p.Gender)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// unmarshal to slice-struct</span></span><br><span class="line">	<span class="keyword">var</span> ps []Person</span><br><span class="line">	<span class="keyword">var</span> aJson = <span class="string">`[&#123;"Name":"junbin", "Age":21, "Gender":true&#125;,</span></span><br><span class="line"><span class="string">				&#123;"Name":"junbin", "Age":21, "Gender":true&#125;]`</span></span><br><span class="line">	json.Unmarshal([]<span class="keyword">byte</span>(aJson), &amp;ps)</span><br><span class="line">	<span class="comment">//result --&gt; [&#123;junbin 21 true&#125; &#123;junbin 21 true&#125;] len is 2</span></span><br><span class="line">	fmt.Println(ps, <span class="string">"len is"</span>, <span class="built_in">len</span>(ps))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// unmarshal to map[string]interface&#123;&#125;</span></span><br><span class="line">	<span class="keyword">var</span> obj <span class="keyword">interface</span>&#123;&#125; <span class="comment">// var obj map[string]interface&#123;&#125;</span></span><br><span class="line">	json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;obj)</span><br><span class="line">	m := obj.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	<span class="comment">//result --&gt; junbin : 21 : true</span></span><br><span class="line">	fmt.Println(m[<span class="string">"Name"</span>], <span class="string">":"</span>, m[<span class="string">"Age"</span>], <span class="string">":"</span>, m[<span class="string">"Gender"</span>])</span><br><span class="line"></span><br><span class="line">	<span class="comment">//unmarshal to slice</span></span><br><span class="line">	<span class="keyword">var</span> strs <span class="keyword">string</span> = <span class="string">`["Go", "Java", "C", "Php"]`</span></span><br><span class="line">	<span class="keyword">var</span> aStr []<span class="keyword">string</span></span><br><span class="line">	json.Unmarshal([]<span class="keyword">byte</span>(strs), &amp;aStr)</span><br><span class="line">	<span class="comment">//result --&gt; [Go Java C Php]  len is 4</span></span><br><span class="line">	fmt.Println(aStr, <span class="string">" len is"</span>, <span class="built_in">len</span>(aStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/34225656/unmarshal-json-into-struct-cannot-unmarshal-array-into-go-value" target="_blank" rel="noopener">Unmarshal json into struct: cannot unmarshal array into Go value</a><br>用结构体也可以解决</p>
<h2 id="interface-空接口"><a href="#interface-空接口" class="headerlink" title="interface{} 空接口"></a>interface{} 空接口</h2><p><em>interface{}类型（空接口）表示一个没有方法的接口。每一个Go类型至少实现了0个方法，因此都符合空接口。</em></p>
<p>空接口可以作为一个通用的容器类型：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">i = <span class="string">"a string"</span></span><br><span class="line">i = <span class="number">2011</span></span><br><span class="line">i = <span class="number">2.777</span></span><br></pre></td></tr></table></figure></p>
<p>类型断言可以访问底层的具体类型：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r := i.(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Println(<span class="string">"the circle's area"</span>, math.Pi*r*r)</span><br></pre></td></tr></table></figure></p>
<p>或者，如果底层的类型是未知的，通过类型switch来确定类型：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">    fmt.Println(<span class="string">"twice i is"</span>, v*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">    fmt.Println(<span class="string">"the reciprocal of i is"</span>, <span class="number">1</span>/v)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">    h := <span class="built_in">len</span>(v) / <span class="number">2</span></span><br><span class="line">    fmt.Println(<span class="string">"i swapped by halves is"</span>, v[h:]+v[:h])</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// i isn't one of the types above</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>json 包使用 map[string]interface{} 和 []interface{} 来存储任意 JSON objects 以及 arrays；它很乐意将任意合法的 JSON blob unmarshal 到普通的 interface{} 中。默认的具体 Go 类型是：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> JSON booleans</span><br><span class="line"><span class="keyword">float64</span> JSON numbers</span><br><span class="line"><span class="keyword">string</span> JSON strings</span><br><span class="line"><span class="literal">nil</span> JSON null</span><br></pre></td></tr></table></figure></p>
<h2 id="解码任意数据"><a href="#解码任意数据" class="headerlink" title="解码任意数据"></a>解码任意数据</h2><p>考虑这样一个存放在变量b中的JSON数据：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b := []<span class="keyword">byte</span>(<span class="string">`&#123;"Name":"Wednesday","Age":6,"Parents":["Gomez","Morticia"]&#125;`</span>)</span><br></pre></td></tr></table></figure></p>
<p>当不知道数据结构时，我们可以将它Unmarshal到interface{} ：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">err := json.Unmarshal(b, &amp;f)</span><br></pre></td></tr></table></figure></p>
<p>现在f中的值就是一个map，key为字符串，值就是以空接口存储的自身：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"Name"</span>: <span class="string">"Wednesday"</span>,</span><br><span class="line">    <span class="string">"Age"</span>:  <span class="number">6</span>,</span><br><span class="line">    <span class="string">"Parents"</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">"Gomez"</span>,</span><br><span class="line">        <span class="string">"Morticia"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要访问这样的数据，我们通过类型断言来访问f底层的map[string]interface{}：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := f.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>通过 range 语句来迭代map，并通过类型选择来访问具体类型的值：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    <span class="keyword">switch</span> vv := v.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        fmt.Println(k, <span class="string">"is string"</span>, vv)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        fmt.Println(k, <span class="string">"is int"</span>, vv)</span><br><span class="line">    <span class="keyword">case</span> []<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">        fmt.Println(k, <span class="string">"is an array:"</span>)</span><br><span class="line">        <span class="keyword">for</span> i, u := <span class="keyword">range</span> vv &#123;</span><br><span class="line">            fmt.Println(i, u)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(k, <span class="string">"is of a type I don't know how to handle"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过这种方式我们可以访问未知的 JSON 数据，同时还获得了类型安全的好处。</p>
<h2 id="解析RawMessage"><a href="#解析RawMessage" class="headerlink" title="解析RawMessage"></a><a href="http://www.baiyuxiong.com/?p=923" target="_blank" rel="noopener">解析RawMessage</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> Color <span class="keyword">struct</span> &#123;</span><br><span class="line">        Space <span class="keyword">string</span></span><br><span class="line">        Point json.RawMessage <span class="comment">// delay parsing until we know the color space</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">type</span> RGB <span class="keyword">struct</span> &#123;</span><br><span class="line">        R <span class="keyword">uint8</span></span><br><span class="line">        G <span class="keyword">uint8</span></span><br><span class="line">        B <span class="keyword">uint8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">type</span> YCbCr <span class="keyword">struct</span> &#123;</span><br><span class="line">        Y  <span class="keyword">uint8</span></span><br><span class="line">        Cb <span class="keyword">int8</span></span><br><span class="line">        Cr <span class="keyword">int8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> j = []<span class="keyword">byte</span>(<span class="string">`[</span></span><br><span class="line"><span class="string">        &#123;"Space": "YCbCr", "Point": &#123;"Y": 255, "Cb": 0, "Cr": -10&#125;&#125;,</span></span><br><span class="line"><span class="string">        &#123;"Space": "RGB",   "Point": &#123;"R": 98, "G": 218, "B": 255&#125;&#125;</span></span><br><span class="line"><span class="string">    ]`</span>)</span><br><span class="line">    <span class="keyword">var</span> colors []Color</span><br><span class="line">    err := json.Unmarshal(j, &amp;colors)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">"error:"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> colors &#123;</span><br><span class="line">        <span class="keyword">var</span> dst <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">switch</span> c.Space &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"RGB"</span>:</span><br><span class="line">            dst = <span class="built_in">new</span>(RGB)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"YCbCr"</span>:</span><br><span class="line">            dst = <span class="built_in">new</span>(YCbCr)</span><br><span class="line">        &#125;</span><br><span class="line">        err := json.Unmarshal(c.Point, dst)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatalln(<span class="string">"error:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(c.Space, dst)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="流式编解码"><a href="#流式编解码" class="headerlink" title="流式编解码"></a>流式编解码</h2><p>json 包提供了<code>Decoder</code> 和 <code>Encoder</code> 用来支持JSON 数据流的读写。函数<code>NewDecoder</code> 和 <code>NewEncoder</code> 封装了<code>io.Reader</code>和<code>io.Writer</code> 接口类型。</p>
<pre><code>func NewDecoder(r io.Reader) *Decoder
func NewEncoder(w io.Writer) *Encoder
</code></pre><p>下面是一个从标准输入读入连续的JSON object的实例程序，每个结构体只留下Name域，然后把objects写到标准输出：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dec := json.NewDecoder(os.Stdin)</span><br><span class="line">    enc := json.NewEncoder(os.Stdout)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> v <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> err := dec.Decode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> k := <span class="keyword">range</span> v &#123;</span><br><span class="line">            <span class="keyword">if</span> k != <span class="string">"Name"</span> &#123;</span><br><span class="line">                <span class="built_in">delete</span>(v, k)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := enc.Encode(&amp;v); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> desc <span class="keyword">struct</span> &#123;</span><br><span class="line">    Lang <span class="keyword">string</span> <span class="string">`json:"lang"`</span></span><br><span class="line">    Content <span class="keyword">string</span> <span class="string">`json:"content"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> DescSlice <span class="keyword">struct</span> &#123;</span><br><span class="line">    Desc []desc <span class="string">`json:"body"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app1 := <span class="string">`&#123;"lang":"ch", "content":"1233456"&#125;`</span></span><br><span class="line">    <span class="keyword">var</span>  info1 desc</span><br><span class="line">    err := json.Unmarshal([]<span class="keyword">byte</span>(app1), &amp;info1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"error is %v\n"</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%v\n"</span>, info1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    app2 := <span class="string">`[&#123;"lang":"ch01","content":"1233456"&#125;,&#123;"lang":"ch02","content":"1233456"&#125;]`</span></span><br><span class="line">    <span class="keyword">var</span> info2 []desc</span><br><span class="line">    err = json.Unmarshal([]<span class="keyword">byte</span>(app2), &amp;info2)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"error is %v\n"</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%v\n"</span>, info2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app3 := <span class="string">`&#123;"body":[&#123;"lang":"ch01","content":"1233456"&#125;,&#123;"lang":"ch02","content":"1233456"&#125;]&#125;`</span></span><br><span class="line">    info3 := DescSlice&#123;&#125;</span><br><span class="line">    err = json.Unmarshal([]<span class="keyword">byte</span>(app3), &amp;info3)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error is %v\n"</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%v\n"</span>, info3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="io-ioutil-包中的函数和方法"><a href="#io-ioutil-包中的函数和方法" class="headerlink" title="io/ioutil 包中的函数和方法"></a><a href="https://studygolang.com/articles/3657" target="_blank" rel="noopener">io/ioutil 包中的函数和方法</a></h2><p><strong>ReadAll 读取 r 中的所有数据</strong></p>
<pre><code>func ReadAll(r io.Reader) ([]byte, error)
</code></pre><p><em>返回读取的数据和读取过程中遇到的任何错误<br>如果读取成功，则 err 返回 nil，而不是 EOF</em></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := strings.NewReader(<span class="string">"Hello World!"</span>)</span><br><span class="line">    ra, _ := ioutil.ReadAll(s)</span><br><span class="line">    fmt.Printf(<span class="string">"%s"</span>, ra)</span><br><span class="line">    <span class="comment">// Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ReadFile 读取文件中的所有数据</strong></p>
<pre><code>func ReadFile(filename string) ([]byte, error)
</code></pre><p><em>返回读取的数据和读取过程中遇到的任何错误<br>如果读取成功，则 err 返回 nil，而不是 EOF</em></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ra, _ := ioutil.ReadFile(<span class="string">"filepath"</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%s"</span>, ra)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WriteFile 向文件 filename 中写入数据 data</strong></p>
<pre><code>func WriteFile(filename string, data []byte, perm os.FileMode) error
</code></pre><p><em>如果文件不存在，则以 perm 权限创建该文件<br>如果文件存在，则先清空文件，然后再写入<br>返回写入过程中遇到的任何错误</em></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fn := <span class="string">"C:\\Test.txt"</span></span><br><span class="line">	s := []<span class="keyword">byte</span>(<span class="string">"Hello World!"</span>)</span><br><span class="line">	ioutil.WriteFile(fn, s, os.ModeAppend)</span><br><span class="line">	rf, _ := ioutil.ReadFile(fn)</span><br><span class="line">	fmt.Printf(<span class="string">"%s"</span>, rf)</span><br><span class="line">	<span class="comment">// Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>ReadDir 读取目录 dirmane 中的所有目录和文件（不包括子目录）</strong></p>
<pre><code>func ReadDir(dirname string) ([]os.FileInfo, error)
</code></pre><p><em>返回读取到的文件的信息列表和读取过程中遇到的任何错误<br>返回的文件列表是经过排序的</em></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	rd, err := ioutil.ReadDir(<span class="string">"C:\\Windows"</span>)</span><br><span class="line">	<span class="keyword">for</span> _, fi := <span class="keyword">range</span> rd &#123;</span><br><span class="line">		fmt.Println(<span class="string">""</span>)</span><br><span class="line">		fmt.Println(fi.Name())</span><br><span class="line">		fmt.Println(fi.IsDir())</span><br><span class="line">		fmt.Println(fi.Size())</span><br><span class="line">		fmt.Println(fi.ModTime())</span><br><span class="line">		fmt.Println(fi.Mode())</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">""</span>)</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Discard 是一个 io.Writer</strong>，对它进行的任何 Write 调用都将无条件成功。<br>devNull优化的实现了ReadFrom，因此io.Copy到ioutil.Discard避免了不必要的工作，但是ioutil.Discard不记录copy得到的数值</p>
<pre><code>var Discard io.Writer = devNull(0)
</code></pre><p><strong>ReadCloser 接口组合了基本的 Read 和 Close 方法。</strong>NopCloser 将提供的 Reader r 用空操作 Close 方法包装后作为 ReadCloser 返回。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := strings.NewReader(<span class="string">"hello world!"</span>)</span><br><span class="line">	r := ioutil.NopCloser(s)</span><br><span class="line">	r.Close()</span><br><span class="line">	p := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line">	r.Read(p)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(p)) <span class="comment">//hello worl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>TempFile 在目录 dir 中创建一个临时文件并将其打开</strong></p>
<pre><code>func TempFile(dir, prefix string) (f *os.File, err error)
</code></pre><p><em>返回创建的文件的对象和创建过程中遇到的任何错误<br>如果 dir 为空，则在系统的临时目录中创建临时文件<br>如果环境变量中没有设置系统临时目录，则在 /tmp 中创建临时文件<br>调用者可以通过 f.Name() 方法获取临时文件的完整路径<br>调用 TempFile 所创建的临时文件，应该由调用者自己移除</em></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dn := <span class="string">"C:\\"</span></span><br><span class="line">	f, _ := ioutil.TempFile(dn, <span class="string">"Test"</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%s"</span>, f.Name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>TempDir</strong> 功能同 TempFile，只不过创建的是目录, 返回值也只返目录的完整路径</p>
<pre><code>func TempDir(dir, prefix string) (name string, err error)
</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dn := <span class="string">"C:\\"</span></span><br><span class="line">	f, _ := ioutil.TempDir(dn, <span class="string">"Test"</span>)</span><br><span class="line">	fmt.Printf(<span class="string">"%s"</span>, f.Name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="json-iterator"><a href="#json-iterator" class="headerlink" title="json iterator"></a><a href="http://jsoniter.com/index.cn.html" target="_blank" rel="noopener">json iterator</a></h2><p><a href="https://github.com/json-iterator/go" target="_blank" rel="noopener">https://github.com/json-iterator/go</a></p>
<p><a href="http://jsoniter.com/migrate-from-go-std.html" target="_blank" rel="noopener">http://jsoniter.com/migrate-from-go-std.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FreeMarker模板生成工具]]></title>
      <url>/2018/06/07/FreeMarker%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><blockquote>
<p>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
</blockquote>
<p><strong>模板 + 数据模型 = 输出</strong><br><figure class="image-box">
                <img src="http://freemarker.foofun.cn/figures/overview.png" alt="MVC (模型 视图 控制器) 模式" title="" class="">
                <p>MVC (模型 视图 控制器) 模式</p>
            </figure></p>
<p><a href="http://freemarker.foofun.cn/index.html" target="_blank" rel="noopener">官网</a></p>
<p><a href="http://try.freemarker.org/" target="_blank" rel="noopener">http://try.freemarker.org/</a></p>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p><a href="http://freemarker.foofun.cn/pgui_quickstart_createconfiguration.html" target="_blank" rel="noopener">程序开发指南</a></p>
<p>参考以下文章，侵删致歉：</p>
<p><a href="https://segmentfault.com/a/1190000011768799" target="_blank" rel="noopener">FreeMarker 快速入门</a></p>
<a id="more"></a>
<h4 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1. 导入jar包"></a>1. 导入jar包</h4><p><a href="http://freemarker.foofun.cn/app_install.html" target="_blank" rel="noopener">Installing FreeMarker</a></p>
<p>建立Maven项目，在<code>pom.xml</code>文件中添加依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-创建运行模板引擎的Java文件"><a href="#2-创建运行模板引擎的Java文件" class="headerlink" title="2. 创建运行模板引擎的Java文件"></a>2. 创建运行模板引擎的Java文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreemarkerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMPLATE_PATH = <span class="string">"src/main/resources"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_PATH = <span class="string">"src/main/java"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// step1 创建freeMarker配置实例</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Writer out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// step2 获取模版路径</span></span><br><span class="line">            configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(TEMPLATE_PATH));</span><br><span class="line">            <span class="comment">// step3 创建数据模型</span></span><br><span class="line">            Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            dataMap.put(<span class="string">"classPath"</span>, <span class="string">"com.freemark.hello"</span>);</span><br><span class="line">            dataMap.put(<span class="string">"className"</span>, <span class="string">"AutoCodeDemo"</span>);</span><br><span class="line">            dataMap.put(<span class="string">"helloWorld"</span>, <span class="string">"通过简单的 &lt;代码自动生产程序&gt; 演示 FreeMarker的HelloWorld！"</span>);</span><br><span class="line">            <span class="comment">// step4 加载模版文件</span></span><br><span class="line">            Template template = configuration.getTemplate(<span class="string">"hello.ftl"</span>);</span><br><span class="line">            <span class="comment">// step5 生成数据</span></span><br><span class="line">            File docFile = <span class="keyword">new</span> File(CLASS_PATH + <span class="string">"/"</span> + <span class="string">"AutoCodeDemo.txt"</span>);</span><br><span class="line">            out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(docFile)));</span><br><span class="line">            <span class="comment">// step6 输出文件</span></span><br><span class="line">            template.process(dataMap, out);</span><br><span class="line">            System.out.println(<span class="string">"AutoCodeDemo.txt 文件创建成功 !"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</span><br><span class="line">                    out.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-创建模板引擎"><a href="#3-创建模板引擎" class="headerlink" title="3. 创建模板引擎"></a>3. 创建模板引擎</h4><p>在<code>hello.ftl</code>文件中编写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package $&#123;classPath&#125;;</span><br><span class="line"></span><br><span class="line">public class $&#123;className&#125; &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;$&#123;helloWorld&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4. 运行项目"></a>4. 运行项目</h4><p>会自动输出文件<br><figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fsahhwush6j20an0di3zo.jpg" alt="项目目录" title="" class="">
                <p>项目目录</p>
            </figure></p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h3><p><a href="http://freemarker.foofun.cn/dgui_quickstart_template.html" target="_blank" rel="noopener">模板一览</a></p>
<p><a href="http://freemarker.foofun.cn/dgui_misc_userdefdir.html" target="_blank" rel="noopener">宏 自定义指令</a></p>
<p><a href="http://freemarker.foofun.cn/dgui_misc_var.html" target="_blank" rel="noopener">变量</a></p>
<p><a href="http://freemarker.foofun.cn/dgui_template_exp.html#dgui_template_exp_sequenceop_cat" target="_blank" rel="noopener">表达式</a></p>
<p><a href="https://www.cnblogs.com/BigTall/archive/2005/11/28/286192.html" target="_blank" rel="noopener">FreeMarker一篇通</a></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">摘自[<span class="string">FreeMarker 快速入门</span>](<span class="link">https://segmentfault.com/a/1190000011768799</span>)</span><br><span class="line">字符串输出:</span><br><span class="line">$&#123;"Hello $&#123;name&#125; !"&#125; / $&#123;"Hello " + name + " !"&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">cname</span>=<span class="string">r</span>"特殊字符完成输出(<span class="attr">http:</span>\<span class="attr">www.baidu.com</span>)"&gt;</span></span></span><br><span class="line">$&#123;cname&#125;</span><br><span class="line"></span><br><span class="line">字符串截取 ：</span><br><span class="line">通过下标直接获取下标对应的字母： $&#123;name[2]&#125;</span><br><span class="line">起点下标..结尾下标截取字符串：$&#123;name[0..5]&#125;</span><br><span class="line"></span><br><span class="line">算数运算：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#--</span> 支持"+"、"－"、"*"、"/"、"%"运算符 <span class="attr">--</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">number1</span> = <span class="string">10</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">number2</span> = <span class="string">5</span>&gt;</span></span></span><br><span class="line">"+" : $&#123;number1 + number2&#125;</span><br><span class="line">"－" : $&#123;number1 - number2&#125;</span><br><span class="line">"<span class="emphasis">*" : $&#123;number1 *</span> number2&#125;</span><br><span class="line">"/" : $&#123;number1 / number2&#125;</span><br><span class="line">"%" : $&#123;number1 % number2&#125;</span><br><span class="line"></span><br><span class="line">比较运算符：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">number1</span> + <span class="attr">number2</span> <span class="attr">gte</span> <span class="attr">12</span> || <span class="attr">number1</span> <span class="attr">-</span> <span class="attr">number2</span> <span class="attr">lt</span> <span class="attr">6</span>&gt;</span></span></span><br><span class="line">"<span class="emphasis">*" : $&#123;number1 *</span> number2&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#else</span>&gt;</span></span></span><br><span class="line">"/" : $&#123;number1 / number2&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">内建函数：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">data</span> = <span class="string">"abcd1234"</span>&gt;</span></span></span><br><span class="line">第一个字母大写：$&#123;data?cap_first&#125;</span><br><span class="line">所有字母小写：$&#123;data?lower_case&#125;</span><br><span class="line">所有字母大写：$&#123;data?upper_case&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">floatData</span> = <span class="string">12.34</span>&gt;</span></span></span><br><span class="line">数值取整数：$&#123;floatData?int&#125;</span><br><span class="line">获取集合的长度：$&#123;users?size&#125;</span><br><span class="line">时间格式化：$&#123;dateTime?string("yyyy-MM-dd")&#125;</span><br><span class="line"></span><br><span class="line">空判断和对象集合：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">users</span>??&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">users</span> <span class="attr">as</span> <span class="attr">user</span> &gt;</span></span></span><br><span class="line">$&#123;user.id&#125; - $&#123;user.name&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#else</span>&gt;</span></span></span><br><span class="line">$&#123;user!"变量为空则给一个默认值"&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Map集合：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">mapData</span>=<span class="string">&#123;</span>"<span class="attr">name</span>"<span class="attr">:</span>"程序员", "<span class="attr">salary</span>"<span class="attr">:15000</span>&#125;&gt;</span></span></span><br><span class="line">直接通过Key获取 Value值：$&#123;mapData["name"]&#125;</span><br><span class="line">通过Key遍历Map：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">mapData</span>?<span class="attr">keys</span> <span class="attr">as</span> <span class="attr">key</span>&gt;</span></span></span><br><span class="line">Key: $&#123;key&#125; - Value: $&#123;mapData[key]&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br><span class="line">通过Value遍历Map：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">mapData</span>?<span class="attr">values</span> <span class="attr">as</span> <span class="attr">value</span>&gt;</span></span></span><br><span class="line">Value: $&#123;value&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">List集合：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">listData</span>=<span class="string">[</span>"<span class="attr">ITDragon</span>", "<span class="attr">blog</span>", "<span class="attr">is</span>", "<span class="attr">cool</span>"]&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">listData</span> <span class="attr">as</span> <span class="attr">value</span>&gt;</span></span>$&#123;value&#125; <span class="xml"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">include指令：</span><br><span class="line">引入其他文件：<span class="xml"><span class="tag">&lt;<span class="name">#include</span> "<span class="attr">otherFreeMarker.ftl</span>" /&gt;</span></span></span><br><span class="line"></span><br><span class="line">macro宏指令：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">mo</span>&gt;</span></span></span><br><span class="line">定义无参数的宏macro--$&#123;name&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span></span><br><span class="line">使用宏macro: <span class="xml"><span class="tag">&lt;<span class="name">@mo</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">moArgs</span> <span class="attr">a</span> <span class="attr">b</span> <span class="attr">c</span>&gt;</span></span></span><br><span class="line">定义带参数的宏macro-- $&#123;a+b+c&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span></span><br><span class="line">使用带参数的宏macro: <span class="xml"><span class="tag">&lt;<span class="name">@moArgs</span> <span class="attr">a</span>=<span class="string">1</span> <span class="attr">b</span>=<span class="string">2</span> <span class="attr">c</span>=<span class="string">3</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">命名空间：</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#import</span> "<span class="attr">otherFreeMarker.ftl</span>" <span class="attr">as</span> <span class="attr">otherFtl</span>&gt;</span></span></span><br><span class="line">$&#123;otherFtl.otherName&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">@otherFtl.addMethod</span> <span class="attr">a</span>=<span class="string">10</span> <span class="attr">b</span>=<span class="string">20</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">otherName</span>=<span class="string">"修改otherFreeMarker.ftl中的otherName变量值"</span>/&gt;</span></span></span><br><span class="line">$&#123;otherFtl.otherName&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">otherName</span>=<span class="string">"修改otherFreeMarker.ftl中的otherName变量值"</span> <span class="attr">in</span> <span class="attr">otherFtl</span> /&gt;</span></span></span><br><span class="line">$&#123;otherFtl.otherName&#125;</span><br></pre></td></tr></table></figure>
<h4 id="maven编译运行"><a href="#maven编译运行" class="headerlink" title="maven编译运行"></a>maven编译运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">java -jar xxx.jar /Users/xxx/businessModel.json(main函数参数一) /Users/xxx/testOutput(main函数参数二)</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[StringTemplate 4]]></title>
      <url>/2018/06/06/StringTemplate%204/</url>
      <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><a href="http://www.stringtemplate.org/" target="_blank" rel="noopener">官网</a></p>
<p><a href="https://github.com/antlr/stringtemplate4/blob/master/doc/index.md" target="_blank" rel="noopener">文档</a></p>
<blockquote>
<p>StringTemplate is a java template engine (with ports for C#,Objective-C, JavaScript, Scala) for generating source code, web pages, emails, or any other formatted text output. StringTemplate is particularly good at code generators, multiple site skins, and internationalization / localization.</p>
</blockquote>
<pre><code>StringTemplate是一种基于java的模板引擎库。
</code></pre><a id="more"></a>
<h3 id="2-JAVA使用"><a href="#2-JAVA使用" class="headerlink" title="2. JAVA使用"></a>2. JAVA使用</h3><p><a href="https://github.com/antlr/stringtemplate4/blob/master/doc/java.md" target="_blank" rel="noopener">Using StringTemplate with Java</a></p>
<p>添加依赖<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.antlr&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ST4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p>example<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.stringtemplate.v4.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ST hello = <span class="keyword">new</span> ST(<span class="string">"Hello, &lt;name&gt;"</span>);</span><br><span class="line">        hello.add(<span class="string">"name"</span>, <span class="string">"World"</span>);</span><br><span class="line">        System.out.println(hello.render());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>out<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World</span><br></pre></td></tr></table></figure></p>
<h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h3><p><a href="http://www.stringtemplate.org/api/index.html" target="_blank" rel="noopener">JAVA API documentation</a></p>
<p><a href="https://www.cs.usfca.edu/~parrt/course/601/lectures/stringtemplate.html" target="_blank" rel="noopener">Using StringTemplate To Generate Web Pages</a></p>
<p><a href="http://www.cnblogs.com/lwme/archive/2010/04/29/1724186.html" target="_blank" rel="noopener">语法介绍(表格)</a></p>
<p><a href="https://github.com/antlr/stringtemplate4/blob/master/doc/cheatsheet.md" target="_blank" rel="noopener">StringTemplate cheat sheet</a></p>
<p><a href="http://imushan.com/2016/09/02/tools/StringTemplate-4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">StringTemplate 4学习笔记</a></p>
<p><a href="https://www.jianshu.com/p/d87ef30a2f63" target="_blank" rel="noopener">模板渲染工具StringTemplate</a></p>
<p><a href="http://www.antlr3.org/pipermail/stringtemplate-interest/2012-February/003921.html" target="_blank" rel="noopener">[stringtemplate-interest] Simple example of list iteration</a></p>
<p><a href="https://stackoverflow.com/questions/18437005/how-do-i-iterate-though-a-java-list-in-stringtemplate" target="_blank" rel="noopener">how do I iterate though a java list in stringtemplate?
</a></p>
<h3 id="4-项目代码"><a href="#4-项目代码" class="headerlink" title="4. 项目代码"></a>4. 项目代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.stringtemplate.v4.ST;</span><br><span class="line"><span class="keyword">import</span> org.stringtemplate.v4.STGroup;</span><br><span class="line"><span class="keyword">import</span> org.stringtemplate.v4.STGroupFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String nametype;</span><br><span class="line">    <span class="keyword">private</span> String namejson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Args</span><span class="params">(String name, String nametype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nametype = nametype;</span><br><span class="line">        <span class="keyword">this</span>.namejson = name.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNametype</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nametype; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNamejson</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> namejson; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Args[] parms = <span class="keyword">new</span> Args[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"BID"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Species"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Color"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Weight"</span>, <span class="string">"float64"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"NetWeight"</span>, <span class="string">"float64"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Owner"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Status"</span>, <span class="string">"int"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        STGroup stg = <span class="keyword">new</span> STGroupFile(<span class="string">"testplayer.stg"</span>);</span><br><span class="line">        ST s = stg.getInstanceOf(<span class="string">"sqlTemplate"</span>);</span><br><span class="line">        s.add(<span class="string">"parms"</span>, Arrays.asList(parms));</span><br><span class="line">        System.out.println(s.render());</span><br><span class="line"></span><br><span class="line">        Args[] parms2 = <span class="keyword">new</span> Args[] &#123;</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"SlicedID"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"BID"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Weight"</span>, <span class="string">"float64"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Desc"</span>, <span class="string">"string"</span>),</span><br><span class="line">                <span class="keyword">new</span> Args(<span class="string">"Status"</span>, <span class="string">"int"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        ST s2 = stg.getInstanceOf(<span class="string">"sqlTemplate2"</span>);</span><br><span class="line">        s2.add(<span class="string">"parms2"</span>, Arrays.asList(parms2));</span><br><span class="line">        System.out.println(s2.render());</span><br><span class="line"></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"template1.go"</span>));</span><br><span class="line">        out.write(s.render().getBytes());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        FileOutputStream out2 = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"template2.go"</span>));</span><br><span class="line">        out2.write(s2.render().getBytes());</span><br><span class="line">        out2.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlTemplate(parms)</span><br><span class="line">::= &lt;&lt;</span><br><span class="line">type Beef struct &#123;</span><br><span class="line">    &lt;parms:&#123; parm |&lt;parm.name&gt; &lt;\t&gt; &lt;parm.nametype&gt; &lt;\t&gt; `json:"&lt;parm.namejson&gt;"` &lt;\n&gt;&#125;&gt;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;</span><br><span class="line"></span><br><span class="line">sqlTemplate2(parms2)</span><br><span class="line">::= &lt;&lt;</span><br><span class="line">type SlicedBeef struct &#123;</span><br><span class="line">    &lt;parms2:&#123; parm |&lt;parm.name&gt; &lt;\t&gt; &lt;parm.nametype&gt; &lt;\t&gt; `json:"&lt;parm.namejson&gt;"` &lt;\n&gt;&#125;&gt;</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Code Generation]]></title>
      <url>/2018/06/05/Code%20Generation/</url>
      <content type="html"><![CDATA[<h3 id="1-javapoet"><a href="#1-javapoet" class="headerlink" title="1. javapoet"></a>1. javapoet</h3><p><a href="https://github.com/square/javapoet" target="_blank" rel="noopener">https://github.com/square/javapoet</a></p>
<pre><code>开源java代码生成框架，提供Java Api生成.java源文件。
可以很方便的使用它根据注解、数据库模式、协议格式等来对应生成代码。
</code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHelloworld</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        MethodSpec main = MethodSpec.methodBuilder(<span class="string">"main"</span>)</span><br><span class="line">        <span class="comment">//main代表方法名</span></span><br><span class="line">                .addModifiers(Modifier.PUBLIC,Modifier.STATIC)</span><br><span class="line">                    <span class="comment">//Modifier 修饰的关键字</span></span><br><span class="line">                .addParameter(String[].class, <span class="string">"args"</span>)</span><br><span class="line">                <span class="comment">//添加string[]类型的名为args的参数</span></span><br><span class="line">                .addStatement(<span class="string">"$T.out.println($S)"</span>, System.class,<span class="string">"Hello World"</span>)</span><br><span class="line">                    <span class="comment">//添加代码，这里$T和$S后面会讲，这里其实就是添加了System,out.println("Hello World");</span></span><br><span class="line">                .build();</span><br><span class="line">                TypeSpec typeSpec = TypeSpec.classBuilder(<span class="string">"HelloWorld"</span>)</span><br><span class="line">                <span class="comment">//HelloWorld是类名</span></span><br><span class="line">                .addModifiers(Modifier.FINAL,Modifier.PUBLIC)</span><br><span class="line">                .addMethod(main)  </span><br><span class="line">                <span class="comment">//在类中添加方法</span></span><br><span class="line">                .build();</span><br><span class="line">        JavaFile javaFile = JavaFile.builder(<span class="string">"com.example.helloworld"</span>, typeSpec)</span><br><span class="line">                .build();</span><br><span class="line">        javaFile.writeTo(System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：尸情化异</span><br><span class="line">链接：https:<span class="comment">//www.jianshu.com/p/95f12f72f69a</span></span><br><span class="line">來源：简书</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h4 id="调用JavaPoet的API生成"><a href="#调用JavaPoet的API生成" class="headerlink" title="调用JavaPoet的API生成"></a>调用JavaPoet的API生成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello, JavaPoet!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-RGen元模型生成器"><a href="#2-RGen元模型生成器" class="headerlink" title="2. RGen元模型生成器"></a>2. RGen元模型生成器</h3><pre><code>Ruby Modelling and Generator Framework
</code></pre><p><a href="http://ruby-gen.org/documentation" target="_blank" rel="noopener">Documentation</a><br><a href="http://www.infoq.com/cn/articles/thiede-ruby-modelling" target="_blank" rel="noopener">介绍</a></p>
<p><img src="https://res.infoq.com/articles/thiede-ruby-modelling/en/resources/model_and_metamodel.png" alt="此处输入图片的描述"></p>
<p>对象用来表示模型元素，类用来表示元模型元素。</p>
<h4 id="RGen生成器模板"><a href="#RGen生成器模板" class="headerlink" title="RGen生成器模板"></a>RGen生成器模板</h4><p><img src="https://res.infoq.com/articles/thiede-ruby-modelling/en/resources/template_language.png" alt="此处输入图片的描述"></p>
<h4 id="状态机生成器模板例子"><a href="#状态机生成器模板例子" class="headerlink" title="状态机生成器模板例子"></a>状态机生成器模板例子</h4><p>它用来产生一个为每个复合状态创建的C++抽象类的头文件。跟随着状态模式和，能够从这个类得到每个子状态的状态类。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">define</span> '<span class="attr">Header</span>', <span class="attr">:for</span> =&gt;</span> CompositeState do %&gt;         # (1)</span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">file</span> <span class="attr">abstractSubstateClassName</span>+"<span class="attr">.h</span>" <span class="attr">do</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">expand</span> '/<span class="attr">Util::IfdefHeader</span>', <span class="attr">abstractSubstateClassName</span> %&gt;</span> # (2)</span><br><span class="line">    class <span class="tag">&lt;<span class="name">%=</span> <span class="attr">stateClassName</span> %&gt;</span>;</span><br><span class="line">    <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    class <span class="tag">&lt;<span class="name">%=</span> <span class="attr">abstractSubstateClassName</span> %&gt;</span>               # (3)</span><br><span class="line">    &#123;</span><br><span class="line">    public:<span class="tag">&lt;<span class="name">%iinc%</span>&gt;</span>                                      # (4)</span><br><span class="line">      <span class="tag">&lt;<span class="name">%=abstractSubstateClassName%</span>&gt;</span>(<span class="tag">&lt;<span class="name">%=stateClassName%</span>&gt;</span> &amp;cont, char* name);</span><br><span class="line">      virtual ~<span class="tag">&lt;<span class="name">%=</span> <span class="attr">abstractSubstateClassName</span> %&gt;</span>() &#123;&#125;;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">stateClassName</span> %&gt;</span> &amp;getContext() &#123;<span class="tag">&lt;<span class="name">%iinc%</span>&gt;</span></span><br><span class="line">        return fContext;<span class="tag">&lt;<span class="name">%idec%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span></span><br><span class="line">      char *getName() &#123; return fName; &#125;;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span></span><br><span class="line">      virtual void entryAction() &#123;&#125;;</span><br><span class="line">      virtual void exitAction() &#123;&#125;;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span> <span class="attr">t</span> <span class="attr">in</span> (<span class="attr">outgoingTransitions</span> + <span class="attr">allSubstateTransitions</span>)<span class="attr">.trigger</span> %&gt;</span> # (5)</span><br><span class="line">        virtual void <span class="tag">&lt;<span class="name">%=</span> <span class="attr">t</span> %&gt;</span>() &#123;&#125;;</span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">%nl%</span>&gt;</span><span class="tag">&lt;<span class="name">%idec%</span>&gt;</span></span><br><span class="line">    private:<span class="tag">&lt;<span class="name">%iinc%</span>&gt;</span></span><br><span class="line">      char* fName;  </span><br><span class="line">      <span class="tag">&lt;<span class="name">%=</span> <span class="attr">stateClassName</span> %&gt;</span> &amp;fContext;<span class="tag">&lt;<span class="name">%idec%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">expand</span> '/<span class="attr">Util::IfdefFooter</span>', <span class="attr">abstractSubstateClassName</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">end</span> %&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Listing 11: Example C++ output file "AbstractOperatingSubstate.h"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ABSTRACTOPERATINGSUBSTATE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABSTRACTOPERATINGSUBSTATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatingState</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractOperatingSubstate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   AbstractOperatingSubstate(OperatingState &amp;context, <span class="keyword">char</span>* name);</span><br><span class="line">   <span class="keyword">virtual</span> ~AbstractOperatingSubstate() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function">OperatingState &amp;<span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fContext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">char</span> *<span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> fName; &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">entryAction</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">exitAction</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">powerBut</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">modeBut</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">char</span>* fName;</span><br><span class="line">   OperatingState &amp;fContext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ABSTRACTOPERATINGSUBSTATE_H_ */</span></span></span><br></pre></td></tr></table></figure>
<h3 id="3-Jet-Model-Robotization"><a href="#3-Jet-Model-Robotization" class="headerlink" title="3. Jet Model Robotization"></a>3. Jet Model Robotization</h3><p>Jmr使用Jet模板生成代码。Jet是Eclipse开源的模板引擎</p>
<h4 id="Java-Emitter-Templates"><a href="#Java-Emitter-Templates" class="headerlink" title="Java Emitter Templates"></a><a href="https://www.eclipse.org/modeling/m2t/?project=jet" target="_blank" rel="noopener">Java Emitter Templates</a></h4><pre><code>随着模型驱动开发（MDD）的发展而普及开来。Eclipse 项目有一个称为 JET 的技术项目就是一个专门的代码生成器。

参数 + 蓝图 = 所需的工件
</code></pre><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-ecl-jet/" target="_blank" rel="noopener">使用 JET 在 Eclipse 中创建更多更好的代码</a></p>
<h5 id="属性模板"><a href="#属性模板" class="headerlink" title="属性模板"></a>属性模板</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"/app/@class"</span> /&gt;</span> &#123;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:iterate</span> <span class="attr">select</span>=<span class="string">"/app/property"</span> <span class="attr">var</span>=<span class="string">"p"</span> &gt;</span></span><br><span class="line">    private <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@type"</span> /&gt;</span> <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span>;</span><br><span class="line"><span class="tag">&lt;/<span class="name">c:iterate</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    public <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"/app/@class"</span> /&gt;</span>() &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">c:iterate</span> <span class="attr">select</span>=<span class="string">"/app/property"</span> <span class="attr">var</span>=<span class="string">"p"</span> &gt;</span></span><br><span class="line">        this.<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span> = <span class="tag">&lt;<span class="name">c:choose</span> <span class="attr">select</span>=<span class="string">"$p/@type"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"'String'"</span>&gt;</span>"<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@initial"</span> /&gt;</span>"<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@initial"</span> /&gt;</span><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line">;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:iterate</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">c:iterate</span> <span class="attr">select</span>=<span class="string">"/app/property"</span> <span class="attr">var</span>=<span class="string">"p"</span> &gt;</span></span><br><span class="line">    public void set<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">\</span></span></span><br><span class="line"><span class="tag">    "<span class="attr">camelCase</span>($<span class="attr">p</span>/@<span class="attr">name</span>)" /&gt;</span>(<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@type"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span>) &#123;</span><br><span class="line">        System.out.println\</span><br><span class="line">        ("In set<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">\</span></span></span><br><span class="line"><span class="tag">        "<span class="attr">camelCase</span>($<span class="attr">p</span>/@<span class="attr">name</span>)" /&gt;</span>()");</span><br><span class="line">        this.<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span> = <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">\</span></span></span><br><span class="line"><span class="tag">    "$<span class="attr">p</span>/@<span class="attr">type</span>" /&gt;</span> get<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"camelCase($p/@name)"</span> /&gt;</span>() &#123;</span><br><span class="line">        System.out.println("In get<span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"camelCase($p/@name)"</span> /&gt;</span>()");</span><br><span class="line">        return <span class="tag">&lt;<span class="name">c:get</span> <span class="attr">select</span>=<span class="string">"$p/@name"</span> /&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:iterate</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数"></a>输入参数</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app</span> <span class="attr">class</span>=<span class="string">"Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"String"</span> <span class="attr">initial</span>=<span class="string">"Honda Accord"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"horsepower"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">initial</span>=<span class="string">"140"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spareTires"</span> <span class="attr">type</span>=<span class="string">"boolean"</span> <span class="attr">initial</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="生成的类"><a href="#生成的类" class="headerlink" title="生成的类"></a>生成的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> horsepower;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> spareTires;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.model = <span class="string">"Honda Accord"</span>;</span><br><span class="line">        <span class="keyword">this</span>.horsepower = <span class="number">140</span>;</span><br><span class="line">        <span class="keyword">this</span>.spareTires = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModel</span><span class="params">(String model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In setModel()"</span>);</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In getModel()"</span>);</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHorsepower</span><span class="params">(<span class="keyword">int</span> horsepower)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In setHorsepower()"</span>);</span><br><span class="line">        <span class="keyword">this</span>.horsepower = horsepower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHorsepower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In getHorsepower()"</span>);</span><br><span class="line">        <span class="keyword">return</span> horsepower;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSparetires</span><span class="params">(<span class="keyword">boolean</span> spareTires)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In setSparetires()"</span>);</span><br><span class="line">        <span class="keyword">this</span>.spareTires = spareTires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getSparetires</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"In getSparetires()"</span>);</span><br><span class="line">        <span class="keyword">return</span> spareTires;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-AutoValue"><a href="#4-AutoValue" class="headerlink" title="4. AutoValue"></a>4. AutoValue</h3><pre><code>&quot;AutoValue is a great tool for eliminating the drudgery of writing mundane value classes in Java. It encapsulates much of the advice in Effective Java Chapter 2, and frees you to concentrate on the more interesting aspects of your program. The resulting program is likely to be shorter, clearer, and freer of bugs. Two thumbs up.&quot;
</code></pre><p>AutoValue的是Google为了实现ValueClass设计的自动编译框架。</p>
<p><a href="https://github.com/google/auto/blob/master/value/userguide/index.md" target="_blank" rel="noopener">userguide</a></p>
<p><a href="https://ryanharter.com/blog/2016/03/22/autovalue/" target="_blank" rel="noopener">An Introduction to AutoValue</a></p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  apt &apos;com.google.auto.value:auto-value:1.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoValue</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Story</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">title</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Story <span class="title">create</span><span class="params">(<span class="keyword">int</span> id, String title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AutoValue_Story(id,title);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Story</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Story</span><span class="params">(<span class="keyword">int</span> id, String title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">title</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id + title;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = <span class="number">7</span>;</span><br><span class="line">    hash = <span class="number">31</span> * hash + <span class="keyword">this</span>.id;</span><br><span class="line">    hash = <span class="number">31</span> * hash + (<span class="keyword">null</span> == title ? <span class="number">0</span> : title.hashCode());</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || !(o <span class="keyword">instanceof</span> Stroy)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Story s = (Story) o;</span><br><span class="line">    <span class="keyword">if</span> (s.id != s.id) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> s.title.equals(s.title);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-Ruby-代码生成器"><a href="#5-Ruby-代码生成器" class="headerlink" title="5. Ruby 代码生成器"></a>5. Ruby 代码生成器</h3><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-ruby-codegenerator/index.html" target="_blank" rel="noopener">使用 Ruby 开发代码生成器</a></p>
<p><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html" target="_blank" rel="noopener">Class: ERB</a></p>
<p>ERB 是 Ruby 标准库的成员。</p>
<p>ERB 中使用<code>&lt;% %&gt;</code>在模板文件中嵌入 Ruby 代码，<code>&lt;% %&gt;</code> 中的 Ruby 代码用于指定代码生成中数据模型相关的信息，模板中的文本给出了模型无关的信息。<code>&lt;% %&gt;</code> 中用于给出一段 Ruby 代码， <code>&lt;%= %&gt;</code> 表示表达式求值的结果将被输出出来。</p>
<p><img src="https://www.ibm.com/developerworks/cn/opensource/os-cn-ruby-codegenerator/image003.png" alt="此处输入图片的描述"></p>
<p>ERB模板<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 项目名称：&lt;%=projectName%&gt;</span><br><span class="line">*</span><br><span class="line">* 创建日期 : &lt;%=date%&gt;</span><br><span class="line">*</span><br><span class="line">* <span class="number">1.0</span>.<span class="number">0</span> 版 （&lt;%=bean.author%&gt;）</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">package com.&lt;%=projectPackage%&gt;.&lt;%=bean.package%&gt;.domain;</span></span><br><span class="line"><span class="regexp">&lt;%if(bean.hasDateType())%&gt;import java.util.Date;&lt;%end%&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">public class &lt;%=bean.domain%&gt;Domain  &#123;   </span></span><br><span class="line"><span class="regexp">&lt;% bean.properties.each do |p|%&gt;  </span></span><br><span class="line"><span class="regexp">    /</span>** &lt;%=p.desc%&gt; *<span class="regexp">/   </span></span><br><span class="line"><span class="regexp">    private &lt;%=p.getJavaType()%&gt; &lt;%=p.field%&gt;;     </span></span><br><span class="line"><span class="regexp">&lt;%end%&gt;  </span></span><br><span class="line"><span class="regexp">&lt;% bean.properties.each do |p|%&gt;  </span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">    * 获取 &lt;%=(p.desc)%&gt;</span><br><span class="line">    *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    public &lt;%=p.getJavaType()%&gt; get&lt;%=p.upcaseField()%&gt;()&#123;</span></span><br><span class="line"><span class="regexp">        return this.&lt;%=p.field%&gt;;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">    * 设置 &lt;%=(p.desc)%&gt;</span><br><span class="line">    *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    public void set&lt;%=p.upcaseField()%&gt;(&lt;%=p.getJavaType()%&gt; &lt;%=p.field%&gt;)&#123;</span></span><br><span class="line"><span class="regexp">        this.&lt;%=p.field%&gt; = &lt;%=p.field%&gt;;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;%end%&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>使用 USER 数据模型作为输入，调用上述模板，得到的输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 项目名称：XX 系统</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 创建日期 : 2011-12-08</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 1.0.0 版 （gaoshang）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.test.example.domain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDomain</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** ID */</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer id;    </span><br><span class="line">    <span class="comment">/** 姓名 */</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="comment">/** 身份证号 */</span>    </span><br><span class="line">    <span class="keyword">private</span> String idcard;     </span><br><span class="line">    <span class="comment">/** 地址 */</span>  </span><br><span class="line">    <span class="keyword">private</span> String address;    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置 ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 姓名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置 姓名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 身份证号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdcard</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.idcard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置 身份证号</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdcard</span><span class="params">(String idcard)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idcard = idcard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置 地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-CodeSmith"><a href="#6-CodeSmith" class="headerlink" title="6. CodeSmith"></a>6. CodeSmith</h3><p><a href="http://www.codesmithtools.com/" target="_blank" rel="noopener">官网</a></p>
<p>CodeSmith 是一种基于模板的代码生成工具，它使用类似于 ASP.NET的语法来生成任意类型的代码或文本。</p>
<p><img src="http://wiki.jikexueyuan.com/project/codesmith/images/8.png" alt="此处输入图片的描述"></p>
<p><a href="http://wiki.jikexueyuan.com/project/codesmith/first-code-template.html" target="_blank" rel="noopener">编写第一个代码模板</a></p>
<h3 id="7-Velocity"><a href="#7-Velocity" class="headerlink" title="7. Velocity"></a>7. Velocity</h3><p>Velocity是一个基于Java的模板引擎。它允许任何人使用简单而强大的模板语言来引用Java代码中定义的对象。</p>
<p>Velocity的功能远远超出了网络的范围; 例如，它可以用于从模板生成SQL，PostScript和XML。它可以用作生成源代码和报告的独立实用程序，也可以用作其他系统的集成组件。例如，Velocity为各种Web框架提供模板服务，使他们能够根据真正的MVC模型，使视图引擎促进Web应用程序的开发。</p>
<p><a href="https://velocity.apache.org/engine/devel/user-guide.html#what-is-velocity" target="_blank" rel="noopener">User Guide</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-velocity1/" target="_blank" rel="noopener">使用 Velocity 模板引擎快速生成代码</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HelloVelocity.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloVelocity</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> VelocityEngine ve = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line"> ve.setProperty(RuntimeConstants.RESOURCE_LOADER, <span class="string">"classpath"</span>);</span><br><span class="line"> ve.setProperty(<span class="string">"classpath.resource.loader.class"</span>, ClasspathResourceLoader.class.getName());</span><br><span class="line"></span><br><span class="line"> ve.init();</span><br><span class="line"></span><br><span class="line"> Template t = ve.getTemplate(<span class="string">"hellovelocity.vm"</span>);</span><br><span class="line"> VelocityContext ctx = <span class="keyword">new</span> VelocityContext();</span><br><span class="line"></span><br><span class="line"> ctx.put(<span class="string">"name"</span>, <span class="string">"velocity"</span>);</span><br><span class="line"> ctx.put(<span class="string">"date"</span>, (<span class="keyword">new</span> Date()).toString());</span><br><span class="line"></span><br><span class="line"> List temp = <span class="keyword">new</span> ArrayList();</span><br><span class="line"> temp.add(<span class="string">"1"</span>);</span><br><span class="line"> temp.add(<span class="string">"2"</span>);</span><br><span class="line"> ctx.put(<span class="string">"list"</span>, temp);</span><br><span class="line"></span><br><span class="line"> StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line"> t.merge(ctx, sw);</span><br><span class="line"></span><br><span class="line"> System.out.println(sw.toString());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 HelloVelocity 的代码中，首先 new 了一个 VelocityEngine 类，这个类设置了 Velocity 使用的一些配置，在初始化引擎之后就可以读取 hellovelocity.vm 这个模板生成的 Template 这个类。之后的 VelocityContext 类是配置 Velocity 模板读取的内容。这个 context 可以存入任意类型的对象或者变量，让 template 来读取。这个操作就像是在使用 JSP 开发时，往 request 里面放入 key-value，让 JSP 读取一样。</p>
<p>接下来就是写 hellovelocity.vm 文件了，这个文件实际定义了 Velocity 的输出内容和格式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Hellovelocity.vm</span><br><span class="line">#set( $iAmVariable = &quot;good!&quot; )</span><br><span class="line">Welcome $name to velocity.com</span><br><span class="line">today is $date.</span><br><span class="line">#foreach ($i in $list)</span><br><span class="line">$i</span><br><span class="line">#end</span><br><span class="line">$iAmVariable</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Welcome velocity to velocity.com</span><br><span class="line">today is Sun Mar 23 19:19:04 CST 2014.</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">good!</span><br></pre></td></tr></table></figure></p>
<h3 id="8-StringTemplate"><a href="#8-StringTemplate" class="headerlink" title="8. StringTemplate"></a>8. StringTemplate</h3><p><a href="http://www.stringtemplate.org/" target="_blank" rel="noopener">http://www.stringtemplate.org/</a></p>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlTemplate(columns,condition)</span><br><span class="line">::= &lt;&lt;select &lt;columns;separator=","&gt;</span><br><span class="line">from table</span><br><span class="line">where 1=1 &lt;if(condition)&gt;and &lt;condition&gt;&lt;endif&gt;</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="JAVA调用"><a href="#JAVA调用" class="headerlink" title="JAVA调用"></a>JAVA调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">STGroup stg = <span class="keyword">new</span> STGroupFile(<span class="string">"dataExtractSql.stg"</span>);</span><br><span class="line">        ST sqlST = stg.getInstanceOf(<span class="string">"sqlTemplate"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; columnList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        columnList.add(<span class="string">"order_id"</span>);</span><br><span class="line">        columnList.add(<span class="string">"price"</span>);</span><br><span class="line">        columnList.add(<span class="string">"phone"</span>);</span><br><span class="line">        sqlST.add(<span class="string">"columns"</span>, columnList);</span><br><span class="line">        sqlST.add(<span class="string">"condition"</span>, <span class="string">"dt='2017-04-04'"</span>);</span><br><span class="line">        System.out.print(sqlST.render());</span><br></pre></td></tr></table></figure>
<h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_id,price,phone</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> dt=<span class="string">'2017-04-04'</span></span><br></pre></td></tr></table></figure>
<h3 id="9-FreeMarker"><a href="#9-FreeMarker" class="headerlink" title="9. FreeMarker"></a>9. FreeMarker</h3><pre><code>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。
</code></pre><p><img src="http://freemarker.foofun.cn/figures/overview.png" alt="此处输入图片的描述"></p>
<p><a href="http://freemarker.foofun.cn/index.html" target="_blank" rel="noopener">官网</a></p>
<p><a href="http://try.freemarker.org/" target="_blank" rel="noopener">http://try.freemarker.org/</a></p>
<h3 id="10-mustache"><a href="#10-mustache" class="headerlink" title="10. mustache"></a>10. mustache</h3><p><a href="http://mustache.github.com/" target="_blank" rel="noopener"></a></p>
<p><a href="https://github.com/spullara/mustache.java" target="_blank" rel="noopener">mustache.java</a></p>
<p><a href="http://mustache.github.io/mustache.5.html" target="_blank" rel="noopener">语法</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[命令行处理JSON工具 jq]]></title>
      <url>/2018/05/25/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%84%E7%90%86JSON%E5%B7%A5%E5%85%B7%20jq/</url>
      <content type="html"><![CDATA[<p>所有参考资料都写在文末，侵删致歉。</p>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq</a><br><a href="https://github.com/stedolan/jq" target="_blank" rel="noopener">stedolan/jq</a></p>
<pre><code>jq is a lightweight and flexible command-line JSON processor.
</code></pre><p>jq 是一款命令行下处理 JSON 数据的工具。<br>其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。<br>jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p><a href="https://stedolan.github.io/jq/download/" target="_blank" rel="noopener">Download jq</a></p>
<pre><code>brew install jq
sudo apt-get install jq
yum -y  install epel-release   &amp;&amp;    yum -y install jq
</code></pre><a id="more"></a>
<p>手动编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/stedolan/jq.git</span><br><span class="line">cd jq</span><br><span class="line">autoreconf -i</span><br><span class="line">./configure --disable-maintainer-mode</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h3 id="3-jq表达式-filters"><a href="#3-jq表达式-filters" class="headerlink" title="3. jq表达式(filters)"></a>3. jq表达式(filters)</h3><p><a href="https://stedolan.github.io/jq/manual/#Basicfilters" target="_blank" rel="noopener">jq Manual</a></p>
<p><a href="https://jqplay.org/" target="_blank" rel="noopener">在线测试</a></p>
<p><a href="https://www.linux-man.cn/command/jq" target="_blank" rel="noopener">jq命令中文手册</a></p>
<pre><code>$ jq
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Some of the options include:</span><br><span class="line"> -c		compact instead of pretty-printed output;</span><br><span class="line"> -n		use `null` as the single input value;</span><br><span class="line"> -e		set the exit status code based on the output;</span><br><span class="line"> -s		read (slurp) all inputs into an array; apply filter to it;</span><br><span class="line"> -r		output raw strings, not JSON texts;</span><br><span class="line"> -R		read raw strings, not JSON texts;</span><br><span class="line"> -C		colorize JSON;</span><br><span class="line"> -M		monochrome (don&apos;t colorize JSON);</span><br><span class="line"> -S		sort keys of objects on output;</span><br><span class="line"> --tab	use tabs for indentation;</span><br><span class="line"> --arg a v	set variable $a to value &lt;v&gt;;</span><br><span class="line"> --argjson a v	set variable $a to JSON value &lt;v&gt;;</span><br><span class="line"> --slurpfile a f	set variable $a to an array of JSON texts read from &lt;f&gt;;</span><br></pre></td></tr></table></figure>
<h4 id="1-格式化输出json"><a href="#1-格式化输出json" class="headerlink" title="1. 格式化输出json"></a>1. 格式化输出json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#xxx.JSON 中是我们要处理的 JSON 数据，我们可以直接将文件名传给 jq</span><br><span class="line">$ jq -r &apos;.&apos; xxx.JSON</span><br><span class="line">#或者由其他程序读出文件内容，并传给 jq</span><br><span class="line">$ cat xxx.JSON|jq -r &apos;.&apos;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;-r&apos;选项。该选项控制 jq 是输出 raw 格式内容或 JSON 格式内容。所谓的 JSON 格式是指符合 JSON 标准的格式。例如，假设我们要查询 JSON 字符串&#123;&quot;name&quot;:&quot;tom&quot;&#125;中 name 的值. 使用-r 选项时返回的是&apos;tom&apos;. 不使用-r 选项时，返回的是&apos;&quot;tom&quot;&apos;.返回值多了一对双引号。</span><br></pre></td></tr></table></figure>
<h4 id="2-‘-’-符号"><a href="#2-‘-’-符号" class="headerlink" title="2. ‘.’ 符号"></a>2. ‘.’ 符号</h4><p>单独的一个<code>&#39;.&#39;</code>符号用来表示对作为表达式输入的整个 JSON 对象的引用。</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmk0yh81hj21360d70w4.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="3-JSON-对象操作"><a href="#3-JSON-对象操作" class="headerlink" title="3. JSON 对象操作"></a>3. JSON 对象操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.profile_image&apos;</span><br></pre></td></tr></table></figure>
<p>如果key不存在则返回null</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmk64k3vjj213c0gxtcp.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4. 迭代器"></a>4. 迭代器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[]&apos;</span><br></pre></td></tr></table></figure>
<p>该表达式的输入可以是数组或者 JSON 对象。输出的是基于数组元素或者 JSON 对象属性值的 iterator。</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmkauycmzj213a0gldkb.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="5-访问属性值"><a href="#5-访问属性值" class="headerlink" title="5. 访问属性值"></a>5. 访问属性值</h4><p>输出数组元素或者 JSON 对象的属性值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[&lt;value&gt;]&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmkhv2x41j213f0h0jsl.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[&lt;string&gt;]&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmkknaegkj213e0gxtcq.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="6-数组切片"><a href="#6-数组切片" class="headerlink" title="6. 数组切片"></a>6. 数组切片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[startindex:endindex]&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmknawor0j213b0gqaaz.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="7-表达式操作-‘-’和-‘-’"><a href="#7-表达式操作-‘-’和-‘-’" class="headerlink" title="7. 表达式操作(‘,’和 ‘|’)"></a>7. 表达式操作(‘,’和 ‘|’)</h4><p>表达式操作是用来关联多个基础表达式。</p>
<p>其中逗号表示对同一个输入应用多个表达式。管道符表示将前一个表达式的输出用作后一个表达式的输入。<br>当前一个表达式产生的结果是迭代器时，会将迭代器中的每一个值用作后一个表达式的输入从而形成新的表达式。<br>例如<code>&#39;.[]|.+1&#39;</code>, 在这个表达式中，第一个子表达式<code>&#39;.[]&#39;</code>在输入数组上构建迭代器，第二个子表达式则在迭代器的每个元素上加 1。</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmky6qc19j21380h1ab1.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[] | .name&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frmkvtq50qj213f0h3jsj.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="8-内置运算"><a href="#8-内置运算" class="headerlink" title="8. 内置运算"></a>8. 内置运算</h4><p><a href="https://stedolan.github.io/jq/manual/#Basicfilters" target="_blank" rel="noopener">Builtin operators and functions</a></p>
<ul>
<li>数学运算</li>
</ul>
<p>对于数字类型，jq 实现了基本的加减乘除<code>/</code>和求余<code>%</code>运算。对于除法运算，jq 最多支持 16 位小数。</p>
<ul>
<li><p>字符串操作</p>
<ul>
<li><p>连接操作(运算符为<code>+</code>，例如：<code>&quot;tom &quot;+&quot;jerry&quot;</code>结果为<code>&quot;tom jerry&quot;</code>)</p>
</li>
<li><p>复制操作(例如：<code>&#39;a&#39;*3</code>结果为<code>&#39;aaa&#39;</code>)</p>
</li>
<li><p>字符串分割操作(将字符串按照指定的分割符分成数组，例如<code>&quot;sas&quot;/&quot;s&quot;</code>的结果为<code>[&quot;&quot;,&quot;a&quot;,&quot;&quot;]</code>，而<code>&quot;sas&quot;/&quot;a&quot;</code>的结果为<code>[&quot;s&quot;,&quot;s&quot;]</code>。</p>
</li>
</ul>
</li>
<li><p>数组操作</p>
<ul>
<li>并集<code>&#39;+&#39;</code>运算，结果数组中包含参与运算的数组的所有元素。</li>
<li>差集运算<code>&#39;-&#39;</code>，例如：有数组 <code>a,b</code>, <code>a-b</code> 的结果为所有在 a 中且不包含在 b 中的元素组成的数组。</li>
</ul>
</li>
<li><p>对象操作</p>
<ul>
<li>jq 实现了两个 JSON 对象的合并操作(merge)。当两个参与运算的对象包含相同的属性时则保留运算符右侧对象的属性值。有两种合并运算符：<code>+</code>和<code>*</code>。所不同的是，运算符’+’只做顶层属性的合并，运算符’*’则是递归合并。</li>
<li>例如：有对象 <code>a={&quot;a&quot;:{&quot;b&quot;:1}}, b={&quot;a&quot;:{&quot;c&quot;:2}}</code>，<code>a+b</code> 的结果为<code>{&quot;a&quot;:{&quot;c&quot;:2}}</code>，而 <code>a*b</code> 的结果为<code>{&quot;a&quot;:{&quot;b&quot;:1,&quot;c&quot;:2}}</code></li>
</ul>
</li>
</ul>
<p><a href="https://stedolan.github.io/jq/manual/#ConditionalsandComparisons" target="_blank" rel="noopener">Conditionals and Comparisons</a></p>
<ul>
<li><p>比较操作<br>jq 内部支持的比较操作符有<code>==</code>, <code>!=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;=</code>和<code>&lt;</code>。其中，<code>==</code>的规则和 javascript 中的恒等(<code>===</code>)类似，只有两个操作数的类型和值均相同时其结果才是 true。</p>
</li>
<li><p>逻辑运算符: <code>and</code>/<code>or</code>/<code>not</code><br>在 jq 逻辑运算中，除了 <code>false</code> 和 <code>null</code> 外，其余的任何值都等同于 <code>true</code>。</p>
</li>
<li>默认操作符(<code>//</code>)<br>表达式<code>a//b</code>表示当表达式 a 的值不是 <code>false</code> 或 <code>null</code> 时，<code>a//b</code> 等于 a，否则等于 b。</li>
</ul>
<ul>
<li>迭代器运算</li>
</ul>
<p>类似笛卡尔积方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;([1,2]|.[])+([4,6]|.[])&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frndgnyr6ej213d0grn05.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="9-try-catch"><a href="#9-try-catch" class="headerlink" title="9. try-catch"></a>9. try-catch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;try .a catch &quot;. is not an object&quot;&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frnduj61paj213g0gs75e.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;[.[]|try .a]&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frndwjmn01j21360gjdgt.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h4 id="10-内置函数"><a href="#10-内置函数" class="headerlink" title="10. 内置函数"></a>10. 内置函数</h4><ul>
<li><p>map(x), map_values(x)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;map(.+1)&apos;</span><br></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/789d050dly1frne2gfishj213c0gj759.jpg" alt=""></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;map_values(.+1)&apos;</span><br></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/789d050dly1frne3d85kfj213c0gtwfm.jpg" alt=""></p>
</li>
<li><p>过滤操作</p>
<ul>
<li><p>基于数据类型的过滤<br>如表达式<code>jq &#39;.[]|numbers&#39;</code>的结果只包含数组。</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frne992xo3j213k0h3my6.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<p>可以用来过滤的类型过滤器有：<code>arrays</code>, <code>objects</code>, <code>iterables</code>, <code>booleans</code>, <code>numbers</code>, <code>normals</code>, <code>finites</code>, <code>strings</code>, <code>nulls</code>, <code>values</code>, <code>scalars</code>。</p>
</li>
<li><p>select 函数<br>select 接受一个条件表达式作为参数。其输入可以是迭代器，或者和 map 函数配合使用来处理数组。当输入中的某个元素使 select 参数中的条件表达式结果为真时，则在结果中保留该元素，否则不保留该元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;.[] | select(.id == &quot;second&quot;)&apos;</span><br></pre></td></tr></table></figure>
<p>  <img src="http://ww1.sinaimg.cn/large/789d050dly1frneb52jtyj213r0hagmx.jpg" alt=""></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><a href="https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions" target="_blank" rel="noopener">路径操作<code>path(path_expression)</code></a><br>和 xpath 类似，在 jq 中的 <code>path</code> 也是指从根到某个叶子属性的访问路径。<br>在 jq 中有两种表示路径的方式：数组表示法和属性表示法。</p>
<ul>
<li>属性表示法类似于我们在 <code>filter</code> 中访问某个属性值的方式，如<code>&#39;.a.b&#39;</code>。</li>
<li><p>数组表示法是将路径中的每一部分表示为数组的一个元素。</p>
</li>
<li><p>jq 提供了一个内置函数 <code>path</code> 用来实现路径从属性表示法到数组表示法的转换。</p>
</li>
<li><p>函数用来读取路径的值<code>getpath</code>, 设置路径的值<code>setpath</code>和删除路径<code>del</code>。<br>这三个函数对路径的处理并不一致。其中 <code>getpath</code> 和 <code>setpath</code> 只接受数组表示法的路径，而 <code>del</code> 函数只能正确处理属性表示法的路径。</p>
</li>
<li><p>函数<code>paths</code> 用来枚举可能存在的路径。<br>在没有参数的情况下，<code>paths</code> 函数将输出 JSON 数据中所有可能的路径。<code>paths</code> 函数可以接受一个过滤器，来只输出满足条件的路径。</p>
</li>
</ul>
</li>
<li><p>存在函数<code>contains</code>/<code>inside</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;contains(&#123;foo: 12, bar: [&#123;barp: 12&#125;]&#125;)&apos;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/789d050dly1frnf3k20vmj21380gzjsm.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;inside(&#123;&quot;foo&quot;: 12, &quot;bar&quot;:[1,2,&#123;&quot;barp&quot;:12, &quot;blip&quot;:13&#125;]&#125;)&apos;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/789d050dly1frnf7txdooj21390glmyf.jpg" alt=""></p>
</li>
<li><p>数组函数<br>jq 提供内置函数用于完成数组的扁平化<code>flatten</code>，反序<code>reverse</code>，排序<code>sort</code>, <code>sort_by</code>，比较<code>min</code>,<code>min_by</code>,<code>max</code>,<code>max_by</code>和查找<code>indices</code>,<code>index</code>和<code>rindex</code>。</p>
<p>其中<code>indices</code>函数的输入数据可以是数组，也可以是字符串。和<code>index</code> 函数不同的是，其结果是一个包含所有参数在输入数据中位置的数组，具体请参看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jq 中的数组函数</span><br><span class="line">#结果是[1,2,3,4]</span><br><span class="line">jq -nr &apos;[1,[2,3],4]|flatten&apos;</span><br><span class="line">#结果是[3,2,1]</span><br><span class="line">jq -nr &apos;[1,2,3]|reverse&apos;</span><br><span class="line">jq -nr &apos;[3,1,2]|sort&apos;</span><br><span class="line">jq -nr &apos;[&#123;&quot;a&quot;:1&#125;,&#123;&quot;a&quot;:2&#125;]|sort_by(.a)&apos;</span><br><span class="line">#下面两个表达式的结果都是[1,3]</span><br><span class="line">jq -nr &apos;&quot;abcb&quot;|indices(&quot;b&quot;)&apos;</span><br><span class="line">jq -nr &apos;[1,3,2,3]|indices(3)&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-jq-高级特性"><a href="#4-jq-高级特性" class="headerlink" title="4. jq 高级特性"></a>4. jq 高级特性</h3><p><a href="https://stedolan.github.io/jq/manual/#Advancedfeatures" target="_blank" rel="noopener">Advanced features</a></p>
<h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><p>Variable / Symbolic Binding Operator: <code>... as $identifier | ...</code></p>
<p>jq 内部支持两种变量的定义方式。第一种可以通过命令行参数<code>--arg</code>定义。这种方式用来从外部（如：shell)传入数据以供 filter 表达式使用。</p>
<p>第二种方式，在 jq 表达式内部，我们可以自己声明变量用来保存表达式的结果以供表达式其余部分使用。</p>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frnfk2glprj20d40cvt9y.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在下面的表达式中变量$arraylen 用来保存数组长度，整个表达式结果为 4</span><br><span class="line">jq -nr &apos;[1,2,3]|length as $arraylen|$arraylen+1&apos;</span><br><span class="line">#可以同时定义多个变量</span><br><span class="line">jq -nr &apos;&#123;&quot;firstname&quot;:&quot;tom&quot;,&quot;lastname&quot;:&quot;clancy&quot;&#125;|. as &#123;firstname:$fn, lastname:$ln&#125;|&quot;author is &quot;+$fn+&quot;*&quot;+$ln&apos;</span><br></pre></td></tr></table></figure>
<p>变量作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#会抛出 arraylen 没定义的异常</span><br><span class="line">jq -nr &apos;[1,2,3]|(length as $arraylen|$arraylen)|$arraylen+1&apos;</span><br><span class="line"></span><br><span class="line">#正常执行，结果为 4.</span><br><span class="line">jq -nr &apos;[1,2,3]|(length as $arraylen|$arraylen+1)&apos;</span><br><span class="line"></span><br><span class="line">#函数作用域。该表达式会抛出异常，因为变量$fn 是在函数 fname 中定义，对最后一个子表达式##来说，$fn 是不可见的。</span><br><span class="line">jq -nr &apos;&#123;&quot;firstname&quot;:&quot;tom&quot;,&quot;lastname&quot;:&quot;clancy&quot;&#125;|def fname:. as &#123;firstname:$fn, lastname:$ln&#125;|$fn; fname|$fn&apos;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2. 迭代器"></a>2. 迭代器</h4><ul>
<li><p>Reduce<br><code>reduce</code> 关键字用来通过运算将迭代器的所有值合并为一个值。<br>其调用形式为：<code>reduce &lt;itexp&gt; as $var (INIT; UPDATE)</code>。<br>其中，表达式 <code>itexp</code> 产生的迭代器被赋值给变量 <code>var</code>, <code>UPDATE</code> 是关于变量 <code>var</code> 的表达式。<code>INIT</code> 是该表达式的初始输入。相对于 <code>itexp</code> 结果中的每个元素，<code>UPDATE</code> 表达式被调用一次，计算出结果用作下一次 <code>UPDATE</code> 调用的输入。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;reduce .[] as $item (0; . + $item)&apos;</span><br></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/789d050dly1frnft16nluj213e0godgx.jpg" alt=""></p>
</li>
<li><p>foreach<br>关键字 <code>foreach</code> 的作用和 <code>reduce</code> 类似。<br>其调用形式为 <code>foreach EXP as $var (INIT; UPDATE; EXTRACT)</code>。<br>和 <code>reduce</code> 关键字不同的是，<code>foreach</code> 关键字的每次迭代是先调用 <code>UPDATE</code> 再调用 <code>EXTRACT</code>，并以一个迭代器保留每一次的中间结果。该迭代器最后作为整个表达式的结果输出。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;[foreach .[] as $item ([[],[]]; if $item == null then [[],.[0]] else [(.[0] + [$item]),[]] end; if $item == null then .[1] else empty end)]&apos;</span><br></pre></td></tr></table></figure>
<p> <img src="http://ww1.sinaimg.cn/large/789d050dly1frnfvubh7lj213j0gxq4l.jpg" alt=""></p>
</li>
</ul>
<ul>
<li>内置函数<code>limit(n;exp)</code>用来取得表达式<code>exp</code>结果的前 n 个值。</li>
</ul>
<ul>
<li>内置函数 <code>first</code>, <code>last</code> 和 <code>nth</code><br>这几个函数用来取迭代器中某一个特定的元素。既可以以函数的形式调用，也可以作为子表达式调用。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下面的表达式按照函数的形式调用 first,结果为 1</span><br><span class="line">jq -nr &apos;first([1,2,3]|.[])&apos;</span><br><span class="line">#下面的表达式以 filter 形式调用 first</span><br><span class="line">jq -nr &apos;[1,2,3]|.[]|first&apos;</span><br><span class="line">#nth 函数的使用，结果为 2</span><br><span class="line">jq -nr &apos;nth(1;[1,2,3]|.[])&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-函数定义"><a href="#3-函数定义" class="headerlink" title="3. 函数定义"></a>3. 函数定义</h4><p>jq 提供了定义函数的能力。<br>其语法规则为：<code>def funcname(arguments) : funcbodyexp;</code></p>
<p>定义函数时的规则:</p>
<pre><code>函数名或者参数列表后面应该跟冒号以标志函数体开始。
如果不需要参数，可以直接把整个参数列表部分省去。
参数列表中，参数之间以分号(&quot;;&quot;)分隔。
函数体只能是一个表达式，且表达式需以分号结尾
如果在表达式内部定义函数，整个子表达式部分不能只包含函数定义，否则 jq 会抛出语法错误
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;def addvalue(f): . + [f]; map(addvalue(.[0]))&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frnip16px8j21360h0dh7.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.json|jq &apos;def addvalue(f): f as $x | map(. + $x); addvalue(.[0])&apos;</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1frniqxkckcj213k0gzabj.jpg" alt="" title="" class="">
                <p></p>
            </figure>
<h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><p><a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html" target="_blank" rel="noopener">命令行 JSON 处理工具 jq 的使用介绍</a></p>
<p><a href="https://github.com/stedolan/jq/wiki/Cookbook" target="_blank" rel="noopener">Cookbook</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[YAML]]></title>
      <url>/2018/05/06/YAML/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><a href="http://yaml.org/" target="_blank" rel="noopener">官网</a></p>
<p><a href="http://yaml.org/spec/1.2/spec.html" target="_blank" rel="noopener">文档</a></p>
<pre><code>YAML Ain&apos;t Markup Language
YAML is a human friendly data serialization standard for all programming languages.
</code></pre><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p>
<p>YAML实质上是一种通用的数据串行化格式。</p>
<a id="more"></a>
<h3 id="YAML-JSON-与-XML"><a href="#YAML-JSON-与-XML" class="headerlink" title="YAML JSON 与 XML"></a><a href="https://blog.csdn.net/changong28/article/details/40662073" target="_blank" rel="noopener">YAML JSON 与 XML</a></h3><p>形同点：</p>
<p>1、YAML和JSON都是便于人阅读的数据交换格式。</p>
<p>不同点：</p>
<p>1、JSON设计主要在于简单和通用。YAML设计主要在于易于阅读和支持任何复杂的数据结构。</p>
<p>2、YAML可以视为JSON的超集，提供更易于阅读和复杂的信息模型。</p>
<p>3、每个JSON文件都是一个YAML文件，从JSON到YAML迁移是很容易的事情。</p>
<p>YAML主要是数据序列号语言。XXML设计是对SGML的向后兼容。XML有设计约束，而YAML没有。</p>
<h3 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h3><ul>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进时不允许使用Tab键，只允许使用空格。</p>
</li>
<li><p>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p>
</li>
</ul>
<p>注释<code>#</code></p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对象的一组键值对，使用冒号结构表示。</span></span><br><span class="line"><span class="attr">animal:</span> <span class="string">pets</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">animal:</span> <span class="string">'pets'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Yaml 也允许将所有键值对写成一个行内对象</span></span><br><span class="line"><span class="attr">hash:</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">Steve,</span> <span class="attr">foo:</span> <span class="string">bar</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">hash:</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'Steve'</span><span class="string">,</span> <span class="attr">foo:</span> <span class="string">'bar'</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一组连词线开头的行，构成一个数组</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Goldfish</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">[</span> <span class="string">'Cat'</span><span class="string">,</span> <span class="string">'Dog'</span><span class="string">,</span> <span class="string">'Goldfish'</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据结构的子成员是一个数组，则可以在该项下面缩进一个空格</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Goldfish</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">[</span> <span class="string">[</span> <span class="string">'Cat'</span><span class="string">,</span> <span class="string">'Dog'</span><span class="string">,</span> <span class="string">'Goldfish'</span> <span class="string">]</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数组也可以采用行内表示法</span></span><br><span class="line"><span class="attr">animal:</span> <span class="string">[Cat,</span> <span class="string">Dog]</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">animal:</span> <span class="string">[</span> <span class="string">'Cat'</span><span class="string">,</span> <span class="string">'Dog'</span> <span class="string">]</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="对象和数组复合结构"><a href="#对象和数组复合结构" class="headerlink" title="对象和数组复合结构"></a>对象和数组复合结构</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Ruby</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Perl</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">Python</span></span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line"><span class="attr"> YAML:</span> <span class="string">yaml.org</span></span><br><span class="line"><span class="attr"> Ruby:</span> <span class="string">ruby-lang.org</span></span><br><span class="line"><span class="attr"> Python:</span> <span class="string">python.org</span></span><br><span class="line"><span class="attr"> Perl:</span> <span class="string">use.perl.org</span></span><br><span class="line"></span><br><span class="line"> <span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"> <span class="string">&#123;</span> <span class="attr">languages:</span> <span class="string">[</span> <span class="string">'Ruby'</span><span class="string">,</span> <span class="string">'Perl'</span><span class="string">,</span> <span class="string">'Python'</span> <span class="string">],</span></span><br><span class="line"><span class="attr">  websites:</span></span><br><span class="line">   <span class="string">&#123;</span> <span class="attr">YAML:</span> <span class="string">'yaml.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Ruby:</span> <span class="string">'ruby-lang.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Python:</span> <span class="string">'python.org'</span><span class="string">,</span></span><br><span class="line"><span class="attr">     Perl:</span> <span class="string">'use.perl.org'</span> <span class="string">&#125;</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h3><p>纯量（scalars）：单个的、不可再分的值</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数值直接以字面量的形式表示</span></span><br><span class="line"><span class="attr">number:</span> <span class="number">12.30</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">number:</span> <span class="number">12.30</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#布尔值用true和false表示</span></span><br><span class="line"><span class="attr">isSet:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">isSet:</span> <span class="literal">true</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#null用~表示</span></span><br><span class="line"><span class="attr">parent:</span> <span class="string">~</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">parent:</span> <span class="literal">null</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间采用 ISO8601 格式</span></span><br><span class="line"><span class="attr">iso8601:</span> <span class="number">2001</span><span class="bullet">-12</span><span class="bullet">-14</span><span class="attr">t21:59:43.10-05:00</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">iso8601:</span> <span class="string">new</span> <span class="string">Date('2001-12-14t21:59:43.10-05:00')</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日期采用复合 iso8601 格式的年、月、日表示</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1976</span><span class="bullet">-07</span><span class="bullet">-31</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">date:</span> <span class="string">new</span> <span class="string">Date('1976-07-31')</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#YAML 允许使用两个感叹号，强制转换数据类型。</span></span><br><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">e:</span> <span class="string">'123'</span><span class="string">,</span> <span class="attr">f:</span> <span class="string">'true'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>字符串</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串默认不使用引号表示</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">这是一行字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">str:</span> <span class="string">'这是一行字符串'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果字符串之中包含空格或特殊字符，需要放在引号之中</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">'内容： 字符串'</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">str:</span> <span class="string">'内容: 字符串'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单引号和双引号都可以使用，双引号不会对特殊字符转义</span></span><br><span class="line"><span class="attr">s1:</span> <span class="string">'内容\n字符串'</span></span><br><span class="line"><span class="attr">s2:</span> <span class="string">"内容\n字符串"</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">s1:</span> <span class="string">'内容\\n字符串'</span><span class="string">,</span> <span class="attr">s2:</span> <span class="string">'内容\n字符串'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单引号之中如果还有单引号，必须连续使用两个单引号转义</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">'labor'</span><span class="string">'s day'</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">str:</span> <span class="string">'labor\'s day'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">这是一段</span></span><br><span class="line">  <span class="string">多行</span></span><br><span class="line">  <span class="string">字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">str:</span> <span class="string">'这是一段 多行 字符串'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行</span></span><br><span class="line"><span class="attr">this:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span><span class="attr">that:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string">  Bar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">转为 JavaScript 代码如下</span></span><br><span class="line"><span class="string">&#123; this: 'Foo\nBar\n', that: 'Foo Bar\n' &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#+表示保留文字块末尾的换行，-表示删除字符串末尾的换行</span></span><br><span class="line"><span class="string"></span><span class="attr">s1:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  Foo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">s2:</span> <span class="string">|+</span></span><br><span class="line">  <span class="string">Foo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">s3:</span> <span class="string">|-</span></span><br><span class="line">  <span class="string">Foo</span></span><br><span class="line"></span><br><span class="line"><span class="string">转为</span> <span class="string">JavaScript</span> <span class="string">代码如下</span></span><br><span class="line"><span class="string">&#123;</span> <span class="attr">s1:</span> <span class="string">'Foo\n'</span><span class="string">,</span> <span class="attr">s2:</span> <span class="string">'Foo\n\n\n'</span><span class="string">,</span> <span class="attr">s3:</span> <span class="string">'Foo'</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串之中可以插入 HTML 标记</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;p style="color: red"&gt;</span></span><br><span class="line"><span class="string">    段落</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">转为 JavaScript 如下</span></span><br><span class="line"><span class="string">&#123; message: '\n&lt;p style="color: red"&gt;\n  段落\n&lt;/p&gt;\n' &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。<br><code>&amp;</code>用来建立<code>锚点（defaults）</code>，<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="string">等同于下面的代码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">defaults:</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_development</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">myapp_test</span></span><br><span class="line"><span class="attr">  adapter:</span>  <span class="string">postgres</span></span><br><span class="line"><span class="attr">  host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- &amp;showell Steve</span><br><span class="line">- Clark</span><br><span class="line">- Brian</span><br><span class="line">- Oren</span><br><span class="line">- *showell</span><br><span class="line"></span><br><span class="line">转为 JavaScript 代码如下</span><br><span class="line">[ &apos;Steve&apos;, &apos;Clark&apos;, &apos;Brian&apos;, &apos;Oren&apos;, &apos;Steve&apos; ]</span><br></pre></td></tr></table></figure>
<h3 id="js-yaml"><a href="#js-yaml" class="headerlink" title="js-yaml"></a>js-yaml</h3><p><a href="http://nodeca.github.io/js-yaml/" target="_blank" rel="noopener">http://nodeca.github.io/js-yaml/</a><br><a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener">https://github.com/nodeca/js-yaml</a></p>
<h3 id="Java解析"><a href="#Java解析" class="headerlink" title="Java解析:"></a>Java解析:</h3><ul>
<li><a href="https://bitbucket.org/asomov/snakeyaml" target="_blank" rel="noopener">SnakeYAML</a>     # Java 5 / YAML 1.1</li>
<li><a href="http://yamlbeans.sourceforge.net/" target="_blank" rel="noopener">YamlBeans</a>     # To/from JavaBeans</li>
<li><a href="http://jyaml.sourceforge.net/" target="_blank" rel="noopener">JYaml</a>         # Original Java Implementation</li>
</ul>
<h3 id="snakeYAML"><a href="#snakeYAML" class="headerlink" title="snakeYAML"></a><a href="https://bitbucket.org/asomov/snakeyaml/overview" target="_blank" rel="noopener">snakeYAML</a></h3><p><a href="https://bitbucket.org/asomov/snakeyaml/wiki/Documentation" target="_blank" rel="noopener">文档</a></p>
<p>SnakeYAML is a YAML processor for the Java Virtual Machine.</p>
<h3 id="Fastjson-API"><a href="#Fastjson-API" class="headerlink" title="Fastjson API"></a><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">Fastjson API</a></h3><p>Fastjson是一个Java语言编写的JSON处理器。</p>
<p><a href="https://blog.csdn.net/hongwangzhang/article/details/51260879" target="_blank" rel="noopener">FastJSON 简介及其Map/JSON/String 互转</a></p>
<p>参考资料</p>
<p><a href="http://weyo.me/pages/techs/yaml-for-java/" target="_blank" rel="noopener">Yaml for Java</a></p>
<p><a href="https://www.cnblogs.com/skywang12345/p/3310835.html" target="_blank" rel="noopener">HashMap详细介绍(源码解析)和使用示例</a></p>
<p><a href="https://blog.csdn.net/f80407515/article/details/78775452" target="_blank" rel="noopener">mac版jdk安装及版本切换</a></p>
<p><a href="https://www.w3cschool.cn/maven/d29q1ht9.html" target="_blank" rel="noopener">Maven仓库</a></p>
<p><a href="https://www.w3cschool.cn/gradle/3miy1htt.html" target="_blank" rel="noopener">Gradle</a></p>
<p>映射到JavaBean：</p>
<p><a href="https://www.jianshu.com/p/dd4bb7305ccf" target="_blank" rel="noopener">snakeyaml读取yaml配置文件</a></p>
<p><a href="https://blog.csdn.net/top_code/article/details/55101219#t1" target="_blank" rel="noopener">使用SnakeYAML读取yaml配置文件</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方文档的demo</span></span><br><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import org.junit.Test;</span></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadExampleTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        String document = <span class="string">"\n- Hesperiidae\n- Papilionidae\n- Apatelodidae\n- Epiplemidae"</span>;</span><br><span class="line">        <span class="comment">//converts a YAML document to a Java object</span></span><br><span class="line">        List&lt;String&gt; list = (List&lt;String&gt;) yaml.load(document);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        assertEquals(<span class="string">"[Hesperiidae, Papilionidae, Apatelodidae, Epiplemidae]"</span>, list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoadFromString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        String document = <span class="string">"hello: 25"</span>;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Map&lt;String, Integer&gt; map = (Map&lt;String, Integer&gt;) yaml.load(document);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(map.get(<span class="string">"hello"</span>));</span><br><span class="line">        <span class="comment">//Map -&gt; JSON</span></span><br><span class="line">        String json = JSON.toJSONString(map,<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="string">"&#123;hello=25&#125;"</span>, map.toString());</span><br><span class="line">        assertEquals(Integer.valueOf(<span class="number">25</span>), map.get(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoadFromStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"src/test/resources/utf-8.txt"</span>));</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        Object data = yaml.load(input);</span><br><span class="line">        assertEquals(<span class="string">"this is a utf-8.txt file"</span>, data);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        data = yaml.load(<span class="keyword">new</span> ByteArrayInputStream(<span class="string">"test2"</span>.getBytes(<span class="string">"UTF-8"</span>)));</span><br><span class="line">        assertEquals(<span class="string">"test2"</span>, data);</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoadManyDocuments</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream input = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">                <span class="keyword">new</span> File(<span class="string">"src/test/resources/example.yaml"</span>));</span><br><span class="line">        Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object data : yaml.loadAll(input)) &#123;</span><br><span class="line">            System.out.println(data);</span><br><span class="line">            String json = JSON.toJSONString(data, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(json);</span><br><span class="line">            assertNotNull(data);</span><br><span class="line">            assertTrue(data.toString().length() &gt; <span class="number">1</span>);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        assertEquals(<span class="number">3</span>, counter);</span><br><span class="line">        input.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[terminal、shell、tty、console]]></title>
      <url>/2018/05/01/terminal%E3%80%81shell%E3%80%81tty%E3%80%81console/</url>
      <content type="html"><![CDATA[<h3 id="无关本文比较的TTY"><a href="#无关本文比较的TTY" class="headerlink" title="无关本文比较的TTY"></a>无关本文比较的TTY</h3><blockquote>
<p>TTY is a toolbox for developing beautiful command line clients in Ruby<br>with a fluid interface for gathering input, querying terminal<br>properties and displaying information.</p>
</blockquote>
<p><a href="https://github.com/piotrmurach/tty" target="_blank" rel="noopener">github</a><br><a href="http://piotrmurach.github.io/tty/" target="_blank" rel="noopener">官网</a></p>
<hr>
<p><strong>但此处比较的不是这个RUBY命令行工具。</strong></p>
<p><a href="https://blog.csdn.net/on_1y/article/details/20203963" target="_blank" rel="noopener">控制台，终端，tty，shell等概念的区别</a></p>
<p><a href="https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con" target="_blank" rel="noopener">What is the exact difference between a ‘terminal’, a ‘shell’, a ‘tty’ and a ‘console’?</a></p>
<p><a href="https://www.zhihu.com/question/21711307" target="_blank" rel="noopener">终端，Shell，“tty”和控制台（console）有什么区别？</a></p>
<p>(以下内容皆从上述链接中复制粘贴整理所得，侵删致歉)</p>
<blockquote>
<p><strong>A terminal is at the end of an electric wire, a shell is the home of a turtle, tty is a strange abbreviation and a console is a kind of cabinet.</strong></p>
</blockquote>
<p>In unix terminology, the short answer is that</p>
<p><code>terminal</code> = <code>tty</code> = text input/output environment（文本的输入输出环境）<br><code>console</code> = physical terminal（物理终端）<br><code>shell</code> = command line interpreter(命令行解释器)</p>
<h3 id="Teleprinter（TTY）-amp-Terminal"><a href="#Teleprinter（TTY）-amp-Terminal" class="headerlink" title="Teleprinter（TTY）&amp; Terminal"></a>Teleprinter（TTY）&amp; Terminal</h3><a id="more"></a>
<p><a href="https://en.wikipedia.org/wiki/Teleprinter" target="_blank" rel="noopener">电传打字机TTY</a></p>
<blockquote>
<p>A teleprinter (teletypewriter, Teletype or TTY) is an<br>electromechanical typewriter that can be used to send and receive<br>typed messages through various communications channels, in both<br>point-to-point and point-to-multipoint configurations.</p>
</blockquote>
<p>The name “terminal” came from the electronic point of view, and the name “console” from the furniture point of view. Very early in unix history, electronic keyboards and displays became the norm for terminals.</p>
<p><code>终端（terminal）</code>这个名字是从电子的观点来看的，而<code>控制台(console)</code>是从设备的角度来看的。<br>在UNIX历史的极早期阶段，电子键盘和显示器就已经是一种规范的<code>终端</code>。</p>
<p>a tty is a particular kind of device file which implements a number of additional commands (ioctls) beyond read and write.<br>tty在读写控制外实现特殊命令。</p>
<p><strong>terminal is synonymous with tty.</strong><br>通常意义上终端是tty同义词。</p>
<p>Some ttys are <strong>provided by the kernel on behalf of a hardware device</strong>, for example with the input coming from the keyboard and the output going to a text mode screen, or with the input and output transmitted over a serial line. Other ttys, sometimes called pseudo(伪)-ttys, are <strong>provided (through a thin kernel layer) by programs called terminal emulators(模拟器)</strong>, such as Xterm (running in the X Window System), Screen (which provides a layer of isolation between a program and another terminal), Ssh (which connects a terminal on one machine with programs on another machine), Expect (for scripting terminal interactions), etc.</p>
<p>有的tty由（软件）内核来代替硬件设备，比如从键盘发送过来的input，以及发送到文本模式的屏幕上的output，或者在串行线上传输的input/output流。还有一种tty——有时候叫做伪tty（pseudo-ttys）的，它是由叫做”终端模拟器“的程序提供的（通过一个中间层），这种tty例如Xterm（运行在X window系统上），Screen（在一个程序和另一个终端之间提供了中间层），SSH（在另一台电脑上，通过程序连接另一台电脑上的终端），Expect（用脚本和终端交互）。</p>
<p>The word terminal can also have a more traditional meaning of a device through which one interacts with a computer, typically with a keyboard and display. For example an X terminal is a kind of thin client, a special-purpose computer whose only purpose is to drive a keyboard, display, mouse and occasionally other human interaction peripherals（外围交互设备）, with the actual applications running on another, more powerful computer.</p>
<p><code>terminal</code>这个词通常也有一个更加传统的意思，表示一台能够用来和电脑交互的设备——通常有显示器和键盘。<br>比如一个X terminal，它唯一的作用就是驱动键盘，显示器，鼠标，（偶尔还有）别的外围交互设备；而实际上程序是泡在另外一台更加强大的计算机上的。</p>
<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><blockquote>
<p>A console is generally a terminal in the physical sense that is by some definition the primary terminal（主终端） directly connected to a machine. The console appears to the operating system as a (kernel-implemented) tty. On some systems, such as Linux and FreeBSD, the console appears as several ttys (special key combinations switch between these ttys); just to confuse matters, the name given to each particular tty can be “console”, ”virtual console”, ”virtual terminal”, and other variations.</p>
</blockquote>
<p>控制台通常是物理意义上的终端，其通过某种定义直接连接到机器的主终端。<br>在一些操作系统（比如Linux和FreeBSD）上console一般有好几个tty（用特定的组合键能够在这些tty之间切换）。有时候这些命名让人混乱，比如操作系统可能把那些tty叫做”console“ ”virtual console“ ”virtual terminal“之类的。</p>
<p><a href="https://askubuntu.com/q/14284/1059" target="_blank" rel="noopener">Why is a Virtual Terminal “virtual”, and what/why/where is the “real” Terminal?</a></p>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><blockquote>
<p>A shell is the primary interface that users see when they log in, whose primary purpose is to start other programs. (I don’t know whether the original metaphor is that the shell is the home environment for the user, or that the shell is what other programs are running in.)</p>
</blockquote>
<p><code>shell</code>，作为用户登录系统时看到的主界面，它主要的用处就是启动别的程序。（我不确定原来的比喻义是指shell是用户的home环境，还是说shell是其他程序在里面跑的环境）</p>
<p>In unix circles, <strong>shell has specialized to mean a command-line shell</strong>, centered around entering the name of the application one wants to start, followed by the names of files or other objects that the application should act on, and pressing the Enter key. Other types of environments don’t use the word “shell”; for example, window systems involve “window managers” and “desktop environments”, not a “shell”.</p>
<p>在UNIX圈里，<strong>shell 特指命令行shell</strong>（并且围绕这这样的描述：  “输入你想要运行的应用名字，后面跟着参数，并按回车键。”） 其他类型的环境并不使用“shell”这个词，比如说窗口系统涉及了”窗口管理器“(window managers) 和”桌面环境“(desktop environments)，但并不使用”shell“这个词。</p>
<p>There are many different unix shells. Popular shells for interactive use include Bash (the default on most Linux installations), zsh (which emphasizes power and customizability) and fish (which emphasizes simplicity).</p>
<p>比较流行的交互式shell包括bash（大多数Linux发行版的默认选择） zsh（重视功能和可定制性） 还有fish（以简单为主旨）。</p>
<p>In unix system administration, <strong>a user’s shell is the program that is invoked when they log in</strong>. Normal user accounts have a command-line shell, but users with restricted access may have a restricted shell or some other specific command (e.g. for file-transfer-only accounts).</p>
<p>在UNIX系统管理中，一个用户的shell是那个在登录的时候被调用的程序。普通用户账户也拥有命令行shell，受限的用户（比如仅用于传输文件的账户）可能拥有一个受限的shell，或者只能运行特定命令的shell。</p>
<h3 id="tasks-of-terminal-and-shell"><a href="#tasks-of-terminal-and-shell" class="headerlink" title="tasks of terminal and shell"></a>tasks of terminal and shell</h3><ul>
<li><p><strong>Input</strong>: the <code>terminal</code> converts keys into control sequences (e.g. <code>Left</code> →<br><code>\e[D</code>). The <code>shell</code> converts control sequences into commands (e.g. <code>\e[D</code><br>→ <code>backward-char</code>).<br>终端把键盘操作转换成控制序列,shell再转换控制序列为命令</p>
</li>
<li><p>Line editing, input history and completion are provided by the <code>shell</code>.<br>The terminal may provide its own line editing, history and completion instead, and only send a line to the shell when it’s ready to be executed. The only common terminal that operates in this way is M-x shell in Emacs.<br>行编辑（line editon）中，输入历史和输入补全功能是shell提供的。<br>终端有时候会在它自己的行编辑功能中提供输入历史和输入补全功能，并且在命令要执行时通过line发送到shell中。唯一这样做的主流terminal就是Emacs里的M-x。</p>
</li>
<li><p>Output: the <code>shell</code> emits instructions such as “display foo”, “switch<br>the foreground color to green”, “move the cursor to the next line”,<br>etc. The <code>terminal</code> acts on these instructions.<br>输出：shell发出指令，而终端就响应这些指令。</p>
</li>
<li><p>The prompt is purely a <code>shell</code> concept.<br>命令提示符是纯粹的shell概念。</p>
</li>
<li><p>The <code>shell</code> never sees the output of the commands it runs (unless<br>redirected). Output history (scrollback) is purely a <code>terminal</code><br>concept.<br>shell永远看不到它所运行的命令的输出（除非重定向），输出历史（回滚）仅仅是个终端上的概念。</p>
</li>
<li><p>Inter-application copy-paste is provided by the <code>terminal</code> (usually<br>with the mouse or key sequences such as Ctrl+Shift+V or<br>Shift+Insert). The <code>shell</code> may have its own internal copy-paste<br>mechanism as well (e.g. Meta+W and Ctrl+Y).<br>应用程序之间的复制粘贴是由终端提供的（通常用鼠标，或者组合键，比如Ctrl+SHift+V 或Shift+Insert）。 Shell可能有它自己的内部复制粘贴机制（比如Meta+Y，Ctrl+Y）。</p>
</li>
<li><p>Job control (launching programs in the background and managing them)<br>is mostly performed by the <code>shell</code>. However, it’s the terminal that<br>handles key combinations like Ctrl+C to kill the foreground job and<br>Ctrl+Z to suspend it.<br>作业控制（在后台启动程序，并且管理这些程序）主要是由shell执行。不过，是由终端来处理组合键的（比如Ctrl+C 杀死前台程序，或者Ctrl+Z终止任务运行）。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Red Hat]]></title>
      <url>/2018/05/01/Red%20Hat/</url>
      <content type="html"><![CDATA[<h3 id="1-yum安装"><a href="#1-yum安装" class="headerlink" title="1. yum安装"></a>1. yum安装</h3><pre><code>This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.  
</code></pre><p>以下全部引用自：<br><a href="https://blog.csdn.net/qq_34182808/article/details/80345476" target="_blank" rel="noopener">Redhat7中yum安装以及问题解决办法(YUM和wget都无法使用的情况下)</a></p>
<p>解决：</p>
<h4 id="1-检查系统环境"><a href="#1-检查系统环境" class="headerlink" title="1. 检查系统环境"></a>1. 检查系统环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>
<h4 id="2-检查yum包安装情况"><a href="#2-检查yum包安装情况" class="headerlink" title="2. 检查yum包安装情况"></a>2. 检查yum包安装情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep yum</span><br></pre></td></tr></table></figure>
<h4 id="3-绝对不能先删除系统自带的yum包"><a href="#3-绝对不能先删除系统自带的yum包" class="headerlink" title="3. 绝对不能先删除系统自带的yum包"></a>3. 绝对不能先删除系统自带的yum包</h4><h4 id="4-先安装wget"><a href="#4-先安装wget" class="headerlink" title="4. 先安装wget"></a>4. 先安装wget</h4><p>yum安装不上就只能手动下载传上去了</p>
<h4 id="5-删除系统自带的yum包"><a href="#5-删除系统自带的yum包" class="headerlink" title="5. 删除系统自带的yum包"></a>5. 删除系统自带的yum包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep yum|xargs rpm -e --nodeps（不检查依赖，直接删除rpm包）  </span><br><span class="line">rpm -qa |grep yum （查询确认）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="6-下载yum安装包"><a href="#6-下载yum安装包" class="headerlink" title="6. 下载yum安装包"></a>6. 下载yum安装包</h4><p><a href="http://mirrors.163.com/centos/7/os/x86_64/Packages/" target="_blank" rel="noopener">下载地址：Index of /centos/7/os/x86_64/Packages/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/python-iniparse-0.4-9.el7.noarch.rpm  </span><br><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/python-urlgrabber-3.10-8.el7.noarch.rpm  </span><br><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-3.4.3-158.el7.centos.noarch.rpm  </span><br><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm  </span><br><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm  </span><br><span class="line">wget http://mirrors.163.com/centos/7/os/x86_64/Packages/yum-utils-1.1.31-45.el7.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="7-安装yum包"><a href="#7-安装yum包" class="headerlink" title="7. 安装yum包"></a>7. 安装yum包</h4><p>无视冲突强行安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--force 即使覆盖属于其它包的文件也强迫安装  </span><br><span class="line">--nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装。  </span><br><span class="line">rpm -ivh --force --nodeps yum*  最终的强制安装指令</span><br></pre></td></tr></table></figure>
<h4 id="8-配置163源"><a href="#8-配置163源" class="headerlink" title="8. 配置163源"></a>8. 配置163源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo=<span class="string">"http://mirrors.163.com/.help/CentOS6-Base-163.repo"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/vindak/article/details/7830547" target="_blank" rel="noopener">Linux vi全局替换方法</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">更改文件中的“<span class="variable">$releasever</span>”为“7”，“RPM-GPG-KEY-CentOS-6”为“RPM-GPG-KEY-CentOS-7”</span><br><span class="line">:%s/<span class="variable">$releasever</span>/7/ge   </span><br><span class="line">:%s/RPM-GPG-KEY-CentOS-6/RPM-GPG-KEY-CentOS-7/ge</span><br></pre></td></tr></table></figure></p>
<p>更改后文件示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS-Base.repo  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the  </span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and  </span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates  </span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the   </span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"></span><br><span class="line">[base]  </span><br><span class="line">name=CentOS-7 - Base - 163.com  </span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/os/<span class="variable">$basearch</span>/  </span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=os  </span></span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates   </span></span><br><span class="line">[updates]  </span><br><span class="line">name=CentOS-7 - Updates - 163.com  </span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/updates/<span class="variable">$basearch</span>/  </span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=updates  </span></span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful  </span></span><br><span class="line">[extras]  </span><br><span class="line">name=CentOS-7 - Extras - 163.com  </span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/extras/<span class="variable">$basearch</span>/  </span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=extras  </span></span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages  </span></span><br><span class="line">[centosplus]  </span><br><span class="line">name=CentOS-7 - Plus - 163.com  </span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/centosplus/<span class="variable">$basearch</span>/  </span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=centosplus  </span></span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=0  </span><br><span class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7  </span><br><span class="line"></span><br><span class="line"><span class="comment">#contrib - packages by Centos Users  </span></span><br><span class="line">[contrib]  </span><br><span class="line">name=CentOS-7 - Contrib - 163.com  </span><br><span class="line">baseurl=http://mirrors.163.com/centos/7/contrib/<span class="variable">$basearch</span>/  </span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=7&amp;arch=$basearch&amp;repo=contrib  </span></span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=0  </span><br><span class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure></p>
<h4 id="9-清除缓存"><a href="#9-清除缓存" class="headerlink" title="9. 清除缓存"></a>9. 清除缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean all   <span class="comment">#清理yum缓存，使设置生效  </span></span><br><span class="line">yum makecache  <span class="comment">#将服务器上的软件包信息缓存到本地,以提高搜索安装软件的速度</span></span><br></pre></td></tr></table></figure>
<h3 id="2-Docker-CE-安装"><a href="#2-Docker-CE-安装" class="headerlink" title="2. Docker CE  安装"></a>2. Docker CE  安装</h3><p>以下全部引用自：<br><a href="https://jsharkc.github.io/2017/01/15/CentOS7%E5%AE%89%E8%A3%85Docker/" target="_blank" rel="noopener">Centos7 安装 Docker-CE 社区版</a></p>
<h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<h4 id="2-配置镜像库"><a href="#2-配置镜像库" class="headerlink" title="2. 配置镜像库"></a>2. 配置镜像库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; yum-config-manager \</span><br><span class="line">     --add-repo \</span><br><span class="line">     https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">&gt; yum-config-manager --enable docker-ce-edge</span><br></pre></td></tr></table></figure>
<p>也可改为国内镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>若要禁止edge版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --disable docker-ce-edge</span><br></pre></td></tr></table></figure>
<h4 id="3-删除老版本docker"><a href="#3-删除老版本docker" class="headerlink" title="3. 删除老版本docker"></a>3. 删除老版本docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; yum list docker</span><br><span class="line"></span><br><span class="line">Installed Packages</span><br><span class="line">docker.x86_64                      2:1.12.6-28.git1398f24.el7.centos                      @extras</span><br><span class="line">&gt; sudo yum erase docker.x86_64</span><br><span class="line">Removed:</span><br><span class="line">  docker.x86_64 2:1.12.6-28.git1398f24.el7.centos</span><br><span class="line">&gt; sudo yum list container-selinux-2.12-2.gite7096ce.el7.noarch</span><br><span class="line"></span><br><span class="line">&gt; sudo yum erase container-selinux.noarch</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; yum list installed | grep docker</span><br><span class="line">docker-client.x86_64                   2:1.12.6-28.git1398f24.el7.centos</span><br><span class="line">docker-common.x86_64                   2:1.12.6-28.git1398f24.el7.centos</span><br><span class="line">&gt; sudo yum erase -y docker-client.x86_64</span><br><span class="line">&gt; sudo yum erase -y docker-common.x86_64</span><br><span class="line"></span><br><span class="line">&gt; sudo yum remove docker \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  container-selinux \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<h4 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4. 安装docker"></a>4. 安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum makecache fast</span><br><span class="line"></span><br><span class="line">&gt; sudo yum install docker-ce</span><br></pre></td></tr></table></figure>
<p>如果生产系统需要稳定版本, 需要<code>yum list</code>进行查询. 但<code>yum list</code>只会显示二进制包, 加上<code>.x86_64</code>会显示包含源码包的全部的包。<code>sort -r</code>会按版本倒序排序.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; yum list docker-ce.x86_64  --showduplicates |sort -r</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line"> * extras: mirror.bit.edu.cn</span><br><span class="line">docker-ce.x86_64            17.05.0.ce-1.el7.centos             docker-ce-edge</span><br><span class="line">docker-ce.x86_64            17.04.0.ce-1.el7.centos             docker-ce-edge</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"> * base: mirror.bit.edu.cn</span><br></pre></td></tr></table></figure>
<p>第二列是版本号. el7表示centos7. 第三列是库名.</p>
<p>安装指定版本: <code>sudo yum install docker-ce-</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum install docker-ce-17.03.1.ce-1.el7.centos</span><br><span class="line">Installed:</span><br><span class="line">  docker-ce.x86_64 0:17.03.1.ce-1.el7.centos</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  docker-ce-selinux.noarch 0:17.05.0.ce-1.el7.centos</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>
<h4 id="5-如果要删除"><a href="#5-如果要删除" class="headerlink" title="5. 如果要删除"></a>5. 如果要删除</h4><p>删除 docker-ce 版和镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo yum remove docker-ce</span><br><span class="line">&gt; sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></p>
<h4 id="6-启动Docker"><a href="#6-启动Docker" class="headerlink" title="6. 启动Docker"></a>6. 启动Docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo systemctl start docker</span><br><span class="line">&gt; docker run hello-world</span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">78445dd45222: Pull complete</span><br><span class="line">Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure>
<h4 id="7-非root用户使用docker"><a href="#7-非root用户使用docker" class="headerlink" title="7. 非root用户使用docker"></a>7. 非root用户使用docker</h4><p>将需要使用 docker 的用户加入 docker 用户组</p>
<p>建立 docker 组：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure></p>
<p>将当前用户加入 docker 组：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8-docker自启动与禁止"><a href="#8-docker自启动与禁止" class="headerlink" title="8. docker自启动与禁止"></a>8. docker自启动与禁止</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<p>禁止自启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> docker</span><br></pre></td></tr></table></figure></p>
<h3 id="3-node-js安装"><a href="#3-node-js安装" class="headerlink" title="3. node.js安装"></a>3. node.js安装</h3><h4 id="1-通过包管理器安装"><a href="#1-通过包管理器安装" class="headerlink" title="1. 通过包管理器安装"></a>1. 通过包管理器安装</h4><p><a href="http://nodejs.cn/download/package-manager/" target="_blank" rel="noopener">通过包管理器安装 Node.js</a></p>
<p><a href="https://github.com/nodesource/distributions#rpm" target="_blank" rel="noopener">NodeSource Node.js Binary Distributions</a></p>
<p>Run as root on RHEL, CentOS or Fedora:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup | bash -</span><br></pre></td></tr></table></figure>
<p>Then install, as root:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nodejs</span><br></pre></td></tr></table></figure></p>
<p>Optional: install build tools</p>
<p>To compile and install native addons from npm you may also need to install build tools:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++ make</span><br><span class="line"><span class="comment"># or: yum groupinstall 'Development Tools'</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs npm</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-nvm-安装"><a href="#2-使用-nvm-安装" class="headerlink" title="2. 使用 nvm 安装"></a>2. 使用 nvm 安装</h4><p><a href="https://segmentfault.com/a/1190000007135306" target="_blank" rel="noopener">centos 使用 nvm 安装 nodejs</a></p>
<h5 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1. 安装 nvm"></a>1. 安装 nvm</h5><p><a href="https://www.liquidweb.com/kb/how-to-install-nvm-node-version-manager-for-node-js-on-centos-7/" target="_blank" rel="noopener">How to Install NVM (Node Version Manager) for Node.js on CentOS 7</a></p>
<p><a href="https://segmentfault.com/a/1190000007134786" target="_blank" rel="noopener">安装最新版git</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/cnpm/nvm/master/install.sh | bash</span><br><span class="line"><span class="comment"># or： curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span></span><br></pre></td></tr></table></figure>
<p>重启 shell ，输入 <code>nvm --version</code> 可以查看当前 nvm 的版本</p>
<h5 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h5><p>nvm使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<p>查看可安装版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>
<p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install v4.6.0</span><br><span class="line"></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure></p>
<p>查看当前已经安装的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>
<p>切换版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v4.6.0</span><br></pre></td></tr></table></figure></p>
<p>设置默认版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default v4.6.0</span><br></pre></td></tr></table></figure></p>
<h3 id="4-linux删除工具"><a href="#4-linux删除工具" class="headerlink" title="4. linux删除工具"></a>4. linux删除工具</h3><p><a href="https://www.ibm.com/developerworks/cn/linux/1311_caoyq_linuxdelete/index.html" target="_blank" rel="noopener">使用 Linux 安全删除工具</a></p>
<p><a href="https://github.com/andreafrancia/trash-cli" target="_blank" rel="noopener">trash-cli - Command Line Interface to FreeDesktop.org Trash</a><br>防止误删文件</p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">easy_install trash-cli</span><br><span class="line"><span class="comment">#or: yum install -y trash-cli</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">From sources</span><br><span class="line">System-wide installation:</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/andreafrancia/trash-cli.git</span><br><span class="line"><span class="built_in">cd</span> trash-cli</span><br><span class="line">sudo python setup.py install</span><br><span class="line">User-only installation:</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/andreafrancia/trash-cli.git</span><br><span class="line"><span class="built_in">cd</span> trash-cli</span><br><span class="line">python setup.py install --user</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installed /usr/lib/python2.7/site-packages/trash_cli-0.17.1.14_r0-py2.7.egg</span><br></pre></td></tr></table></figure>
<h4 id="2-替代-rm命令"><a href="#2-替代-rm命令" class="headerlink" title="2. 替代 rm命令"></a>2. 替代 rm命令</h4><p><a href="https://www.2daygeek.com/rm-command-to-move-files-to-trash-can-rm-alias/" target="_blank" rel="noopener">Make “rm” Command To Move The Files To “Trash Can” Instead Of Removing Them Completely</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Create a <span class="built_in">alias</span> on .bashrc file.</span><br><span class="line"><span class="built_in">alias</span> rm=”trash-put”</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h4 id="3-命令"><a href="#3-命令" class="headerlink" title="3. 命令"></a>3. 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">trash-put  xxx        将文件或目录移入回收站</span><br><span class="line"></span><br><span class="line">trash-empty     清空回收站</span><br><span class="line"></span><br><span class="line">trash-list         列出回收站中的文件</span><br><span class="line"></span><br><span class="line">restore-trash      还原回收站中的文件</span><br><span class="line"></span><br><span class="line">trash-rm  xxx         删除回首站中的单个文件</span><br></pre></td></tr></table></figure>
<h3 id="5-ssh链接服务器"><a href="#5-ssh链接服务器" class="headerlink" title="5. ssh链接服务器"></a>5. ssh链接服务器</h3><p><a href="https://console.bluemix.net/docs/infrastructure/ssh-keys/how-do-i-connect-redhat-server-ssh.html#-ssh-redhat-" target="_blank" rel="noopener">Connecting to a RedHat server with SSH</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i <span class="string">"xxx.pem证书文件"</span> 服务器地址</span><br></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/q/1010000006670515" target="_blank" rel="noopener">ssh: The authenticity of host ‘hostname’ can’t be established</a></p>
<p>使用ssh连接远程主机时加上<code>-o StrictHostKeyChecking=no</code>的选项，去掉对主机的验证检查</p>
<h3 id="6-ssh链接github"><a href="#6-ssh链接github" class="headerlink" title="6. ssh链接github"></a>6. ssh链接github</h3><p>以下引用自：<br><a href="https://blog.csdn.net/wzq793957419/article/details/68067204" target="_blank" rel="noopener">Centos 7 使用git 用 ssh 连接github服务器</a></p>
<p>生成ssh密钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>复制内容到github的<code>SSH and GPG keys</code>里</p>
<p>测试能否链接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>
<p><code>ls</code>后看到新增的<code>known_hosts</code>文件</p>
<h3 id="7-Linux后台命令-nohup"><a href="#7-Linux后台命令-nohup" class="headerlink" title="7. Linux后台命令 nohup"></a>7. Linux后台命令 nohup</h3><p><a href="https://www.cnblogs.com/hanybblog/p/6485441.html" target="_blank" rel="noopener">Linux nohup用法</a></p>
<p><a href="https://blog.csdn.net/liuyanfeier/article/details/62422742" target="_blank" rel="noopener">linux后台执行命令：&amp;和nohup</a></p>
<p>nohup不挂起( no hang up)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &amp;</span><br></pre></td></tr></table></figure></p>
<p>nohup成功后还需要按终端上键盘任意键退回到shell输入命令窗口，然后通过在shell中输入exit来退出终端。</p>
<p><code>jobs</code>查看在后台运行的命令，<code>jobs -l</code>查看pid。</p>
<h3 id="8-查询端口号占用并清除"><a href="#8-查询端口号占用并清除" class="headerlink" title="8. 查询端口号占用并清除"></a>8. 查询端口号占用并清除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> pid</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go]]></title>
      <url>/2018/04/25/Go/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wangshubo1989/article/details/73784907" target="_blank" rel="noopener">https://blog.csdn.net/wangshubo1989/article/details/73784907</a></p>
<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><a href="https://github.com/golang/go/wiki/NonEnglish" target="_blank" rel="noopener">wiki</a></p>
<p><a href="https://studygolang.com/" target="_blank" rel="noopener">Go语言中文网</a></p>
<p><a href="https://studygolang.com/pkgdoc" target="_blank" rel="noopener">Golang标准库文档</a></p>
<p><a href="http://zh-golang.appspot.com/doc/" target="_blank" rel="noopener">Go 编程语言</a> - Chinese Translation of tip.golang.org</p>
<p><a href="https://books.studygolang.com/gopl-zh/" target="_blank" rel="noopener">Go语言圣经（中文版）</a></p>
<a id="more"></a>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>在 Go 程序中，一行代表一个语句结束</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 当前程序的包名// 当前程序的包名</span></span><br><span class="line"> packagepackage main</span><br><span class="line"></span><br><span class="line"> main  <span class="comment">// 导入其他包// 导入其他包</span></span><br><span class="line"> importimport  ..  <span class="string">"fmt"</span><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 常量定义// 常量定义</span></span><br><span class="line"> constconst PI  PI ==  <span class="number">3.143</span><span class="number">.14</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局变量的声明和赋值// 全局变量的声明和赋值</span></span><br><span class="line"> varvar name  name ==  <span class="string">"gopher"</span><span class="string">"gopher"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一般类型声明// 一般类型声明</span></span><br><span class="line"><span class="keyword">type</span> newType  <span class="keyword">type</span> newType intint</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结构的声明// 结构的声明</span></span><br><span class="line"><span class="keyword">type</span> gopher  <span class="keyword">type</span> gopher structstruct&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接口的声明// 接口的声明</span></span><br><span class="line"><span class="keyword">type</span> golang  <span class="keyword">type</span> golang interfaceinterface&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由main函数作为程序入口点启动// 由main函数作为程序入口点启动</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="title">func</span> <span class="title">main</span><span class="params">()</span><span class="params">()</span></span>  &#123;&#123;</span><br><span class="line">         PrintlnPrintln((<span class="string">"Hello World!"</span><span class="string">"Hello World!"</span>))</span><br><span class="line"> &#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="可见性规则"><a href="#可见性规则" class="headerlink" title="可见性规则"></a>可见性规则</h3><p>Go语言中，使用大小写来决定该常量、变量、类型、接口、结构或函数是否可以被外部包所调用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数名首字母小写即为 private :</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getId</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数名首字母大写即为 public :</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>go 1.9版本对于数字类型，无需定义int及float32、float64，系统会自动识别。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> C, c <span class="keyword">int</span> <span class="comment">//声明变量</span></span><br><span class="line">	C = <span class="number">1</span></span><br><span class="line">A:</span><br><span class="line">	<span class="keyword">for</span> C &lt; <span class="number">100</span> &#123;</span><br><span class="line">		C++ <span class="comment">//C=1不能写入for这里就不能写入</span></span><br><span class="line">		<span class="keyword">for</span> c = <span class="number">2</span>; c &lt; C; c++ &#123;</span><br><span class="line">			<span class="keyword">if</span> C%c == <span class="number">0</span> &#123;</span><br><span class="line">				<span class="keyword">goto</span> A <span class="comment">//若发现因子则不是素数</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(C, <span class="string">"是素数"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	add_func := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(add_func())</span><br><span class="line">	fmt.Println(add_func())</span><br><span class="line">	fmt.Println(add_func())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包使用方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x1, x2 <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		i++</span><br><span class="line">		<span class="keyword">return</span> i, x1 + x2</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VLC插件实现监控和RTSP视频播放]]></title>
      <url>/2018/04/23/VLC%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7%E5%92%8CRTSP%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<p><a href="https://software.intel.com/en-us/html5/hub/blogs/using-the-getusermedia-api-with-the-html5-video-and-canvas-elements/" target="_blank" rel="noopener">Using The Getusermedia API With The HTML5 Video And Canvas Elements</a></p>
<p>配合海康威视摄像头使用<br>不兼容chrome</p>
<p>参考链接</p>
<p><a href="https://www.cnblogs.com/eoooxy/p/6401554.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">海康威视 嵌入到web页面相关问题</a></p>
<p><a href="https://www.cnblogs.com/shusheng/archive/2011/12/15/2288649.html" target="_blank" rel="noopener">使用海康摄像头实现实时监控</a></p>
<p><a href="https://www.cnblogs.com/ry-93-dream/articles/7554919.html" target="_blank" rel="noopener">在Chrome上通过vlc插件播放rtsp和rtmp视频</a></p>
<p><a href="https://blog.csdn.net/hsany330/article/details/73457324?locationNum=2&amp;fps=1" target="_blank" rel="noopener">利用vlc插件将IP摄像头嵌入网页和网页播放RTSP流</a></p>
<p><a href="https://www.cnblogs.com/jhlong/p/5848490.html" target="_blank" rel="noopener">web网页中使用vlc插件播放相机rtsp流视频</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux查询命令]]></title>
      <url>/2018/04/01/Linux%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><a href="https://www.linux-man.cn/" target="_blank" rel="noopener">Linux命令手册</a></p>
<p>wget -qO- bench.sh | bash                一键测试linux性能<br>cat /proc/cpuinfo                查看cpu<br>ifconfig               查看网卡信息<br>free -m                查看内存<br>df -lh                     查看硬盘信息<br>wget <a href="http://cachefly.cachefly.net/100mb.test" target="_blank" rel="noopener">http://cachefly.cachefly.net/100mb.test</a> &amp;&amp; rm -f 100mb.test        端口速度测试<br>smartctl -A /dev/sda         查看硬盘使用时间 (提前安装smartmontools)<br>finger                查看用户信息<br>chkconfig –list                查看服务<br>ps aux            查看系统任务<br>top                实时查看资源占用<br>rpm -qa                查看所有安装的软件包<br>vnstat                查看流量 -l 实时 -d 每天 -m 每月<br>netstat -lunt                查看端口信息<br>iptables -L                查看防火墙<br>getconf LONG_BIT                查看是32位还是64位<br>whereis [name]                查找软件的路径</p>
]]></content>
      
        
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源和跨域（五）HTML5、iframe和其他方式跨域]]></title>
      <url>/2018/03/21/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%EF%BC%88%E4%BA%94%EF%BC%89HTML5%E3%80%81iframe%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E5%BC%8F%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p>整理来源,侵删致歉<br><a href="https://www.cnblogs.com/vajoy/p/4295825.html#it5" target="_blank" rel="external">浅谈WEB跨域的实现（前端向）</a><br><a href="https://www.cnblogs.com/sdcs/p/8484905.html" target="_blank" rel="external">前端解决跨域的九种方法</a></p>
<p>###1. Cross-document messaging</p>
<p><a href="https://html.spec.whatwg.org/#crossDocumentMessages" target="_blank" rel="external">crossDocumentMessages</a></p>
<p>在 Cross-document messaging 中，我们可以使用 postMessage 方法和 onmessage 事件来实现不同域之间的通信，其中postMessage用于实时向接收信息的页面发送消息，其语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  otherWindow.postMessage(message, targetOrigin);</div><div class="line"></div><div class="line">otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。</div><div class="line">message: 所要发送的数据，string类型。</div><div class="line">targetOrigin: 允许通信的域的url，“*”表示不作限制。</div></pre></td></tr></table></figure>
<p>我们可以在父页面中嵌入不同域的子页面（iframe实现，而且常规会把它隐藏掉），在子页面调用 postMessage 方法向父页面发送数据：</p>
<p>父页面（<a href="http://localhost:10847/sop/a.html）：" target="_blank" rel="external">http://localhost:10847/sop/a.html）：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;postMessage&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;iframe style=&quot;display:none;&quot; id=&quot;ifr&quot; src=&quot;http://127.0.0.1:10847/sop/b.html&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    window.addEventListener(&apos;message&apos;, function(event)&#123;</div><div class="line">        // 通过origin属性判断消息来源地址</div><div class="line">        if (event.origin == &apos;http://127.0.0.1:10847&apos;) &#123;</div><div class="line">            alert(event.data);    // 弹出从子页面post过来的信息</div><div class="line">        &#125;</div><div class="line">    &#125;, false);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>子页面（<a href="http://127.0.0.1:10847/sop/b.html）：" target="_blank" rel="external">http://127.0.0.1:10847/sop/b.html）：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;子页面&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var ifr = window.parent;  //获取父窗体</div><div class="line">    var targetOrigin = &apos;http://localhost:10847&apos;;  // 若写成 http://127.0.0.1:10847 则将无法执行postMessage</div><div class="line">    ifr.postMessage(&apos;这是传递给a.html的信息&apos;, targetOrigin);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="2-WebSocket"><a href="#2-WebSocket" class="headerlink" title="2. WebSocket"></a>2. WebSocket</h3><p>具体实现 <a href="https://www.cnblogs.com/vajoy/p/4295825.html" target="_blank" rel="external">https://www.cnblogs.com/vajoy/p/4295825.html</a></p>
<p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。<br><a href="http://socket.io/" target="_blank" rel="external">socket.io</a>很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容（例如替换为Flash Socket/Comet）。</p>
<h3 id="3-document-domain-iframe跨域"><a href="#3-document-domain-iframe跨域" class="headerlink" title="3. document.domain + iframe跨域"></a>3. document.domain + iframe跨域</h3><a id="more"></a>
<p>该方法只适合主域相同但子域不同的情况，比如 a.com 和 www.a.com，我们只需要给这两个页面都加上一句 document.domain = ‘a.com’ ，就可以在其中一个页面嵌套另一个页面，然后进行窗体间的交互。</p>
<p><a href="https://segmentfault.com/a/1190000007997430" target="_blank" rel="external">iframe跨域POST无刷新提交</a></p>
<p>父窗口(<a href="http://www.demo.com/a.html" target="_blank" rel="external">http://www.demo.com/a.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://child.demo.com/b.html&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    document.domain = &apos;demo.com&apos;;</div><div class="line">    var user = &apos;admin&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>子窗口：(<a href="http://child.demo.com/b.html" target="_blank" rel="external">http://child.demo.com/b.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    document.domain = &apos;demo.com&apos;;</div><div class="line">    // 获取父窗口中变量</div><div class="line">    alert(&apos;get js data from parent ---&gt; &apos; + window.parent.user);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="4-location-hash-iframe跨域"><a href="#4-location-hash-iframe跨域" class="headerlink" title="4. location.hash + iframe跨域"></a>4. location.hash + iframe跨域</h3><p>利用url地址改变但不刷新页面的特性（在url： <a href="http://a.com#hello" target="_blank" rel="external">http://a.com#hello</a> 中的 ‘#hello’ 就是location.hash，改变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递）和iframe，我们可以实现跨域传递简单信息。</p>
<p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>
<p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p>
<p>a.html：(<a href="http://www.demo1.com/a.html" target="_blank" rel="external">http://www.demo1.com/a.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.demo2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var iframe = document.getElementById(&apos;iframe&apos;);</div><div class="line"></div><div class="line">    // 向b.html传hash值</div><div class="line">    setTimeout(function() &#123;</div><div class="line">        iframe.src = iframe.src + &apos;#user=admin&apos;;</div><div class="line">    &#125;, 1000);</div><div class="line">    </div><div class="line">    // 开放给同域c.html的回调方法</div><div class="line">    function onCallback(res) &#123;</div><div class="line">        alert(&apos;data from c.html ---&gt; &apos; + res);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>b.html：(<a href="http://www.demo2.com/b.html" target="_blank" rel="external">http://www.demo2.com/b.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.demo1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var iframe = document.getElementById(&apos;iframe&apos;);</div><div class="line"></div><div class="line">    // 监听a.html传来的hash值，再传给c.html</div><div class="line">    window.onhashchange = function () &#123;</div><div class="line">        iframe.src = iframe.src + location.hash;</div><div class="line">    &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>c.html：(<a href="http://www.demo1.com/c.html" target="_blank" rel="external">http://www.demo1.com/c.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    // 监听b.html传来的hash值</div><div class="line">    window.onhashchange = function () &#123;</div><div class="line">        // 再通过操作同域a.html的js回调，将结果传回</div><div class="line">        window.parent.parent.onCallback(&apos;hello: &apos; + location.hash.replace(&apos;#user=&apos;, &apos;&apos;));</div><div class="line">    &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="5-window-name-iframe跨域"><a href="#5-window-name-iframe跨域" class="headerlink" title="5. window.name + iframe跨域"></a>5. window.name + iframe跨域</h3><p>窗体的name值在页面跳转后依旧存在、保持原值（即使跳转的页面不同域），并且可以支持非常长的 name 值（2MB）。</p>
<p>如果我们在a页面需要和不同域的b页面通信，我们可以现在a页面嵌入b页面，待b页面有数据要传递时，把数据附加到b页面窗口的window.name上，然后把窗口跳转到一个和a页面同域的c页面，这样a就能轻松获取到内嵌窗体（地址已由跨域的b变为同域的c）的window.name了（如果需要，获取到数据后再把c跳转到b，并重复循环前面的步骤，同时a页面以setInterval的形式来达到轮询的效果）。</p>
<p>a.html：(<a href="http://www.demo1.com/a.html" target="_blank" rel="external">http://www.demo1.com/a.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var proxy = function(url, callback) &#123;</div><div class="line">    var state = 0;</div><div class="line">    var iframe = document.createElement(&apos;iframe&apos;);</div><div class="line"></div><div class="line">    // 加载跨域页面</div><div class="line">    iframe.src = url;</div><div class="line"></div><div class="line">    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</div><div class="line">    iframe.onload = function() &#123;</div><div class="line">        if (state === 1) &#123;</div><div class="line">            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据</div><div class="line">            callback(iframe.contentWindow.name);</div><div class="line">            destoryFrame();</div><div class="line"></div><div class="line">        &#125; else if (state === 0) &#123;</div><div class="line">            // 第1次onload(跨域页)成功后，切换到同域代理页面</div><div class="line">            iframe.contentWindow.location = &apos;http://www.demo1.com/proxy.html&apos;;</div><div class="line">            state = 1;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    document.body.appendChild(iframe);</div><div class="line"></div><div class="line">    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</div><div class="line">    function destoryFrame() &#123;</div><div class="line">        iframe.contentWindow.document.write(&apos;&apos;);</div><div class="line">        iframe.contentWindow.close();</div><div class="line">        document.body.removeChild(iframe);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 请求跨域b页面数据</div><div class="line">proxy(&apos;http://www.demo2.com/b.html&apos;, function(data)&#123;</div><div class="line">    alert(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>proxy.html：(<a href="http://www.demo1.com/proxy" target="_blank" rel="external">http://www.demo1.com/proxy</a>….<br>中间代理页，与a.html同域，内容为空即可。</p>
<p>b.html：(<a href="http://www.demo2.com/b.html" target="_blank" rel="external">http://www.demo2.com/b.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    window.name = &apos;This is demo2 data!&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="6-nginx代理跨域"><a href="#6-nginx代理跨域" class="headerlink" title="6. nginx代理跨域"></a>6. nginx代理跨域</h3><p>具体示例：<a href="https://www.cnblogs.com/sdcs/p/8484905.html" target="_blank" rel="external">https://www.cnblogs.com/sdcs/p/8484905.html</a></p>
<p><strong>nginx配置解决iconfont跨域</strong><br>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  add_header Access-Control-Allow-Origin *;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>nginx反向代理接口跨域</strong><br>通过nginx配置一个代理服务器（域名与demo1相同，端口不同）做跳板机，反向代理访问demo2接口，并且可以顺便修改cookie中demo信息，方便当前域cookie写入，实现跨域登录。</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源和跨域（四）跨域资源共享 CORS]]></title>
      <url>/2018/03/20/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%20CORS/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS" target="_blank" rel="external">跨來源資源共用（CORS）</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP访问控制（CORS）</a></p>
<pre><code>跨來源資源共用（Cross-Origin Resource Sharing (CORS)）是一種使用額外 HTTP 標頭令目前瀏覽網站的使用者代理取得存取其他來源（網域）伺服器特定資源權限的機制。當使用者代理請求一個不是目前文件來源——例如來自於不同網域（domain）、通訊協定（protocol）或通訊埠（port）的資源時，會建立一個跨來源 HTTP 請求（cross-origin HTTP request）。
</code></pre><p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>
<h3 id="1-Access-Control-Allow-Origin"><a href="#1-Access-Control-Allow-Origin" class="headerlink" title="1. Access-Control-Allow-Origin"></a>1. Access-Control-Allow-Origin</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin" target="_blank" rel="external">Access-Control-Allow-Origin</a></p>
<p>Access-Control-Allow-Origin 响应头指定了该响应的资源是否被允许与给定的origin共享。</p>
<p>如需允许所有资源都可以访问您的资源，设置：</p>
<pre><code>Access-Control-Allow-Origin: *
</code></pre><p>如需允许<a href="https://developer.mozilla.org访问您的资源，设置：" target="_blank" rel="external">https://developer.mozilla.org访问您的资源，设置：</a></p>
<pre><code>Access-Control-Allow-Origin: https://developer.mozilla.org
</code></pre><h3 id="2-简单请求（simple-request）和非简单请求（not-so-simple-request）"><a href="#2-简单请求（simple-request）和非简单请求（not-so-simple-request）" class="headerlink" title="2. 简单请求（simple request）和非简单请求（not-so-simple request）"></a>2. 简单请求（simple request）和非简单请求（not-so-simple request）</h3><p>1、简单的COR请求，它可以直接向外域资源发起请求。它必须仅仅包含简单的方法和头。</p>
<p>2、如果COR包含复杂的方法和头，它需要发出预检验（Preflight）请求，它先向资源服务器发出一个OPTIONS方法、包含“Origin”头的请求。该回复可以控制COR请求的方法，HTTP头以及验证等信息。只有该请求获得允许以后，才会发起真实的外域请求。</p>
<p>只要同时满足以下两大条件，就属于简单请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">（1) 请求方法是以下三种方法之一：</div><div class="line">HEAD</div><div class="line">GET</div><div class="line">POST</div><div class="line"></div><div class="line">（2）HTTP的头信息不超出以下几种字段：</div><div class="line">Accept</div><div class="line">Accept-Language</div><div class="line">Content-Language</div><div class="line">Last-Event-ID</div><div class="line">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</div></pre></td></tr></table></figure></p>
<h3 id="3-详细使用"><a href="#3-详细使用" class="headerlink" title="3. 详细使用"></a>3. 详细使用</h3><a id="more"></a>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<p>服务器端示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">require(&quot;http&quot;).createServer(function(req,res)&#123;</div><div class="line">  //报头添加Access-Control-Allow-Origin标签，值为特定的URL或“*”</div><div class="line">  //“*”表示允许所有域访问当前域</div><div class="line">  res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);  </div><div class="line">  res.end(&quot;OK&quot;);</div><div class="line">&#125;).listen(1234);</div></pre></td></tr></table></figure></p>
<p>客户端示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;CORS&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;jq.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div&gt;catching data...&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    $.ajax(&#123;</div><div class="line">        url:&quot;http://127.0.0.1:1234/&quot;,</div><div class="line">        success:function(data)&#123;</div><div class="line">            $(&quot;div&quot;).text(data)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>CORS默认只支持GET/POST这两种http请求类型，如果要开启PUT/DELETE之类的方式，需要在服务端在添加一个”Access-Control-Allow-Methods”报头标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">require(&quot;http&quot;).createServer(function(req,res)&#123;</div><div class="line">  res.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1&quot;);</div><div class="line">  res.setHeader(</div><div class="line">    &quot;Access-Control-Allow-Methods&quot;,</div><div class="line">    &quot;PUT, GET, POST, DELETE, HEAD, PATCH&quot;</div><div class="line">  );</div><div class="line">  res.end(req.method+&quot; &quot;+req.url);</div><div class="line">&#125;).listen(1234);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源和跨域（三）Fetch API]]></title>
      <url>/2018/03/17/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%EF%BC%88%E4%B8%89%EF%BC%89Fetch%20API/</url>
      <content type="html"><![CDATA[<p><a href="https://www.w3ctech.com/topic/854" target="_blank" rel="external">This API is So Fetching</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="external">使用 Fetch</a></p>
<p><a href="https://fetch.spec.whatwg.org/#simple-header" target="_blank" rel="external">Fetch Living Standard</a></p>
<p><a href="https://github.com/github/fetch" target="_blank" rel="external">兼容性window.fetch polyfill</a></p>
<h3 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h3><pre><code>fetch(url/request[, options])
var request = new Request(url/request[, options]);
</code></pre><p><strong>fetch</strong> 是全局量 window 的一个方法<br><strong>request</strong> 是一个 Request 对象，Request 参数和 fetch 参数相同<br><strong>options</strong> 是一个对象，主要key 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">method: GET/POST等</div><div class="line">headers: 一个普通对象，或者一个 Headers 对象</div><div class="line">body: 传递给服务器的数据，可以是字符串/Buffer/Blob/FormData，如果方法是 GET/HEAD，则不能有此参数</div><div class="line">mode: cors / no-cors / same-origin， 是否跨域，默认是 no-cors</div><div class="line">credentials: omit / same-origin / include</div><div class="line">cache: default / no-store / reload / no-cache / force-cache / only-if-cached</div><div class="line">redirect: follow / error / manual</div><div class="line">referrer: no-referrer / client / 或者一个url</div><div class="line">referrerPolicy: no-referrer / no-referrer-when-downgrade / origin /  origin-when-cross-origin / unsafe-url</div><div class="line">integrity: 资源完整性验证</div><div class="line">fetch() 返回一个 promise，所以这么用</div></pre></td></tr></table></figure></p>
<p>fetch API 使用 Promises 来处理结果/回调</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对响应的简单处理</span></div><div class="line">fetch(<span class="string">'/some/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// 出错了;等价于 then 的第二个参数,但这样更直观 :(</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 链式处理,将异步变为类似单线程的写法: 高级用法.</span></div><div class="line">fetch(<span class="string">'/some/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="comment">//... 执行成功, 第1步...</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">returnedValue</span>) </span>&#123;</div><div class="line">    <span class="comment">// ... 执行成功, 第2步...</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// 中途任何地方出错...在此处理 :( </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-Headers"><a href="#2-Headers" class="headerlink" title="2. Headers"></a>2. Headers</h3><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个空的 Headers 对象,注意是Headers，不是Header</span></div><div class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers();</div><div class="line"></div><div class="line"><span class="comment">// 添加(append)请求头信息</span></div><div class="line">headers.append(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">headers.append(<span class="string">'X-My-Custom-Header'</span>, <span class="string">'CustomValue'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 判断(has), 获取(get), 以及修改(set)请求头的值</span></div><div class="line">headers.has(<span class="string">'Content-Type'</span>); <span class="comment">// true</span></div><div class="line">headers.get(<span class="string">'Content-Type'</span>); <span class="comment">// "text/plain"</span></div><div class="line">headers.set(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 删除某条请求头信息(a header)</span></div><div class="line">headers.delete(<span class="string">'X-My-Custom-Header'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建对象时设置初始化信息</span></div><div class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers(&#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</div><div class="line">    <span class="string">'X-My-Custom-Header'</span>: <span class="string">'CustomValue'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Headers对象方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">append(key, value)</div><div class="line">delete(key)</div><div class="line">entries()  返回一个遍历器，类似二维数组，每一个 key 和它对应的 value 构成一个数组</div><div class="line">get(key) 获取指定 key 的value，如果key被添加了多次，则返回第一次添加时的 value</div><div class="line">getAll(key) 返回 key 对应的所有 value，组成一个数组</div><div class="line">has(key)</div><div class="line">keys() 所有 key 组成的遍历器</div><div class="line">set(key, value) 更改 key 的值，如果 key 不存在，则相当于 append</div><div class="line">values() 所有 value 组成的遍历器</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个 Request 对象来包装请求头(Request Headers)</span></div><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">'/some-url'</span>, &#123;</div><div class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fetch(request).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="3-Request"><a href="#3-Request" class="headerlink" title="3. Request"></a>3. Request</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Request" target="_blank" rel="external">Request接口</a></p>
<pre><code>var request = new Request(url/request[, options]);
</code></pre><p>Request 对象表示一次 fetch 调用的请求信息。</p>
<p>属性（全部只读）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">method - 支持 GET, POST, PUT, DELETE, HEAD</div><div class="line">url - 请求的 URL</div><div class="line">headers - 对应的 Headers 对象</div><div class="line">referrer - 请求的 referrer 信息</div><div class="line">mode - 可以设置 cors, no-cors, same-origin</div><div class="line">credentials - 设置 cookies 是否随请求一起发送。可以设置: omit, same-origin</div><div class="line">redirect - follow, error, manual</div><div class="line">integrity - subresource 完整性值(integrity value)</div><div class="line">cache - 设置 cache 模式 (default, reload, no-cache)</div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">'/users.json'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>, </div><div class="line">    <span class="attr">mode</span>: <span class="string">'cors'</span>, </div><div class="line">    <span class="attr">redirect</span>: <span class="string">'follow'</span>,</div><div class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> Headers(&#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用!</span></div><div class="line">fetch(request).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>在 Request 对象创建完成之后, 所有的属性都变为只读属性。一个 Request 就代表一串流(stream), 如果想要传递给另一个 fetch 方法,则需要进行克隆（clone 方法）。</p>
<h3 id="4-Response"><a href="#4-Response" class="headerlink" title="4. Response"></a>4. Response</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response" target="_blank" rel="external">Response接口</a></p>
<pre><code>var response = new Response([body][, init])
</code></pre><p>Response 代表响应, fetch 的 then 方法接收一个 Response 实例。</p>
<p>属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">headers     //与响应相关联的 Headers 对象</div><div class="line">ok      //Boolean值,代表成功响应。status在 200 和 299 之间为 true</div><div class="line">redirected   //表示该Response是否来自一个重定向，如果是的话，它的URL列表将会有多个</div><div class="line">status  //状态码 (例如: 200, 404, 等等)</div><div class="line">statusText  //状态值(例如: OK)</div><div class="line">type    //类型 basic / cors / error / opaque</div><div class="line">url     //包含这个请求的URL</div><div class="line">bodyUsed  //存储一个Boolean判断主体是否已经被用于一个响应中</div><div class="line">useFinalURL  //Boolean 值, 代表 url 是否是最终 URL</div></pre></td></tr></table></figure></p>
<p>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">clone() - 创建一个新的 Response 克隆对象.</div><div class="line">error() - 返回一个新的,与网络错误相关的 Response 对象.</div><div class="line">redirect() - 重定向,使用新的 URL 创建新的 response 对象..</div><div class="line">arrayBuffer() - Returns a promise that resolves with an ArrayBuffer.</div><div class="line">blob() - 返回一个 promise, resolves 是一个 Blob.</div><div class="line">formData() - 返回一个 promise, resolves 是一个 FormData 对象.</div><div class="line">json() - 返回一个 promise, resolves 是一个 JSON 对象.</div><div class="line">text() - 返回一个 promise, resolves 是一个 USVString (text).</div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 service worker 测试中手动创建 response</span></div><div class="line"><span class="comment">// new Response(BODY, OPTIONS)</span></div><div class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> Response(<span class="string">'.....'</span>, &#123;</div><div class="line">    <span class="attr">ok</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">status</span>: <span class="number">404</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">'/'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// fetch 的 `then` 会传入一个 Response 对象</span></div><div class="line">fetch(<span class="string">'/'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">responseObj</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'status: '</span>, responseObj.status);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="5-处理-JSON响应"><a href="#5-处理-JSON响应" class="headerlink" title="5. 处理 JSON响应"></a>5. 处理 JSON响应</h3><p>封装了 <code>JSON.parse(jsonString)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'https://xxx.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123; </div><div class="line">    <span class="comment">// 转换为 JSON</span></div><div class="line">    <span class="keyword">return</span> response.json();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">    <span class="comment">// 现在, `j` 是一个 JavaScript object</span></div><div class="line">    <span class="built_in">console</span>.log(j); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="6-处理-Text-HTML响应"><a href="#6-处理-Text-HTML响应" class="headerlink" title="6. 处理 Text / HTML响应"></a>6. 处理 Text / HTML响应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/next/page'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> response.text();</div><div class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123; </div><div class="line">    <span class="comment">// &lt;!DOCTYPE ....</span></div><div class="line">    <span class="built_in">console</span>.log(text); </div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="7-处理Blob结果"><a href="#7-处理Blob结果" class="headerlink" title="7. 处理Blob结果"></a>7. 处理Blob结果</h3><pre><code>Blob表示二进制原始数据，一个Blob对象就是一个包含有只读原始数据的类文件对象。
</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">Blob</a><br><a href="File%20API">File API</a></p>
<p><strong>创建blob</strong></p>
<h4 id="1-通过构造函数"><a href="#1-通过构造函数" class="headerlink" title="1. 通过构造函数"></a>1. 通过构造函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var blob = new Blob(dataArr:Array&lt;any&gt;, opt:&#123;type:string&#125;);</div><div class="line">    </div><div class="line">//dataArray：数组，包含了要添加到Blob对象中的数据，数据可以是任意多个ArrayBuffer，ArrayBufferView， Blob，或者 DOMString对象。</div><div class="line">//opt：对象，用于设置Blob对象的属性（如：MIME类型）</div></pre></td></tr></table></figure>
<h4 id="2-通过Blob-slice"><a href="#2-通过Blob-slice" class="headerlink" title="2. 通过Blob.slice()"></a>2. 通过Blob.slice()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Blob.slice(start:number, end:number, contentType:string)</div><div class="line"></div><div class="line">\\start：开始索引，默认为0</div><div class="line">\\end：截取结束索引（不包括end）</div><div class="line">\\contentType：新Blob的MIME类型，默认为空字符串</div></pre></td></tr></table></figure>
<h4 id="3-通过canvas-toBlob"><a href="#3-通过canvas-toBlob" class="headerlink" title="3. 通过canvas.toBlob()"></a>3. 通过canvas.toBlob()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(blob);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>应用</strong><br><a href="https://www.cnblogs.com/hhhyaaon/p/5928152.html" target="_blank" rel="external">https://www.cnblogs.com/hhhyaaon/p/5928152.html</a></p>
<ol>
<li>通过Blob.slice方法，可以将大文件分片，轮循向后台提交各文件片段，即可实现文件的分片上传。</li>
<li>window.URL对象可以为Blob对象生成一个网络地址，结合a标签的download属性，可以实现点击url下载文件。</li>
<li>把图片转化为Blob对象，生成URL（URL.createObjectURL(blob)），来显示图片。</li>
</ol>
<p><strong>通过 fetch 加载图像或者其他二进制数据</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'flowers.jpg'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> response.blob();</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">imageBlob</span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>).src = URL.createObjectURL(imageBlob);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="8-提交表单数据-Posting-Form-Data"><a href="#8-提交表单数据-Posting-Form-Data" class="headerlink" title="8. 提交表单数据(Posting Form Data)"></a>8. 提交表单数据(Posting Form Data)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/submit'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">body</span>: <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">'comment-form'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//提交json数据</span></div><div class="line">fetch(<span class="string">'/submit-json'</span>, &#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">        <span class="attr">email</span>: <span class="built_in">document</span>.getElementById(<span class="string">'email'</span>).value</div><div class="line">        answer: <span class="built_in">document</span>.getElementById(<span class="string">'answer'</span>).value</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="9-跨域"><a href="#9-跨域" class="headerlink" title="9. 跨域"></a>9. 跨域</h3><p><a href="https://www.zhihu.com/question/47029864/answer/150069385" target="_blank" rel="external">https://www.zhihu.com/question/47029864/answer/150069385</a><br>如果服务器支持 CORS, 则在客户端设置相应的  <code>Access-Control-Allow-Origin</code>  即可得到数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let myHeaders = new Headers(&#123;</div><div class="line">    &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;,</div><div class="line">    &apos;Content-Type&apos;: &apos;text/plain&apos;</div><div class="line">&#125;);</div><div class="line">fetch(url, &#123;</div><div class="line">    method: &apos;GET&apos;,</div><div class="line">    headers: myHeaders,</div><div class="line">    mode: &apos;cors&apos;</div><div class="line">&#125;) .then((res) =&gt; &#123;</div><div class="line">    // TODO </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="10-在fetch中使用jsonp"><a href="#10-在fetch中使用jsonp" class="headerlink" title="10. 在fetch中使用jsonp"></a>10. 在fetch中使用jsonp</h3><p>JSONP only supports GET method, same as <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="external">fetch-jsonp</a>.</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://segmentfault.com/a/1190000007455901" target="_blank" rel="external">https://segmentfault.com/a/1190000007455901</a><br><a href="http://blog.csdn.net/renfufei/article/details/51494396" target="_blank" rel="external">http://blog.csdn.net/renfufei/article/details/51494396</a><br><a href="https://davidwalsh.name/fetch" target="_blank" rel="external">https://davidwalsh.name/fetch</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源和跨域（二）概念&JSONP]]></title>
      <url>/2018/03/16/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A6%82%E5%BF%B5&amp;JSONP/</url>
      <content type="html"><![CDATA[<h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><pre><code>同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同。
</code></pre><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="1-跨域类型"><a href="#1-跨域类型" class="headerlink" title="1. 跨域类型"></a>1. 跨域类型</h3><table>
<thead>
<tr>
<th>URL</th>
<th style="text-align:right">说明</th>
<th style="text-align:center">是否允许通信</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
</tr>
<tr>
<td><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:right">同一域名下</td>
<td style="text-align:center">允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/lab/a.js" target="_blank" rel="external">http://www.a.com/lab/a.js</a></td>
</tr>
<tr>
<td><a href="http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/script/b.js</a></td>
<td style="text-align:right">同一域名下不同文件夹</td>
<td style="text-align:center">允许</td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="external">http://www.a.com:8000/a.js</a></td>
</tr>
<tr>
<td><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:right">同一域名，不同端口</td>
<td style="text-align:center">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
</tr>
<tr>
<td><a href="https://www.a.com/b.js" target="_blank" rel="external">https://www.a.com/b.js</a></td>
<td style="text-align:right">同一域名，不同协议</td>
<td style="text-align:center">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
</tr>
<tr>
<td><a href="http://70.32.92.74/b.js" target="_blank" rel="external">http://70.32.92.74/b.js</a></td>
<td style="text-align:right">域名和域名对应ip</td>
<td style="text-align:center">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
</tr>
<tr>
<td><a href="http://script.a.com/b.js" target="_blank" rel="external">http://script.a.com/b.js</a></td>
<td style="text-align:right">主域相同，子域不同</td>
<td style="text-align:center">不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
</tr>
<tr>
<td><a href="http://a.com/b.js" target="_blank" rel="external">http://a.com/b.js</a></td>
<td style="text-align:right">同一域名，不同二级域名（同上）</td>
<td style="text-align:center">不允许（cookie这种情况下也不允许访问）</td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="external">http://www.cnblogs.com/a.js</a></td>
</tr>
<tr>
<td><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:right">不同域名</td>
<td style="text-align:center">不允许</td>
</tr>
</tbody>
</table>
<h3 id="2-跨域方案"><a href="#2-跨域方案" class="headerlink" title="2. 跨域方案"></a>2. 跨域方案</h3><p>顶级域名相同的可以通过domain.name来解决，即同时设置 domain.name = 顶级域名（如example.com）</p>
<p>document.domain + iframe</p>
<p>window.name + iframe</p>
<p>location.hash + iframe</p>
<p>window.postMessage()</p>
<h3 id="3-JSONP"><a href="#3-JSONP" class="headerlink" title="3. JSONP"></a>3. JSONP</h3><a id="more"></a>
<pre><code>JSON with Padding其本质是利用了&lt;script src=&quot;&quot;&gt;&lt;/script&gt;标签具有可跨域的特性，由服务端返回一个预先定义好的Javascript函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。
</code></pre><p><strong>只能以GET方式请求</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"></div><div class="line">    <span class="comment">// echo "alert('hello')";</span></div><div class="line"></div><div class="line">    $callBack = $_GET[<span class="string">'callback'</span>];</div><div class="line"></div><div class="line">    $arr = <span class="keyword">array</span>(</div><div class="line"></div><div class="line">        <span class="string">'name'</span> =&gt;<span class="string">'flower'</span> ,</div><div class="line"></div><div class="line">        <span class="string">'color'</span> =&gt;<span class="string">'red'</span> </div><div class="line"></div><div class="line">         );</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> $callBack.<span class="string">"("</span>.json_encode($arr).<span class="string">")"</span>;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>核心是通过script标签的src属性提交get请求</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">        function fn(data)&#123;</div><div class="line"></div><div class="line">            console.log(data);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'http://www.section02.com/seciton02_jsonP.php?callback=fn'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>区域1的页面_jsonP演示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-jQuery-的-ajax-使用JSONP"><a href="#4-jQuery-的-ajax-使用JSONP" class="headerlink" title="4. jQuery 的$.ajax() 使用JSONP"></a>4. jQuery 的$.ajax() 使用JSONP</h3><pre><code>方法当中集成了JSONP的实现，可以非常方便的实现跨域数据的访问。
</code></pre><p><code>dataType: &#39;jsonp&#39;</code> 设置dataType值为jsonp即开启跨域访问</p>
<p><code>jsonp</code> 可以指定服务端接收的参数的“key”值，默认为callback</p>
<p><code>jsonpCallback</code> 可以指定相应的回调函数，默认自动生成    </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'jquery/jquery-3.0.0.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>区域1的页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">'sendAjax()'</span> <span class="attr">value</span>=<span class="string">"jquery区域请求"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    function sendAjax()&#123;</div><div class="line"></div><div class="line">        $.ajax(&#123;</div><div class="line"></div><div class="line">            url:'http://www.section02.com/sectcion02_jqJsonp.php',</div><div class="line"></div><div class="line">            type:'post',</div><div class="line"></div><div class="line">            dataType: 'jsonp',</div><div class="line"></div><div class="line">            data:&#123;name:'itt'&#125;,</div><div class="line"></div><div class="line">            success:function(data)&#123;</div><div class="line"></div><div class="line">                console.log(data);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过$.getJSON(）实现跨域</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在地址中加上callback=?参数即可</span></div><div class="line">$.getJSON(<span class="string">"https://api.douban.com/v2/book/search?q=javascript&amp;count=1&amp;callback=?"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(data);</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[同源和跨域（一）Ajax]]></title>
      <url>/2018/03/15/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F%EF%BC%88%E4%B8%80%EF%BC%89Ajax/</url>
      <content type="html"><![CDATA[<h3 id="1-原生Ajax写法"><a href="#1-原生Ajax写法" class="headerlink" title="1. 原生Ajax写法"></a>1. 原生Ajax写法</h3><ol>
<li>建立XMLHTTPRequest对象</li>
<li>注册回调函数<br>当服务器回应我们了,我们想要执行什么逻辑</li>
<li>使用open方法设置和服务器端交互的基本信息<br>设置提交的网址,数据,post提交的一些额外内容</li>
<li>设置发送的数据，开始和服务器端交互<br>发送数据</li>
<li>更新界面<br>在注册的回调函数中,获取返回的数据,更新界面</li>
</ol>
<p><strong>示例代码:GET</strong> get的数据,直接在请求的url中添加即可</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="comment">// 创建XMLHttpRequest 对象</span></div><div class="line">  <span class="keyword">var</span> xml = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">  <span class="comment">// 设置跟服务端交互的信息</span></div><div class="line">  xml.open(<span class="string">'get'</span>,<span class="string">'01.ajax.php?name=fox'</span>);</div><div class="line">  xml.send(<span class="literal">null</span>);    <span class="comment">// get请求这里写null即可</span></div><div class="line"></div><div class="line">  <span class="comment">// 接收服务器反馈</span></div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 这步为判断服务器是否正确响应</span></div><div class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">          <span class="comment">// 打印响应内容</span></div><div class="line">          alert(xml.responseText);</div><div class="line">      &#125; </div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong>示例代码:POST</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="comment">// 异步对象</span></div><div class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">  <span class="comment">// 设置属性</span></div><div class="line">  xhr.open(<span class="string">'post'</span>, <span class="string">'02.post.php'</span> );</div><div class="line"></div><div class="line">  <span class="comment">// 如果想要使用post提交数据,必须添加</span></div><div class="line">  xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 将数据通过send方法传递</span></div><div class="line">  xhr.send(<span class="string">'name=fox&amp;age=18'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 发送并接受返回值</span></div><div class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 这步为判断服务器是否正确响应</span></div><div class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">         alert(xhr.responseText);</div><div class="line">       &#125; </div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="2-Ajax工具函数封装"><a href="#2-Ajax工具函数封装" class="headerlink" title="2. Ajax工具函数封装"></a>2. Ajax工具函数封装</h3><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建对象</span></div><div class="line">  <span class="keyword">var</span> xmlRequest ;</div><div class="line">  <span class="keyword">if</span> (XMLHttpRequest) &#123;</div><div class="line">      xmlRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">      xmlRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 格式化传入的数据为name=fox&amp;age=18这样的格式</span></div><div class="line">  <span class="keyword">var</span> formatStr = <span class="string">""</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> option.data)&#123;</div><div class="line">      <span class="comment">// 获取属性名,属性值,进行拼接</span></div><div class="line">      formatStr+=item;<span class="comment">// 属性名</span></div><div class="line">      formatStr+=<span class="string">"="</span>;<span class="comment">//等号</span></div><div class="line">      formatStr+=option.data[item];<span class="comment">//属性值</span></div><div class="line">      formatStr+=<span class="string">"&amp;"</span>;<span class="comment">//分隔符</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 去除最后一个&amp;</span></div><div class="line">  formatStr = formatStr.slice(<span class="number">0</span>,<span class="number">-1</span>);</div><div class="line"></div><div class="line">  <span class="comment">// open方法 如果是get方法,那么url之后需要添加数据</span></div><div class="line">  <span class="keyword">if</span>(option.method == <span class="string">"get"</span>)&#123;</div><div class="line">      option.url = option.url+<span class="string">"?"</span>+formatStr;</div><div class="line">      option.data = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 调用open方法</span></div><div class="line">  xmlRequest.open(option.method,option.url)</div><div class="line"></div><div class="line">  <span class="comment">// 如果是post设置HTTP协议头</span></div><div class="line">  <span class="keyword">if</span> (option.method==<span class="string">"post"</span>) &#123;</div><div class="line">      xmlRequest.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// send方法 这里的data已经是修改过的,如果使用的是get方法,那么data为null</span></div><div class="line">      xmlRequest.send(option.data);</div><div class="line"></div><div class="line">  <span class="comment">// 判断状态改变,调用方法</span></div><div class="line">  xmlRequest.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 这步为判断服务器是否正确响应</span></div><div class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">             option.success(这里的数据是ajax获取的);  </div><div class="line">     &#125; </div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-JQueryAjax使用"><a href="#3-JQueryAjax使用" class="headerlink" title="3. JQueryAjax使用"></a>3. JQueryAjax使用</h3><p><strong>格式化表单$(‘form’).serialize()</strong></p>
<pre><code>我们在向服务器提交数据时,如果使用的是Ajax需要手动将数据格式化name=fox&amp;age=18类似这样的格式,JQuery已经封装好了一个格式化数据的方法
</code></pre><p>语法:$(selector).serialize() 直接可以将form中拥有name属性的表单元素的字,进行格式化</p>
<p><strong>$.ajax({}) 方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">        <span class="attr">url</span>:<span class="string">'01.php'</span>,<span class="comment">//请求地址</span></div><div class="line">        data:<span class="string">'name=fox&amp;age=18'</span>,<span class="comment">//发送的数据</span></div><div class="line">        type:<span class="string">'GET'</span>,<span class="comment">//请求的方式</span></div><div class="line">        success:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;&#125;,<span class="comment">// 请求成功执行的方法</span></div><div class="line">        beforeSend:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;&#125;,<span class="comment">// 在发送请求之前调用,可以做一些验证之类的处理</span></div><div class="line">        error:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;<span class="built_in">console</span>.log(argument);&#125;,<span class="comment">//请求失败调用</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数节流&防抖]]></title>
      <url>/2018/03/03/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81&amp;%E9%98%B2%E6%8A%96/</url>
      <content type="html"><![CDATA[<h3 id="1-函数防抖（debounce）"><a href="#1-函数防抖（debounce）" class="headerlink" title="1.函数防抖（debounce）"></a>1.函数防抖（debounce）</h3><pre><code>连续的调用，停止t后才会执行该动作，若在这t内又调用此动作则将重新计算t
</code></pre><p><strong>场景案例1</strong>：</p>
<pre><code>监听 resize 事件，每缩小（或者放大）一次浏览器，实际上会触发多次，用户玩够了再执行
</code></pre><p><strong>解决方案</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo = debounce(resizeBox, <span class="number">1000</span>);</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'load resize'</span>, foo);</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeBox</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fullWidth = $(<span class="string">'body'</span>).width(),</div><div class="line">    maxWidth = <span class="number">800</span>;</div><div class="line">  <span class="keyword">if</span> (fullWidth &lt;= maxWidth) &#123;</div><div class="line">    $(<span class="string">'.full'</span>).width(fullWidth);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $(<span class="string">'.full'</span>).width(maxWidth);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景案例2</strong>：</p>
<pre><code>文本输入的验证（连续输入文字后发送 AJAX 请求进行验证，验证最后一次就好）
</code></pre><p><strong>解决方案</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo = debounce(checkInput, <span class="number">1000</span>);</div><div class="line">  $(<span class="string">'.input'</span>).on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    foo();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkInput</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 替换为异步请求，可减少请求次数</span></div><div class="line">  $(<span class="string">'.type'</span>).text($(<span class="string">'.input'</span>).val());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-函数节流（throttle）"><a href="#2-函数节流（throttle）" class="headerlink" title="2. 函数节流（throttle）"></a>2. 函数节流（throttle）</h3><pre><code>一个不间断的调用，每隔t，执行一次
</code></pre><a id="more"></a>
<p><strong>场景案例1</strong>：</p>
<pre><code>监听 resize 事件，每缩小（或者放大）一次浏览器，实际上会触发多次，周期性更新
</code></pre><p><strong>解决方案</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo = throttle(resizeBox, <span class="number">1000</span>);</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'load resize'</span>, foo);</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeBox</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fullWidth = $(<span class="string">'body'</span>).width(),</div><div class="line">    maxWidth = <span class="number">800</span>;</div><div class="line">  <span class="keyword">if</span> (fullWidth &lt;= maxWidth) &#123;</div><div class="line">    $(<span class="string">'.full'</span>).width(fullWidth);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $(<span class="string">'.full'</span>).width(maxWidth);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景案例2</strong>：</p>
<pre><code>文本输入的验证（连续输入文字后发送 AJAX 请求进行验证，周期性验证）
</code></pre><p><strong>解决方案</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> foo = throttle(checkInput, <span class="number">1000</span>);</div><div class="line">  $(<span class="string">'.input'</span>).on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    foo();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkInput</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 替换为异步请求，可减少请求次数</span></div><div class="line">  $(<span class="string">'.type'</span>).text($(<span class="string">'.input'</span>).val());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-相关资料："><a href="#3-相关资料：" class="headerlink" title="3. 相关资料："></a>3. 相关资料：</h3><p><a href="http://www.cnblogs.com/fsjohnhuang/p/4147810.html" target="_blank" rel="external">函数节流（throttle）与函数去抖（debounce）</a></p>
<p><a href="http://drupalmotion.com/article/debounce-and-throttle-visual-explanation" target="_blank" rel="external">函数节流与去抖的可视化</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 频率控制 返回函数连续调用时，fn 执行频率限定为每多少时间执行一次</div><div class="line"> * @param fn &#123;function&#125;  需要调用的函数</div><div class="line"> * @param delay  &#123;number&#125;    延迟时间，单位毫秒</div><div class="line"> * @param immediate  &#123;bool&#125; 给 immediate参数传递false 绑定的函数先执行，而不是delay后后执行。</div><div class="line"> * @param debounce &#123;bool&#125; 是否防抖动</div><div class="line"> * @return &#123;function&#125;实际调用函数</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay, immediate, debounce</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> curr = +<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">//当前时间</span></div><div class="line">    last_call = <span class="number">0</span>,</div><div class="line">    last_exec = <span class="number">0</span>,</div><div class="line">    timer = <span class="literal">null</span>,</div><div class="line">    diff, <span class="comment">//时间差</span></div><div class="line">    context, <span class="comment">//上下文</span></div><div class="line">    args,</div><div class="line">    exec = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      last_exec = curr;</div><div class="line">      fn.apply(context, args);</div><div class="line">    &#125;;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    curr = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    context = <span class="keyword">this</span>,</div><div class="line">      args = <span class="built_in">arguments</span>,</div><div class="line">      diff = curr - (debounce ? last_call : last_exec) - delay;</div><div class="line">    clearTimeout(timer);</div><div class="line">    <span class="keyword">if</span> (debounce) &#123;</div><div class="line">      <span class="keyword">if</span> (immediate) &#123;</div><div class="line">        timer = setTimeout(exec, delay);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt;= <span class="number">0</span>) &#123;</div><div class="line">        exec();</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (diff &gt;= <span class="number">0</span>) &#123;</div><div class="line">        exec();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (immediate) &#123;</div><div class="line">        timer = setTimeout(exec, -diff);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    last_call = curr;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 delay，fn 才会执行</div><div class="line"> * @param fn &#123;function&#125;  要调用的函数</div><div class="line"> * @param delay   &#123;number&#125;    空闲时间</div><div class="line"> * @param immediate  &#123;bool&#125; 给 immediate参数传递false 绑定的函数先执行，而不是delay后后执行。</div><div class="line"> * @return &#123;function&#125;实际调用函数</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay, immediate</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> throttle(fn, delay, immediate, <span class="literal">true</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6/ES2015语法及Babel]]></title>
      <url>/2018/02/28/ES6_ES2015%E8%AF%AD%E6%B3%95%E5%8F%8ABabel/</url>
      <content type="html"><![CDATA[<p>偶然在项目中看见，感觉是重要的内容，先了解下基本语法，等有空再深入学习。<br>babel迷之安装 一觉醒来打开webstorm发现装上了Σ(っ °Д °;)っ<br>File Watcher打开添加babel时programa一栏填写:</p>
<pre><code>$ProjectFileDir$/node_modules/.bin/babel
</code></pre><p>然后就能自动转码为ES5啦:)</p>
<h3 id="1-文档转换"><a href="#1-文档转换" class="headerlink" title="1. 文档转换"></a>1. 文档转换</h3><p>Babel的REPL在线编译器，将ES6代码转为ES5代码。<br><a href="https://babeljs.io/repl/" target="_blank" rel="external">https://babeljs.io/repl/</a></p>
<h3 id="2-ES6部分特性"><a href="#2-ES6部分特性" class="headerlink" title="2. ES6部分特性"></a>2. ES6部分特性</h3><ol>
<li><code>var</code>声明的内层变量会覆盖外层变量，而<code>let</code>提供块级作用域，变量只在代码块内有效。</li>
<li>当引用第三方库时声明的变量，用<code>const</code>来声明可以避免未来不小心重命名而导致出现bug</li>
<li>引入<code>Class</code>（类）概念，可以通过<code>extends</code>关键字实现继承。（这部分感觉有点像java）</li>
<li><code>arrow function箭头函数的</code>this<code>是继承外层代码块的</code>this`。</li>
<li><code>template string</code>，用反引号来标识起始，用<code>${}</code>来引用变量，而且所有的空格和缩进都会被保留在输出之中.</li>
<li><code>destructuring</code>解构:从数组和对象中提取值，对变量进行赋值。</li>
<li><code>default</code>默认值, <code>rest</code>语法(用Rest操作符以后，args参数就是一个数组了，任何操作数组的方法都可以直接对args使用)</li>
</ol>
<hr>
<p>电脑重装了，反正要重新配置环境，不如找个东西边学边装。就决定是你了，ES6！</p>
<ol>
<li>惯例安装nodejs以及express</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install express --save</div><div class="line">$ npm install body-parser --save</div><div class="line">$ npm install cookie-parser --save</div><div class="line">$ npm install multer --save</div><div class="line">$ npm list express</div></pre></td></tr></table></figure>
<p>途中出现第一个问题，<code>npm ERR! extraneous</code>，<a href="https://github.com/npm/npm/issues/10004#issuecomment-210710935，快捷方法是重装nodejs后用管理员模式安装&gt;_o" target="_blank" rel="external">https://github.com/npm/npm/issues/10004#issuecomment-210710935，快捷方法是重装nodejs后用管理员模式安装&gt;_o</a><br>第二个问题 <code>express command not found</code> ，解决方法<a href="https://stackoverflow.com/questions/23002448/express-command-not-found" target="_blank" rel="external">https://stackoverflow.com/questions/23002448/express-command-not-found</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g express-generator</div></pre></td></tr></table></figure></p>
<ol>
<li>gulp<br><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">文档</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ touch .babelrc</div><div class="line"></div><div class="line">$ touch gulpfile.babel.js</div></pre></td></tr></table></figure>
</li>
</ol>
<p>因为使用ES6语法，所以必须创建<code>gulpfile.babel.js</code>文件而不是<code>gulpfile.js</code></p>
<hr>
<p>然后又出现了很多问题，我就先去学习了gulp的详细用法，写了三篇文章总结。又学会了使用yeoman工具直接构建项目骨架。详细参见之前的博文。我发现webstorm里也可以直接选择yeoman构建，神器啊。<br>下面真的开始学习ES6语法了 O_&lt;</p>
<hr>
<p>参考阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">《ECMAScript 6 入门》</a></p>
<h3 id="1-let-amp-const"><a href="#1-let-amp-const" class="headerlink" title="1. let &amp; const"></a>1. let &amp; const</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<ol>
<li>块作用域（大括号内）第二个<code>console.log(i)</code>脱离了块作用域，于是只能输出1，2。</li>
<li>严格模式：ES5代码中存在<code>use strict</code>来启动文件采用严格模式，ES6中则强制开启。严格模式中变量未声明则不能引用，会报错。</li>
<li>使用let时不能重复定义变量。</li>
<li>使用const声明的常量不能修改。</li>
<li>第4点注意情况</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI =<span class="number">3.1415926</span>;   <span class="comment">//不能修改</span></div><div class="line"><span class="keyword">const</span> K =&#123;</div><div class="line">  <span class="attr">a</span>:<span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//K指向对象存储的指针，对象可变指针不变。</span></div><div class="line">K.b = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<h3 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2. 解构赋值"></a>2. 解构赋值</h3><a id="more"></a>
<p>代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a,b,rest;</div><div class="line">  [a,b]=[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">  <span class="built_in">console</span>.log(a,b);   <span class="comment">//1,2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a,b,rest;</div><div class="line">  [a,b,...rest]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">  <span class="built_in">console</span>.log(a,b,rest);  <span class="comment">//1,2,(4) [3, 4, 5, 6]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a,b;</div><div class="line">  (&#123;a,b&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)</div><div class="line">  <span class="built_in">console</span>.log(a,b);   <span class="comment">//1,2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a,b,c,rest;</div><div class="line">  [a,b]=[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">  <span class="built_in">console</span>.log(a,b,c);  <span class="comment">//1,2,undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a,b,c,rest;</div><div class="line">  [a,b,c=<span class="number">3</span>]=[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">  <span class="built_in">console</span>.log(a,b,c);   <span class="comment">//1,2,3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过解构赋值实现变量交换，不需要中间变量。</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a=<span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> b=<span class="number">2</span>;</div><div class="line">  [a,b]=[b,a];</div><div class="line">  <span class="built_in">console</span>.log(a,b);  <span class="comment">//2,1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> a,b;</div><div class="line">  [a,b]=f();</div><div class="line">  <span class="built_in">console</span>.log(a,b);  <span class="comment">//1,2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> a,b,c;</div><div class="line">  [a,,,b]=f();   <span class="comment">//1,2,3,4 b对应4</span></div><div class="line">  <span class="built_in">console</span>.log(a,b);   <span class="comment">//1,4</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> a,b,c;</div><div class="line">  [a,...b]=f();   <span class="comment">//取出第一个元素给a，其他都赋值给一个数组到b</span></div><div class="line">  <span class="built_in">console</span>.log(a,b);  <span class="comment">//1,(4) [2, 3, 4, 5]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> a,b,c;</div><div class="line">  [a,,...b]=f();</div><div class="line">  <span class="built_in">console</span>.log(a,b);  <span class="comment">//1,(3) [3, 4, 5]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> o= &#123;<span class="attr">p</span>:<span class="number">42</span>,<span class="attr">q</span>:<span class="literal">true</span>&#125;;</div><div class="line">  <span class="keyword">let</span> &#123;p,q&#125;=o;</div><div class="line">  <span class="built_in">console</span>.log(p,q);  <span class="comment">//42,true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> &#123;a=<span class="number">10</span>,b=<span class="number">5</span>&#125;=&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;;</div><div class="line">  <span class="built_in">console</span>.log(a,b);  <span class="comment">//3,5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//嵌套对象和数组的应用</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> metaData =&#123;</div><div class="line">    <span class="attr">title</span>:<span class="string">'abc'</span>,</div><div class="line">    <span class="attr">test</span>:[&#123;</div><div class="line">      <span class="attr">title</span>:<span class="string">'test'</span>,</div><div class="line">      <span class="attr">desc</span>:<span class="string">'description'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle&#125;]&#125;=metaData;</div><div class="line">  <span class="built_in">console</span>.log(esTitle,cnTitle);  <span class="comment">//abc,test</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-正则扩展"><a href="#3-正则扩展" class="headerlink" title="3. 正则扩展"></a>3. 正则扩展</h3><p>TBC</p>
<h3 id="4-字符串扩展"><a href="#4-字符串扩展" class="headerlink" title="4. 字符串扩展"></a>4. 字符串扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//unicode表示方法</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="string">'\u0061'</span>);   <span class="comment">//a,a</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">'\u20BB7'</span>);  <span class="comment">//s,₻7   因为编码超过0XFFFF，把20BB和7分别作为字符</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">'\u&#123;20BB7&#125;'</span>);  <span class="comment">//s 𠮷</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> s = <span class="string">'𠮷'</span>;  <span class="comment">//码值大于两个字节，此处为4字节。每两字节为一长度。</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'length'</span>,s.length);  <span class="comment">//length 2   es5中处理</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>,s.charAt(<span class="number">0</span>));   <span class="comment">//0 �   es5中取编码</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>,s.charAt(<span class="number">1</span>));   <span class="comment">//1 �</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'at0'</span>,s.charCodeAt(<span class="number">0</span>));   <span class="comment">//at0,55362</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'at1'</span>,s.charCodeAt(<span class="number">1</span>));   <span class="comment">//at1,57271</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> s1 = <span class="string">'𠮷a'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'length'</span>,s1.length);  <span class="comment">//length 3</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>));  <span class="comment">//code0,134071  es6取字符码值(10进制)</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));  <span class="comment">//code0 20bb7,转换为16进制</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'code1'</span>,s1.codePointAt(<span class="number">1</span>));  <span class="comment">//code1,57271 与es5中一样取后两字节</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'code2'</span>,s1.codePointAt(<span class="number">2</span>));  <span class="comment">//code2，97  即取a</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">'0x20BB7'</span>));  <span class="comment">//ஷ</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">'0x20BB7'</span>));  <span class="comment">//𠮷</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> str =<span class="string">'\u&#123;20BB7&#125;abc'</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'es5'</span>,str[i]);</div><div class="line">  &#125;  <span class="comment">//es5 �,es5 �,es5 a,es5 b,es5 c</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;                    <span class="comment">//字符串的遍历器接口,识别大于0xFFFF的码点</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'es6'</span>,code);</div><div class="line">  &#125;  <span class="comment">//es6 𠮷,es6 a,es6 b,es6 c</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> str=<span class="string">'string'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str.includes(<span class="string">"r"</span>));  <span class="comment">//includes,true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>,str.startsWith(<span class="string">'str'</span>)); <span class="comment">//start,true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>,str.endsWith(<span class="string">'ing'</span>));  <span class="comment">//end,true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> str=<span class="string">'abc'</span>;</div><div class="line">  <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>));  <span class="comment">//abcabc</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> name =<span class="string">'list'</span>;</div><div class="line">  <span class="keyword">let</span> info = <span class="string">'hello world'</span>;</div><div class="line">  <span class="keyword">let</span> m = <span class="string">`I am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;</div><div class="line">  <span class="built_in">console</span>.log(m);  <span class="comment">//I am list,hello world</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>.padStart(<span class="number">2</span>,<span class="string">'0'</span>));  <span class="comment">//01  长度为2，不够向前补第二个参数 可用在日期里</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>.padEnd(<span class="number">2</span>,<span class="string">'0'</span>));  <span class="comment">//10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> user = &#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'list'</span>,</div><div class="line">    <span class="attr">info</span>:<span class="string">'hello world'</span></div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(abc<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>,<span class="subst">$&#123;user.info&#125;</span>`</span>);  <span class="comment">//i am ,,,listhello world</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(s,v1,v2);   <span class="comment">//(3) ["i am ", ",", "", raw: Array(3)] "list" "hello world"</span></div><div class="line">    <span class="keyword">return</span> s+v1+v2;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);  <span class="comment">//Hi\n3  String.raw方法而且对斜杠进行转义</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);  <span class="comment">//Hi 换行 3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-数值扩展"><a href="#5-数值扩展" class="headerlink" title="5. 数值扩展"></a>5. 数值扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">0b111110111</span>);  <span class="comment">//十进制503  es6中二进制都以0B开头（大小写都可）</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="number">0o767</span>);  <span class="comment">//十进制503  es6中八进制都以0O开头</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'15'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">15</span>));  <span class="comment">//15 true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>));  <span class="comment">//NaN false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'1/0'</span>,<span class="built_in">Number</span>.isFinite(<span class="string">'true'</span>/<span class="number">0</span>));  <span class="comment">//1/0 false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>));  <span class="comment">//NaN true  判断是否非数字</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isNaN(<span class="number">0</span>));  <span class="comment">//NaN false  0是数字</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'25'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25</span>));  <span class="comment">//25 true 判断是否是整数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'25.0'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>));  <span class="comment">//25.0 true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'25.1'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>));  <span class="comment">//25.1 false</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'25'</span>,<span class="built_in">Number</span>.isInteger(<span class="string">'25'</span>));  <span class="comment">//25 false  接收参数必须是整数 -2^53-2^53区间内</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);  <span class="comment">//9007199254740991</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER);  <span class="comment">//-9007199254740991</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'10'</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">10</span>));  <span class="comment">//10 true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="string">'a'</span>));  <span class="comment">//a false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4.1</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.1</span>));  <span class="comment">//4.1 4 取整数部分</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4.9</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.9</span>));  <span class="comment">//4.9 4</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'-5'</span>,<span class="built_in">Math</span>.sign(<span class="number">-5</span>));  <span class="comment">//-5 -1</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>,<span class="built_in">Math</span>.sign(<span class="number">0</span>));  <span class="comment">//0 0</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'5'</span>,<span class="built_in">Math</span>.sign(<span class="number">5</span>));  <span class="comment">//5 1</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'50'</span>,<span class="built_in">Math</span>.sign(<span class="string">'50'</span>));  <span class="comment">//50 1</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>,<span class="built_in">Math</span>.sign(<span class="string">'foo'</span>));  <span class="comment">//foo NaN</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'-1'</span>,<span class="built_in">Math</span>.cbrt(<span class="number">-1</span>));  <span class="comment">//-1 -1 立方根</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'8'</span>,<span class="built_in">Math</span>.cbrt(<span class="number">8</span>));  <span class="comment">//8 2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-数组扩展"><a href="#6-数组扩展" class="headerlink" title="6.数组扩展"></a>6.数组扩展</h3><p>问题：<br><code>.values is not a function</code><br>解决：<br><a href="https://stackoverflow.com/questions/38748445/uncaught-typeerror-object-values-is-not-a-function-javascript" target="_blank" rel="external">Uncaught TypeError: Object.values is not a function JavaScript</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="external">MDN文档Object.values()</a><br>需要<code>import babel-polyfill</code>，否则不兼容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>);  <span class="comment">//把一组数据变量转化为数据类型</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'arr='</span>,arr);  <span class="comment">//arr= (5) [3, 4, 7, 9, 11]</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> empty = <span class="built_in">Array</span>.of();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'empty='</span>,empty);  <span class="comment">//empty= [] 不传参数，返回空数组</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> p = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line">  <span class="keyword">let</span> pArr = <span class="built_in">Array</span>.from(p);  <span class="comment">//把集合转换成数组</span></div><div class="line">  pArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item.textContent);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item*<span class="number">2</span>;&#125;));  <span class="comment">//(3) [2, 6, 10]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fill-7'</span>,[<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>].fill(<span class="number">7</span>));  <span class="comment">//fill-7 (3) [7, 7, 7]</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fill,pos'</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>));  <span class="comment">//fill,pos (3) ["a", 7, 7]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].keys())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'keys'</span>,index);  <span class="comment">//keys 0   keys 1   keys 2</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'entries'</span>,value);  <span class="comment">//entries (2) [0, "1"]  entries (2) [1, "c"]  entries (2) [2, "ks"]</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'entries'</span>,index,value);  <span class="comment">//entries 0 1  entries 1 c  entries 2 ks</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;));  <span class="comment">//找出第一个符合的成员</span></div><div class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;));  <span class="comment">//找出第一个符合的成员的下标</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));  <span class="comment">//number true 看数组中是否包括1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-函数扩展"><a href="#7-函数扩展" class="headerlink" title="7. 函数扩展"></a>7. 函数扩展</h3><p>函数新增特性：参数默认值；rest参数；扩展运算符；箭头函数；this绑定；尾调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y = <span class="string">'world'</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'默认值'</span>,x,y);</div><div class="line">  &#125;</div><div class="line">  test(<span class="string">'hello'</span>);   <span class="comment">//默认值 hello world</span></div><div class="line">  test(<span class="string">'hello'</span>,<span class="string">'u'</span>);  <span class="comment">//默认值 hello u</span></div><div class="line">&#125;<span class="comment">//y后面不能再加没有赋值的变量</span></div><div class="line"><span class="comment">//参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x  = <span class="string">'test'</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x,y=x</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'作用域'</span>,x,y);</div><div class="line">  &#125;</div><div class="line">  test2(<span class="string">'cute'</span>);  <span class="comment">//作用域 cute cute</span></div><div class="line">  test2(); <span class="comment">//作用域 undefined undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x  = <span class="string">'test'</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">c,y=x</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'作用域'</span>,c,y);</div><div class="line">  &#125;</div><div class="line">  test2(<span class="string">'cute'</span>);  <span class="comment">//作用域 cute test</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params">...arg</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arg)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'rest'</span>,v);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  test3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'a'</span>); <span class="comment">//rest 1；rest 2；rest 3；rest 4；rest 5；</span></div><div class="line">&#125;<span class="comment">//rest参数（形式为...变量名），用于获取函数的多余参数,把他们都转换成数组</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">//1 2 3  把数组转换成离散值</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">//a 1 2 3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arrow = <span class="function"><span class="params">v</span>=&gt;</span>v*<span class="number">2</span>;</div><div class="line">  <span class="keyword">let</span> arrow2 = <span class="function"><span class="params">()</span>=&gt;</span><span class="number">5</span>;</div><div class="line">  <span class="built_in">console</span>.log(arrow(<span class="number">3</span>)); <span class="comment">//6</span></div><div class="line">  <span class="built_in">console</span>.log(arrow2()); <span class="comment">//5</span></div><div class="line">&#125;<span class="comment">//箭头函数:  let函数名=函数参数=&gt;函数返回值</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'tail'</span>,x);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> tail(x);</div><div class="line">  &#125;</div><div class="line">  fx(<span class="number">123</span>);  <span class="comment">//tail 123</span></div><div class="line">&#125;<span class="comment">//尾调用  提升性能</span></div></pre></td></tr></table></figure>
<h3 id="8-对象扩展"><a href="#8-对象扩展" class="headerlink" title="8. 对象扩展"></a>8. 对象扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//简洁表示法</span></div><div class="line">  <span class="keyword">let</span> o = <span class="number">1</span>;</div><div class="line">  <span class="keyword">let</span> k = <span class="number">2</span>;</div><div class="line">  <span class="keyword">let</span> es5 = &#123;</div><div class="line">    <span class="attr">o</span>: o,</div><div class="line">    <span class="attr">k</span>: k</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">let</span> es6 = &#123;</div><div class="line">    o,</div><div class="line">    k</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(es5,es6); <span class="comment">//&#123;o: 1, k: 2&#125; &#123;o: 1, k: 2&#125;</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> es5_method = &#123;</div><div class="line">    <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">let</span> es6_method = &#123;</div><div class="line">    hello()&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello()); <span class="comment">//hello;hello</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//属性表达式</span></div><div class="line">  <span class="keyword">let</span> a = <span class="string">'b'</span>;</div><div class="line">  <span class="keyword">let</span> es5_obj = &#123;</div><div class="line">    <span class="attr">a</span>:<span class="string">'c'</span>,</div><div class="line">    <span class="attr">b</span>:<span class="string">'c'</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//ES6允许字面量定义对象时，用表达式(放在方括号内)作为对象的属性名。</span></div><div class="line">  <span class="keyword">let</span> es6_obj = &#123;</div><div class="line">    [a]:<span class="string">'c'</span></div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(es5_obj,es6_obj);  <span class="comment">//&#123;a: "c", b: "c"&#125; &#123;b: "c"&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//新增API</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'字符串'</span>,<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>),<span class="string">'abc'</span>===<span class="string">'abc'</span>);  <span class="comment">//字符串 true true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'数组'</span>,<span class="built_in">Object</span>.is([],[]),[]===[]); <span class="comment">//数组 false false 数组也是引用类型，地址不同不想等</span></div><div class="line">&#125;<span class="comment">//Object.is功能等同===</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'拷贝'</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;)); <span class="comment">//拷贝 &#123;a: "a", b: "b"&#125;</span></div><div class="line">&#125; <span class="comment">//Object.assign将源对象的所有可枚举属性(不拷贝继承属性)，复制到目标对象（第一个参数）</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> test = &#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</div><div class="line">    <span class="built_in">console</span>.log([key,value]);</div><div class="line">  &#125; <span class="comment">//(2) ["k", 123] ; (2) ["o", 456]</span></div><div class="line">&#125;<span class="comment">//Object.entries遍历对象</span></div></pre></td></tr></table></figure>
<h3 id="9-Symbol用法"><a href="#9-Symbol用法" class="headerlink" title="9. Symbol用法"></a>9. Symbol用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//Symbol声明变量独一无二</span></div><div class="line">  <span class="keyword">let</span> a1=<span class="built_in">Symbol</span>();</div><div class="line">  <span class="keyword">let</span> a2=<span class="built_in">Symbol</span>();</div><div class="line">  <span class="built_in">console</span>.log(a1===a2);  <span class="comment">//false</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</div><div class="line">  <span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</div><div class="line">  <span class="built_in">console</span>.log(a3===a4);  <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>);</div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    [a1]:<span class="string">'123'</span>,</div><div class="line">    <span class="string">'abc'</span>:<span class="number">345</span>,</div><div class="line">    <span class="string">'c'</span>:<span class="number">456</span></div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'obj'</span>,obj);  <span class="comment">//obj &#123;abc: 345, c: 456, Symbol(abc): "123"&#125;</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'let of'</span>,key,value);  <span class="comment">//let of abc 345; let of c 456</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(obj[item]);  <span class="comment">//123</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,item,obj[item]); <span class="comment">//ownKeys abc 345;ownKeys c 456;ownKeys Symbol(abc) 123</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="10-set-map数据结构"><a href="#10-set-map数据结构" class="headerlink" title="10. set-map数据结构"></a>10. set-map数据结构</h3><p>优先使用map，对数据要求高用set。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">  list.add(<span class="number">5</span>);</div><div class="line">  list.add(<span class="number">7</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,list.size);  <span class="comment">//size 2 类似数组中length</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr); <span class="comment">//转换数组为set集合</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,list.size);  <span class="comment">//size 5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">  list.add(<span class="number">1</span>);</div><div class="line">  list.add(<span class="number">2</span>);</div><div class="line">  list.add(<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'list'</span>,list);  <span class="comment">//list Set(2) &#123;1, 2&#125;</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> arr  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">  <span class="keyword">let</span> list2 =<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'list2'</span>,list2);  <span class="comment">//list2 Set(3) &#123;1, 2, 3&#125;</span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> arr2  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'2'</span>];</div><div class="line">  <span class="keyword">let</span> list3 =<span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'list3'</span>,list3);  <span class="comment">//list3 Set(4) &#123;1, 2, 3, "2"&#125;</span></div><div class="line">&#125;<span class="comment">//该特性可以去除重复元素</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</div><div class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,list.has(<span class="string">'add'</span>));  <span class="comment">//has true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,list.delete(<span class="string">'add'</span>),list);  <span class="comment">//delete true Set(3) &#123;"delete", "clear", "has"&#125;</span></div><div class="line">  list.clear();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'list'</span>,list);  <span class="comment">//list Set(0) &#123;&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = [<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</div><div class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'keys'</span>,key);  <span class="comment">//keys add;keys delete;keys clear;keys has</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list.values())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);  <span class="comment">//value add;value delete;value clear;value has</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);  <span class="comment">//value add;value delete;value clear;value has</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'entries'</span>,key,value);  <span class="comment">//entries add add;entries delete delete;entries clear clear;entries has has</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item);  <span class="comment">//add;delete;clear;has</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> weakList = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();  <span class="comment">//元素只能是对象，弱引用 没有clear方法，set属性，不能遍历</span></div><div class="line">  <span class="keyword">let</span> arg = &#123;&#125;;</div><div class="line">  weakList.add(arg);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'weakList'</span>,weakList);  <span class="comment">//weakList WeakSet &#123;&#123;…&#125;&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">  <span class="keyword">let</span> arr = [<span class="string">'123'</span>];</div><div class="line"></div><div class="line">  map.set(arr,<span class="number">456</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'map'</span>,map,map.get(arr));  <span class="comment">//map Map(1) &#123;Array(1) =&gt; 456&#125; 456</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]]);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'map args'</span>,map);  <span class="comment">//map args Map(2) &#123;"a" =&gt; 123, "b" =&gt; 456&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,map.size); <span class="comment">//size 2</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,map.delete(<span class="string">'a'</span>),map); <span class="comment">//delete true Map(1) &#123;"b" =&gt; 456&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'clear'</span>,map.clear(),map);  <span class="comment">//clear undefined Map(0) &#123;&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> weakmap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"></div><div class="line">  <span class="keyword">let</span> o =&#123;&#125;;</div><div class="line">  weakmap.set(o,<span class="number">123</span>);</div><div class="line">  <span class="built_in">console</span>.log(weakmap.get(o));  <span class="comment">//123</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//数据结构横向对比，增删改查</span></div><div class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">  <span class="keyword">let</span> array  = [];</div><div class="line">  <span class="comment">//增</span></div><div class="line">  map.set(<span class="string">'t'</span>,<span class="number">1</span>);</div><div class="line">  array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'map array'</span>,map,array);  <span class="comment">//map array Map(1) &#123;"t" =&gt; 1&#125; [&#123;…&#125;]</span></div><div class="line">  <span class="comment">//查</span></div><div class="line">  <span class="keyword">let</span> map_exist = map.has(<span class="string">'t'</span>);</div><div class="line">  <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map_exist,array_exist);  <span class="comment">//map-array true &#123;t: 1&#125;</span></div><div class="line">  <span class="comment">//改</span></div><div class="line">  map.set(<span class="string">'t'</span>,<span class="number">2</span>);</div><div class="line">  array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'map-array-modify'</span>,map,array);  <span class="comment">//map-array-modify Map(1) &#123;"t" =&gt; 2&#125; [&#123;…&#125;]</span></div><div class="line">  <span class="comment">//删</span></div><div class="line">  map.delete(<span class="string">'t'</span>);</div><div class="line">  <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">  array.splice(index,<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'map array-empty'</span>,map,array);  <span class="comment">//map array-empty Map(0) &#123;&#125; []</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//set和array对比</span></div><div class="line">  <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">  <span class="keyword">let</span> array = [];</div><div class="line">  <span class="comment">//增</span></div><div class="line">  set.add(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">  array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set,array);  <span class="comment">//set-array Set(1) &#123;&#123;…&#125;&#125; [&#123;…&#125;]</span></div><div class="line">  <span class="comment">//查</span></div><div class="line">  <span class="keyword">let</span> set_exist = set.has(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</div><div class="line">  <span class="keyword">let</span> array_exist = array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set_exist,array_exist);  <span class="comment">//set-array false &#123;t: 1&#125;</span></div><div class="line">  <span class="comment">//改</span></div><div class="line">  set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>);</div><div class="line">  array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'set-array-modify'</span>,set,array);  <span class="comment">//set-array-modify Set(1) &#123;&#123;…&#125;&#125;size: (...)__proto__: Set[[Entries]]: Array(1)0: Objectlength: 1 [&#123;…&#125;]</span></div><div class="line">  <span class="comment">//删</span></div><div class="line">  set.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?set.delete(item):<span class="string">''</span>);</div><div class="line">  <span class="keyword">let</span> index = array.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.t);</div><div class="line">  array.splice(index,<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'set-array-empty'</span>,set,array);  <span class="comment">//set array-empty Set(0) &#123;&#125; []</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//map,set,object对比</span></div><div class="line">  <span class="keyword">let</span> item =&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;;</div><div class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">  <span class="keyword">let</span> set =<span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</div><div class="line">  <span class="comment">//增</span></div><div class="line">  map.set(<span class="string">'t'</span>,<span class="number">1</span>);</div><div class="line">  set.add(item);</div><div class="line">  obj[<span class="string">'t'</span>]= <span class="number">1</span>;</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'obj-map-set'</span>,obj,map,set);  <span class="comment">//obj-map-set &#123;t: 1&#125; Map(1) &#123;"t" =&gt; 1&#125; Set(1) &#123;&#123;…&#125;&#125;</span></div><div class="line">  <span class="comment">//查</span></div><div class="line">  <span class="built_in">console</span>.info(&#123;</div><div class="line">    <span class="attr">map_exist</span>:map.has(<span class="string">'t'</span>),</div><div class="line">    <span class="attr">set_exist</span>:set.has(item),</div><div class="line">    <span class="attr">obj_exist</span>:<span class="string">'t'</span> <span class="keyword">in</span> obj</div><div class="line">  &#125;);  <span class="comment">//&#123;map_exist: true, set_exist: true, obj_exist: true&#125;</span></div><div class="line">  <span class="comment">//改</span></div><div class="line">  map.set(<span class="string">'t'</span>,<span class="number">2</span>);</div><div class="line">  item.t =<span class="number">2</span>;</div><div class="line">  obj[<span class="string">'t'</span>]= <span class="number">2</span>;</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'obj-map-set-modify'</span>,obj,map,set);  <span class="comment">//obj-map-set-modify &#123;t: 2&#125; Map(1) &#123;"t" =&gt; 2&#125; Set(1) &#123;&#123;…&#125;&#125;</span></div><div class="line">  <span class="comment">//删除</span></div><div class="line">  map.delete(<span class="string">'t'</span>);</div><div class="line">  set.delete(item);</div><div class="line">  <span class="keyword">delete</span> obj[<span class="string">'t'</span>];</div><div class="line">  <span class="built_in">console</span>.info(<span class="string">'obj-map-set-empty'</span>,obj,map,set);  <span class="comment">//obj-map-set-empty &#123;&#125; Map(0) &#123;&#125; Set(0) &#123;&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="11-Proxy和Reflect"><a href="#11-Proxy和Reflect" class="headerlink" title="11. Proxy和Reflect"></a>11. Proxy和Reflect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">time</span>:<span class="string">'2017-11-17'</span>,</div><div class="line">    <span class="attr">name</span>:<span class="string">'net'</span>,</div><div class="line">    <span class="attr">_r</span>:<span class="number">123</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</div><div class="line">    <span class="comment">//拦截对象属性的获取</span></div><div class="line">    get(target,key)&#123;</div><div class="line">       <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//拦截对象设置属性</span></div><div class="line">    set(target,key,value)&#123;</div><div class="line">      <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> target[key]=value;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> target[key];</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//拦截key in object操作</span></div><div class="line">    has(target,key)&#123;</div><div class="line">      <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> target[key];</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//拦截delete操作</span></div><div class="line">    deleteProperty(target,key)&#123;</div><div class="line">      <span class="keyword">if</span>(key.indexOf(<span class="string">'_'</span>)&gt;<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">delete</span> target[key];</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> target[key];</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//拦截object.keys，object.getownpropertysymbols,object.getownpropertynames</span></div><div class="line">    ownKeys(target)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'get'</span>,monitor.time);  <span class="comment">//get 2018-11-17</span></div><div class="line">  monitor.name =<span class="string">'new name'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'set'</span>,monitor.time,monitor.name);  <span class="comment">//set 2018-11-17 new name</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="string">'name'</span> <span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor);  <span class="comment">//has true false</span></div><div class="line">  <span class="comment">// delete monitor.time;</span></div><div class="line">  <span class="comment">// console.log('delete',monitor);  //Proxy &#123;time: "2017-11-17", name: "new name", _r: 123&#125;</span></div><div class="line">  <span class="comment">// delete monitor._r;</span></div><div class="line">  <span class="comment">// console.log('delete',monitor);  //Proxy &#123;time: "2017-11-17", name: "new name"&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,<span class="built_in">Object</span>.keys(monitor));  <span class="comment">//ownKeys (2) ["name", "_r"]</span></div><div class="line">&#125;<span class="comment">//类似供应商的原始数据对象，通过proxy代理商生成映射对象，用户访问后者</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">time</span>:<span class="string">'2017-11-17'</span>,</div><div class="line">    <span class="attr">name</span>:<span class="string">'net'</span>,</div><div class="line">    <span class="attr">_r</span>:<span class="number">123</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Reflect get'</span>,<span class="built_in">Reflect</span>.get(obj,<span class="string">'time'</span>));  <span class="comment">//Reflect get 2017-11-17</span></div><div class="line">  <span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'new name'</span>);</div><div class="line">  <span class="built_in">console</span>.log(obj);  <span class="comment">//&#123;time: "2017-11-17", name: "new name", _r: 123&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>));  <span class="comment">//has true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//数据校验应用</span></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</div><div class="line">    <span class="comment">//返回对target的代理，即对Person这个类的实例的代理</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</div><div class="line">      <span class="attr">_validator</span>:validator,</div><div class="line">      set(target,key,value,proxy)&#123;</div><div class="line">        <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</div><div class="line">          <span class="keyword">let</span> va = <span class="keyword">this</span>._validator[key];</div><div class="line">          <span class="keyword">if</span>(!!va(value))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span> 到<span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">          &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>不存在`</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> personValidators =&#123;</div><div class="line">    name(val)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</div><div class="line">    &#125;,</div><div class="line">    age(val)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span> &amp;&amp; val &gt;<span class="number">18</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name,age)&#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">      <span class="keyword">this</span>.age =age;</div><div class="line">      <span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidators);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'lilei'</span>,<span class="number">30</span>);</div><div class="line">  <span class="built_in">console</span>.info(person);  <span class="comment">//Proxy &#123;name: "lilei", age: 30&#125;</span></div><div class="line">  <span class="comment">//因为代理限制所以不能随意赋值</span></div><div class="line">  <span class="comment">//person.name =48;  //Uncaught Error: 不能设置name 到48</span></div><div class="line">  person.name =<span class="string">'Han mei mei'</span>;</div><div class="line">  <span class="built_in">console</span>.info(person);  <span class="comment">//Proxy &#123;name: "Han mei mei", age: 30&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="12-类和对象"><a href="#12-类和对象" class="headerlink" title="12. 类和对象"></a>12. 类和对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//基本定义和生成实例</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent(<span class="string">'v'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>, v_parent); <span class="comment">//构造函数和实例 Parent &#123;name: "v"&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'继承'</span>, <span class="keyword">new</span> Child()); <span class="comment">//继承 Child &#123;name: "qq"&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//继承传递参数</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'child') &#123;</div><div class="line">      <span class="keyword">super</span>(name);</div><div class="line">      <span class="keyword">this</span>.type = <span class="string">'child'</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>, <span class="keyword">new</span> Child(<span class="string">'hello'</span>)); <span class="comment">//继承传递参数 _Child &#123;name: "hello", type: "child"&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//getter,setter</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    get longName() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'mk'</span> + <span class="keyword">this</span>.name;</div><div class="line">    &#125; <span class="comment">//不是函数方法而是属性</span></div><div class="line"></div><div class="line">    set longName(value) &#123;</div><div class="line">      <span class="keyword">this</span>.name = value;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> v = <span class="keyword">new</span> Parent();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'getter'</span>, v.longName); <span class="comment">//getter mkqq</span></div><div class="line">  v.longName = <span class="string">'hello'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'setter'</span>, v.longName); <span class="comment">//setter mkhello</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//静态方法</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> tell() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  Parent.tell(); <span class="comment">//tell</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//静态属性</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name = 'qq') &#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> tell() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  Parent.type = <span class="string">'test'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'静态属性'</span>, Parent.type); <span class="comment">//静态属性 test</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="13-Promise"><a href="#13-Promise" class="headerlink" title="13. Promise"></a>13. Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//基本定义</span></div><div class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'execute'</span>);</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      callback &amp;&amp; callback.call()</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;;</div><div class="line">  ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout1'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125; <span class="comment">//先输出execute，1s后输出timeout1</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'execute2'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        resolve()</div><div class="line">      &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>, <span class="string">'timeout2'</span>);</div><div class="line">  &#125;)</div><div class="line">&#125; <span class="comment">//先输出timeout1，1s后输出promise timeout2</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'execute3'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        resolve()</div><div class="line">      &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  ajax()</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          resolve()</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'timeout3'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'execute4'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (num &gt; <span class="number">5</span>) &#123;</div><div class="line">        resolve();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error!'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  ajax(<span class="number">6</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">6</span>);</div><div class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err);</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  ajax(<span class="number">3</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'log'</span>, <span class="number">3</span>);</div><div class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'catch'</span>, err);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//所有图片加载完再加载页面</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">      img.src = src;</div><div class="line">      img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        resolve(img);</div><div class="line">      &#125;</div><div class="line">      img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        reject(err);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showImage</span>(<span class="params">imgs</span>) </span>&#123;</div><div class="line">    imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Promise</span>.all([</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>),</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>),</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>)</div><div class="line">  ]).then(showImage)</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//只要一张图片加载完就加载页面,其他不显示</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">src</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">      img.src = src;</div><div class="line">      img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        resolve(img);</div><div class="line">      &#125;</div><div class="line">      img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        reject(err);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showImage</span>(<span class="params">img</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">    p.appendChild(img);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(p);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">Promise</span>.race([</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>),</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>),</div><div class="line">    loadImage(<span class="string">'http://wx2.sinaimg.cn/mw690/6e67f96fgy1fkgeowvnqkj205606yjrh.jpg'</span>)</div><div class="line">  ]).then(showImage)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="14-Iterator"><a href="#14-Iterator" class="headerlink" title="14. Iterator"></a>14. Iterator</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>];</div><div class="line">  <span class="keyword">let</span> map = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line">  <span class="built_in">console</span>.log(map.next()); <span class="comment">// &#123;value: "hello", done: false&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(map.next()); <span class="comment">// &#123;value: "world", done: false&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(map.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//自定义iterator 返回对象包括next方法和value，done值</span></div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">start</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</div><div class="line">    <span class="attr">end</span>: [<span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>],</div><div class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">      <span class="keyword">let</span> self = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</div><div class="line">      <span class="keyword">let</span> arr = self.start.concat(self.end);</div><div class="line">      <span class="keyword">let</span> len = arr.length;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        next() &#123;</div><div class="line">          <span class="keyword">if</span> (index &lt; len) &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">              <span class="attr">value</span>: arr[index++],</div><div class="line">              <span class="attr">done</span>: <span class="literal">false</span></div><div class="line">            &#125;;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">              <span class="attr">value</span>: arr[index++],</div><div class="line">              <span class="attr">done</span>: <span class="literal">true</span></div><div class="line">            &#125;;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> obj) &#123;</div><div class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// 1;3;2;7;9;8</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>, value); <span class="comment">//value hello;value world</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="15-Genertor"><a href="#15-Genertor" class="headerlink" title="15. Genertor"></a>15. Genertor</h3><p>报错：<code>regeneratorRuntime is not defined</code><br>解决：<a href="http://babeljs.io/docs/plugins/transform-runtime/" target="_blank" rel="external">transform-runtime</a>，可以选择性加载babel插件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">//generator基本定义</span></div><div class="line">  <span class="keyword">let</span> tell = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'c'</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> k = tell();</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(k.next()); <span class="comment">//&#123;value: "a", done: false&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(k.next()); <span class="comment">//&#123;value: "b", done: false&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(k.next()); <span class="comment">//&#123;value: "c", done: true&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(k.next()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</div><div class="line">  obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> obj) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>, value); <span class="comment">//value 1;value 2;value 3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">//   //状态机</span></div><div class="line"><span class="comment">//   let state = function* ()&#123;</span></div><div class="line"><span class="comment">//     while(1)&#123;</span></div><div class="line"><span class="comment">//       yield 'A';</span></div><div class="line"><span class="comment">//       yield 'B';</span></div><div class="line"><span class="comment">//       yield 'C';</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//   &#125;;</span></div><div class="line"><span class="comment">//   let status  =state();</span></div><div class="line"><span class="comment">//   console.log(status.next()); //&#123;value: "A", done: false&#125;</span></div><div class="line"><span class="comment">//   console.log(status.next()); //&#123;value: "B", done: false&#125;</span></div><div class="line"><span class="comment">//   console.log(status.next()); //&#123;value: "C", done: false&#125;</span></div><div class="line"><span class="comment">//   console.log(status.next()); //&#123;value: "A", done: false&#125;</span></div><div class="line"><span class="comment">//   console.log(status.next()); //&#123;value: "B", done: false&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// &#123;</span></div><div class="line"><span class="comment">//   let state = async function ()&#123;</span></div><div class="line"><span class="comment">//     while(1)&#123;</span></div><div class="line"><span class="comment">//       await 'A';</span></div><div class="line"><span class="comment">//       await 'B';</span></div><div class="line"><span class="comment">//       await 'C';</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//   &#125;;</span></div><div class="line"><span class="comment">//   let status  =state();</span></div><div class="line"><span class="comment">//   console.log(status.then()); //&#123;value: "A", done: false&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//制作抽奖按钮</span></div><div class="line">  <span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>) </span>&#123;</div><div class="line">    <span class="comment">//具体抽奖逻辑省略</span></div><div class="line">    <span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> residue = <span class="function"><span class="keyword">function</span>*(<span class="params">count</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">      count--;</div><div class="line">      <span class="keyword">yield</span> draw(count);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//次数count不保存在全局变量中</span></div><div class="line">  <span class="keyword">let</span> star = residue(<span class="number">5</span>);</div><div class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</div><div class="line">  btn.id = <span class="string">'start'</span>;</div><div class="line">  btn.textContent = <span class="string">'抽奖'</span>;</div><div class="line">  <span class="built_in">document</span>.body.appendChild(btn);</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    star.next();</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">//长轮询</span></div><div class="line">  <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        resolve(&#123;</div><div class="line">          <span class="attr">code</span>: <span class="number">0</span></div><div class="line">        &#125;)</div><div class="line">      &#125;, <span class="number">200</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> generator = ajax();</div><div class="line">    <span class="keyword">let</span> step = generator.next();</div><div class="line">    step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (d.code != <span class="number">0</span>) &#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.info(<span class="string">'wait'</span>);</div><div class="line">          pull()</div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.info(d);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  pull(); <span class="comment">//如果code改成1则会开始长轮询输出wait</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="16-Decorators"><a href="#16-Decorators" class="headerlink" title="16. Decorators"></a>16. Decorators</h3><p>修饰器是一个函数用来修改类的行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> readonly = <span class="function"><span class="keyword">function</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</div><div class="line">    descriptor.writable = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> descriptor</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    @readonly</div><div class="line">    time() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'2017-03-11'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">  <span class="comment">// test.time=function()&#123;</span></div><div class="line">  <span class="comment">//   console.log('reset time');</span></div><div class="line">  <span class="comment">// &#125;;</span></div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(test.time());</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> typename = <span class="function"><span class="keyword">function</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</div><div class="line">    target.myname = <span class="string">'hello'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @typename</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'类修饰符'</span>, Test.myname);</div><div class="line">  <span class="comment">// 第三方库修饰器的js库：core-decorators; npm install core-decorators</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="17-模块化"><a href="#17-模块化" class="headerlink" title="17. 模块化"></a>17. 模块化</h3><h3 id="18-问题"><a href="#18-问题" class="headerlink" title="18. 问题"></a>18. 问题</h3><pre><code>描述：当使用import导入模块时，出现exports is not defined
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//1、安装插件</div><div class="line">npm install --save-dev babel-plugin-transform-es2015-modules-umd</div><div class="line"> </div><div class="line">//2、设置.babelrc配置文件</div><div class="line">&#123;</div><div class="line">    &quot;plugins&quot;: [&quot;transform-es2015-modules-umd&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[响应式开发总结]]></title>
      <url>/2018/02/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>之前对于响应式都是用bootstrap等响应式框架，非常肤浅。就学习了具体的响应式开发相关内容，运用媒体查询写出不同的css布局，锻炼了基本技能，对基础概念也有了新了解。还学习了响应式图片的处理和兼容性处理，也收获良多。</p>
<h3 id="1-响应式网站"><a href="#1-响应式网站" class="headerlink" title="1. 响应式网站"></a>1. 响应式网站</h3><blockquote>
<p>所谓响应式网站，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本，在各种分辨率的设备下都能很好地展示页面效果。</p>
</blockquote>
<h4 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h4><p>flexible grid layout 弹性网格布局<br>flexible image 弹性图片<br>media queries 媒体查询</p>
<h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p>一套代码适应多终端设备，省人省时省钱，利于SEO。缺点是需要加载更多的样式和脚本资源，造成代码冗余。</p>
<h4 id="实践原则："><a href="#实践原则：" class="headerlink" title="实践原则："></a>实践原则：</h4><p>制作网站大抵都遵循两个原则：渐近增强(Progressive Enhancement)和优雅降级(Graceful Degradation)，渐近增强是指先制作一个简陋但是兼容各个版本浏览器的网页，然后再添加效果。而优雅降级则刚好相反，直接制作出效果绚烂的兼容主流浏览器的产品，然后根据低版本再做出一些兼容性处理。</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>使用相对单位并配合媒体查询来实现页面，我们只需要根据设计图,将绝对单位px转换为相对单位rem或者em并配合@media即可。</p>
<h3 id="2-非常规文件"><a href="#2-非常规文件" class="headerlink" title="2. 非常规文件"></a>2. 非常规文件</h3><a id="more"></a>
<p><a href="http://humanstxt.org/ZH" target="_blank" rel="external">humans.txt</a><br>包含了参加该网站创建人员的信息，如团队成员、感谢和站点的技术信息。 通过该文本文件，可以快速了解该网站背后的团队信息以及他们的故事。</p>
<p>robots.txt<br>允许爬虫爬取的配置<br>它是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。</p>
<pre><code>Use-agent: *
Disallow: /admin/
</code></pre><p><a href="http://editorconfig.org/" target="_blank" rel="external">.editorconfig</a><br>用来使不同的IDE根据该文件显示相同的代码风格，便于程序员在不同IDE中维护，包括缩进格式、编码格式、换行规格。</p>
<pre><code># 配置说明
root = true　最顶层的配置文件，之后再不会查找其他文件
[*]　以下规则应用于所有文件
charset = utf-8　所有文件的编码格式为utf-8
indent_size = 4　代码缩进的空格数，可为tab
indent_style = space　代码缩进的样式，为空格
insert_final_newline = true　每个文件以空白行结尾
trim_trailing_whitespace = true　去除换行行首的空白字符
[*.md]　以下规则应用于markdown文件
trim_trailing_whitespace = false　在md文件中，不去除换行行首的空白字符
</code></pre><p><code>package.json</code><br>定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。<br><code>gulpfile.js</code><br>gulp项目的配置文件<br><code>gitignore</code><br>告诉git版本控制工具，哪些文件不需要添加到版本管理中<br><code>LICENSE.txt</code><br>用来存放许可协议，名称为大写，包括版权声明，开源协议<br><code>CHANGLOG.md</code><br>用来存放项目每个版本的更新，以及说明版本号、更新内容、修复了哪些问题等<br><code>README.md</code><br>用来存放项目简介、使用方式、相关连接</p>
<h3 id="3-IE兼容处理"><a href="#3-IE兼容处理" class="headerlink" title="3. IE兼容处理"></a>3. IE兼容处理</h3><p>IE不支持H5标签和媒体查询 (HTML5 elements and media queries)</p>
<p>1.基本写法</p>
<pre><code>&lt;!--[if lt/lte/gt/gte IE 9]&gt;      // IE与版本号之间空格
    lt    &lt;
    lte   &lt;=
    gt    &gt;
    gte   &gt;=
&lt;![endif]--&gt;
</code></pre><p>2.用法</p>
<pre><code>&lt;!--[if lt IE9]&gt;
&lt;div class=&quot;browser_upgrade&quot;&gt;您的浏览器版本太老, 为了正常使用功能请点击 &lt;a href=&quot;http://browsehappy.com&quot;&gt;这里&lt;/a&gt;更新您的浏览器!!!&lt;/div&gt;
&lt;![endif]--&gt;
</code></pre><p>3.Boostrap中应用</p>
<pre><code>&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
&lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt;
&lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
</code></pre><h3 id="4-W3C部分标准规范"><a href="#4-W3C部分标准规范" class="headerlink" title="4. W3C部分标准规范"></a>4. W3C部分标准规范</h3><h4 id="H5标签"><a href="#H5标签" class="headerlink" title="H5标签"></a><strong>H5标签</strong></h4><p>H5规范中, 大纲outliner中, section和artical最好有标题,nav可以没有标题, 没有标题的section用div替换</p>
<pre><code>&lt;header&gt;&lt;/header&gt;  // 头
&lt;footer&gt;&lt;/footer&gt;  // 尾
&lt;nav&gt;&lt;/nav&gt;     // 导航, 可以没有标题
&lt;article&gt;&lt;/article&gt; // 最好有h标题,独立完整,有内容,语义更明确, 例如博客中的文章, 帖子
&lt;section&gt;&lt;/section&gt;  //最好有h标题,范围广泛, 表示区块, 出现在文档大纲中, 比如广告, 联系方式, 文章中的章节等, 拿不准就用div
</code></pre><h4 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a><strong>lang属性</strong></h4><p>HTML 的 lang 属性可用于网页或部分网页的语言。这对搜索引擎和浏览器是有帮助的。W3C标准规定，应该通过<code>html</code>标签中的 lang 属性对每张页面中的主要语言进行声明，同时，也规定了lang 属性在以下标签中无效：<br><code>base</code>, <code>br</code>, <code>frame</code>, <code>frameset</code>, <code>hr</code>, <code>iframe</code>, <code>param</code> 以及 <code>script</code>。</p>
<h4 id="id-class命名规范"><a href="#id-class命名规范" class="headerlink" title="id,class命名规范"></a><strong>id,class命名规范</strong></h4><p><code>id</code> 驼峰命名<br><code>class</code> 用中横线-连接,更进一步参考 BEM(元素-块-修饰符),见css进阶,js-用于交互</p>
<h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a><strong>meta标签</strong></h4><p>对于响应式的处理，如规定视口大小，规定以最新的IE浏览器来渲染，这些属性都用到了<meta>标签，其定义和用法如下：</p>
<p><meta>元素永远位于文档的头部（head），该元素的属性定义了与文档相关联的名称/值对，可提供有关页面的元信息，添加页面关键词，有利于SEO。<br>其中，在XHML中，<meta>必须被正确的关闭；HTML中，<meta>没有结束标签。<br>在<meta>标签中，必须的属性为content属性，可选的属性为http-equiv、name、scheme等。</p>
<pre><code>&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;title&gt;xxx&lt;/title&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, minimal-ui&quot;  /&gt;    // minimal-ui IOS系统隐藏操作栏
&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;
&lt;meta name=&quot;MobileOptimized&quot; content=&quot;width&quot;&gt;
&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;
&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;
&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;海涛旅游&quot; /&gt;
&lt;meta name=&quot;applicable-device&quot; content=&quot;mobile&quot;&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;
&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=914881804, app-argument=https://itunes.apple.com/cn/app/hai-tao-lu-you/id914881804?mt=8&quot;&gt; 
&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;
&lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;
&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;
&lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;
&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;
&lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;
&lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;
</code></pre><h4 id="viewport视口"><a href="#viewport视口" class="headerlink" title="viewport视口"></a><strong>viewport视口</strong></h4><p>1.布局视口（layout viewport）<br>布局视口为网页PC端版式，为默认布局模式下的页面显示大小。<br><img src="https://i.imgur.com/hOV60TG.png" alt="布局视口"></p>
<p>2.可视视口（visual viewport）<br>可视视口为手机端能看见PC端网页的显示大小，根据屏幕大小不同，显示大小也会不同。<br><img src="https://i.imgur.com/ac5ygtU.png" alt="可视视口"></p>
<p>3.理想视口（ideal viewport）<br>理想视口就是布局视口在一个设备上的最佳显示大小，根据屏幕大小自动修改布局视口的尺寸。</p>
<p>4.视口设置代码 </p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;  /&gt; 

width=device-width，指将视口宽度定义为设备宽度
minimum-scale=1.0，最小的缩放比例为1倍
maximum-scale=1.0，最大的缩放比例为1倍
user-scalable=no，禁止用户缩放
</code></pre><h4 id="图片引入的选择"><a href="#图片引入的选择" class="headerlink" title="图片引入的选择"></a><strong>图片引入的选择</strong></h4><pre><code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;
</code></pre><ol>
<li>logo类</li>
<li>手机中响应式图片</li>
<li>商品展示列表中的图片</li>
<li>后台动态添加的图片, 方便切换src</li>
</ol>
<pre><code>background:url();
</code></pre><p>装饰性的</p>
<h3 id="5-PC端样式"><a href="#5-PC端样式" class="headerlink" title="5. PC端样式"></a>5. PC端样式</h3><p><strong>CSS resets</strong></p>
<ol>
<li>让所有标签的样式看起来都一样</li>
<li>去除了有用的样式<br><strong>Normalize.css</strong></li>
<li>保留有用的默认值，不同于许多 CSS 的重置</li>
<li>标准化的样式，适用范围广的元素。</li>
<li>纠正错误和常见的浏览器的不一致性。</li>
<li>一些细微的改进，提高了易用性。</li>
<li>使用详细的注释来解释代码。</li>
</ol>
<p>推荐用<a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a><br>使用完整Normalize.css, 然后在main.css中覆盖, 方便后期升级 </p>
<h4 id="打印样式"><a href="#打印样式" class="headerlink" title="打印样式"></a><strong>打印样式</strong></h4><pre><code>@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000!important;
    box-shadow: none!important;
    text-shadow: none!important;
  }
  a,
  a:visited {
    text-decoration: underline;
  }
  a[href]:after {
    content: &quot;(&quot; attr(href) &quot;)&quot;;
  }
  abbr[title]:after {
    content: &quot;(&quot; attr(title) &quot;)&quot;;
  }
  /*
   *使用#和javascript:;的超链接不打印
   */
  a[href^=&quot;#&quot;]:after,
  a[href^=&quot;javascript:&quot;]:after{
    content:&quot;&quot;;
  }
  /* 避免内部插入分页符 */
  pre,
  blockquote {
    border:1px solid #999;
    page-break-inside: avoid; /* Opera浏览器用 */
  }
  thead {
    display: table-header-group;
  }
  tr,img {
    page-break-inside: avoid;
  }
  img {
    max-width: 100%!important;
  }
  /* 标题下文字不超过3行, 标题在下一页; 超过3行标题在当前页  */
  p,
  h2,
  h3 {
    orphans : 3; /* 当元素内部发生分页时, 页面底部保留的最小行数 */
    widows: 3;   /* 当元素内部发生分页时, 页面顶部保留的最小行数 */
  }
  /* 禁止在标题后直接插入分页符 */
  h2,
  h3 {
    page-break-after: avoid;
  }
}
</code></pre><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a><strong>BFC</strong></h4><p>块级格式化上下文, 触发BFC即可清除浮动。<br><a href="https://www.jianshu.com/p/66632298e355" target="_blank" rel="external">https://www.jianshu.com/p/66632298e355</a><br><a href="http://www.mamicode.com/info-detail-1908377.html" target="_blank" rel="external">父元素高度塌陷的解决办法</a></p>
<p>能触发BFC的属性: </p>
<pre><code>float:*;
overflow:hidden/auto;
display:table;
display:table-cell;
display:table-caption;
display:inline-block;
position:fixed;
position:absolute;
</code></pre><h4 id="工具样式（包含清除浮动）"><a href="#工具样式（包含清除浮动）" class="headerlink" title="工具样式（包含清除浮动）"></a><strong>工具样式（包含清除浮动）</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-block</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pull-right</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pull-left</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-right</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: right <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-left</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: left <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-center</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.hide</span> &#123;</div><div class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.show</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.invisible</span> &#123;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-hide</span> &#123;</div><div class="line">    <span class="attribute">font</span>: <span class="number">0</span>/<span class="number">0</span> a;</div><div class="line">    <span class="attribute">color</span>: transparent;</div><div class="line">    <span class="attribute">text-shadow</span>: none;</div><div class="line">    <span class="attribute">background-color</span>: transparent;</div><div class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* :before是为了浏览器顶部空白崩溃,防止margin的叠加 */</span></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* IE6/7 */</span></div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">  <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="a标签的LVHA设置"><a href="#a标签的LVHA设置" class="headerlink" title="a标签的LVHA设置"></a><strong>a标签的LVHA设置</strong></h4><p>一个鼠标经过的未访问链接同时拥有a:link、a:hover两种属性，在CSS中，如果对于相同元素有针对不同条件的定义，宜将最一般的条件放在最上面，并依次向下，保证最下面的是最特殊的条件。</p>
<p>（LoVe/HAte）原则</p>
<blockquote>
<p>a:link、a:visited、a:hover、a:active</p>
</blockquote>
<pre><code>a {
  color: #666;
  text-decoration: none;
}
a:hover, a:active {
  color: #0ae;
  text-decoration: underline;
}
</code></pre><h4 id="chrome浏览器中文字号12px下限问题"><a href="#chrome浏览器中文字号12px下限问题" class="headerlink" title="chrome浏览器中文字号12px下限问题"></a><strong>chrome浏览器中文字号12px下限问题</strong></h4><pre><code>/* 问题: 针对中文line-height:3rem (是36px而不是30px) */
html{
    font-size:62.5%;  (10px &lt; 12px, chrome最小支持12px, 所以3rem是36px, 而不是我们想要的30px)
}
/* 解决 */
html{
    font-size:125%;  (20px)
}
</code></pre><h4 id="inline巧用伪类换行"><a href="#inline巧用伪类换行" class="headerlink" title="inline巧用伪类换行"></a>inline巧用伪类换行</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 为了清除浮动, 达到换行的效果 */</span></div><div class="line"><span class="selector-class">.product</span> <span class="selector-tag">h2</span> <span class="selector-tag">em</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline;  <span class="comment">/* 属性值为inline-block则不换行 */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.product</span> <span class="selector-tag">h2</span> <span class="selector-tag">em</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="HTML中的空白符"><a href="#HTML中的空白符" class="headerlink" title="HTML中的空白符"></a><strong>HTML中的空白符</strong></h4><p>HTML中空白符会在某些浏览器（如chrome）中导致一些小BUG，导致元素之间存在间隙。<br>解决办法有：删除换行符；使用float；对父元素设置font-size：0；使用CSS4中的white-space-collapsing。</p>
<h3 id="6-移动端样式"><a href="#6-移动端样式" class="headerlink" title="6. 移动端样式"></a>6. 移动端样式</h3><p>chrome调试工具选择show media queries和 show rulers </p>
<p><strong>@media属性</strong><br>媒介查询@media这一属性是CSS3中的属性（早在CSS2中已经出现部分属性）。其语法相当于一个判断语句，可以理解为当满足某个条件的时候，去添加括号内的样式。</p>
<pre><code>@media all and(min-width:800px) and (orientation:landscape){
    ......
    //@media申明类型
    //all代表媒体类型，可为print(打印)或者是screen（屏幕显示）
    //and（逻辑操作符）
}
</code></pre><p>逻辑操作符<br><code>and</code>：与，操作符左右都满足为真<br><code>or</code>：或，操作符左右有一个满足为真，可用逗号替代<br><code>not</code>：非，后跟的表达式，只对逗号或or以前的表达式有效，类似于括号 例如：@media (not(screen and(colod))),print and (color){}<br><code>only</code>：只有，防止老旧浏览器不兼容。例如：<br>@media = “only screen and（min-width:401px）and (max-width:600px)等效于 @media = “only”<br>//only后跟的所有样式都会失效，都不会显示<br>@media = “screen and（min-width:401px）and (max-width:600px) 等效于 @media = “screen”<br>//screen后跟的所有逻辑操作符失效，都会显示该媒体查询内的样式</p>
<p><strong>相对单位rem和em</strong><br>em相对参照物为父元素font-size，具有继承的特点，缺点是因为依赖父元素的大小，容易混乱；<br>rem的相对参照物为根元素html，固定不变。<br>在浏览器的默认设置中，1个em或者rem 都等于16px。</p>
<p><strong>如何选择媒介查询的单位</strong></p>
<p>断点单位可设置px或rem或em</p>
<pre><code>1. px
  根据设备宽度有功能的区分时必须用px, 
eg: 在ipad下没有购买按钮, 在iphone下有购买按钮 (功能)
2. rem (同em)
 媒体查询仅改变样式时, rem能让用户体验变得更好
3. em 兼容性更好, 其余同rem, 因为都是相对浏览器的默认字体大小16px; 
</code></pre><p>在媒体查询中，相对单位rem和em的基准高于html，所以与在html中设置的rem大小并不一致。媒体查询相对不是html的font-size, 而是浏览器的默认字体大小16px。</p>
<p>1rem=1em=16px。另外，rem兼容性不如em，故采用兼容性更好的em为媒体查询的断点单位。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">方案: 书写在要改变元素的下面</div><div class="line"><span class="comment">/* 最大屏幕的样式 */</span></div><div class="line"><span class="comment">/* px为断点单位 */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">800px</span>)&#123;</div><div class="line">    <span class="comment">/* 中等屏幕 样式 */</span></div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">481px</span>) and (max-width: <span class="number">800px</span>)&#123;</div><div class="line">    <span class="comment">/* Tablet 样式 */</span></div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">480px</span>)&#123;</div><div class="line">    <span class="comment">/* mobile 样式 */</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/* rem为断点单位,1rem = 16px (浏览器的默认设置) */</span></div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">50rem</span> &#123; <span class="comment">/* 800/16px=50rem */</span></div><div class="line">    <span class="comment">/* 中等屏幕 样式 */</span></div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">30.0625rem</span>) and (max-width: <span class="number">50rem</span>)&#123;</div><div class="line">    <span class="comment">/* Tablet 样式 */</span></div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">30rem</span>)&#123;</div><div class="line">    <span class="comment">/* mobile 样式 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-css3选择器总结"><a href="#7-css3选择器总结" class="headerlink" title="7. css3选择器总结"></a>7. css3选择器总结</h3><p><a href="http://css.doyoe.com/" target="_blank" rel="external">css参考手册</a></p>
<p>兄弟选择器</p>
<pre><code>/* css */
ul li + li {
    /* 第一个li被排除 */
}
/* html */
 &lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>属性选择器</p>
<pre><code>/* 属性选择器 */
E[attr]
E[attr=&quot;value&quot;]
E[attr*=&quot;value&quot;]    // 包含..
/* 以下不常用 */
E[attr^=&quot;value&quot;]    // 以..开头
E[attr$=&quot;value&quot;]    // 以..结尾

E[attr~=&quot;value&quot;]    // 包含..,且..是以空格隔开的
E[attr|=&quot;value&quot;]    // 以..为属性 或 ..-开头的   
---
Eg.
a[herf^=&quot;http://&quot;]      /* 双引号不能省 */
img[src$=&quot;.png&quot;]
a[title~=&quot;hello&quot;] a[title~=&quot;world&quot;] 都可选择 &lt;a title=&quot;hello world&quot;&gt;&lt;/a&gt;
div[class|=&quot;a&quot;]   选择 &lt;div class=&quot;a&quot;&gt; 或 &lt;div class=&quot;a-**&quot;&gt;
</code></pre><p>伪类和伪元素</p>
<pre><code>1.常用   :link, :visited, :hover, :active, :focus
2.表单   :enabled, :disabled, checked
3. 
    /* p:nth-child(2) 1. p类型, 第2个索引上的 */
    :first-child, :last-child
    :nth-child(even/odd/2n+1/2n), :nth-last-child()         /* 表达式值从1开始 */
    /* p:nth-of-type(2) 1. p类型, 在该类型中的第2个 */
    :first-of-type, :last-of-type
    :nth-of-type(), :nth-last-of-type()
    :only-child      // 只有1个元素, 且元素类型为指定类型
    :only-of-type    // 可以有多个元素, 但只有一个该类型元素
    :empty     //可以有注释, 不包含文本节点(包括空格)和元素节点 (注释不算文本节点)
    :not()
    :first-line
    :first-letter
    :before
    :after
    // 在新标准中要求伪元素用::, ::before, ::after
    // 但是:before和:after在css2.0就实现了
    // 最终为了兼容性用:before和:after
    // 其余的伪元素比如::selection必须写::
    ---
    &lt;div&gt;
        &lt;p&gt;&lt;/p&gt;
        &lt;h2&gt;&lt;/h2&gt;
        &lt;p&gt;&lt;/p&gt;  /* 选中 */
        &lt;p&gt;&lt;/p&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/div&gt;
    /* 此时下面两种写法等价 */
    div p:nth-child(3) {}
    div p:nth-of-type(2) {}
</code></pre><h3 id="8-响应式图片"><a href="#8-响应式图片" class="headerlink" title="8. 响应式图片"></a>8. 响应式图片</h3><p>图片的排版和布局自适应，根据设备的大小加载不同的图片。</p>
<h4 id="1-js或服务端-命令式的实现"><a href="#1-js或服务端-命令式的实现" class="headerlink" title="1. js或服务端 (命令式的实现)"></a>1. js或服务端 (命令式的实现)</h4><p>(a) js中设置<br>根据window的resize事件改编src的路径</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeImageResponsive</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = $(<span class="built_in">window</span>).width();</div><div class="line">    <span class="keyword">var</span> img = $(<span class="string">'.content img'</span>);</div><div class="line">    <span class="keyword">if</span> (width &lt;= <span class="number">480</span>) &#123;</div><div class="line">      img.attr(<span class="string">'src'</span>, <span class="string">'img/480.png'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width &lt;= <span class="number">800</span>) &#123;</div><div class="line">      img.attr(<span class="string">'src'</span>, <span class="string">'img/800.png'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      img.attr(<span class="string">'src'</span>, <span class="string">'img/1600.png'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'resize load'</span>, makeImageResponsive);</div><div class="line">&#125;);</div><div class="line">  <span class="comment">/*</span></div><div class="line">  原生: </div><div class="line">        window.onresize = function()&#123;&#125;;</div><div class="line">        window.onload = function()&#123;&#125;;</div><div class="line">   */</div></pre></td></tr></table></figure>
<p>(b) 服务器端设置<br>设备信息写入cookie, 获取图片时在服务器端返回响应图片</p>
<h4 id="2-srcset和sizes-声明式的实现"><a href="#2-srcset和sizes-声明式的实现" class="headerlink" title="2. srcset和sizes (声明式的实现)"></a>2. srcset和sizes (声明式的实现)</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img" target="_blank" rel="external">HTML Image 元素</a><br><a href="http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/" target="_blank" rel="external">响应式图片srcset全新释义sizes属性w描述符</a></p>
<blockquote>
<p>-&gt; srcset是img的特性, 支持该特性的浏览器会自动根据屏幕宽度改变<br>-&gt; sizes是阈值的参照, 默认100vw(100% viewport width),而不是父级的尺寸<br>-&gt; 如果浏览器中缓存过最大尺寸图片, 则任何尺寸下都用该图<br>-&gt; radio放缩比为2时, 响应断点不是简单的图片宽度/放缩比, 而比该值大,浏览器的内部实现逻辑综合考虑了radio,网速,设备等因素, 所以不用理会</p>
</blockquote>
<p> srcset新规范中没有w修饰符<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;img class="image" src="img/480.png" srcset="img/480.png 480w, img/800.png 800w, img/1600.png 1600w" &gt; &lt;!-- 默认sizes是100vw (100% of viewport width) --&gt;</div><div class="line">&lt;!-- 媒体查询大于800px时, size是800px;  其余时100% --&gt;</div><div class="line">&lt;img class="image" src="img/480.png" srcset="img/480.png 480w, img/800.png 800w, img/1600.png 1600w"  sizes="(min-width:800px) 800px, 100vw"&gt; </div><div class="line">&lt;!-- 媒体查询大于800px时, size是cal(100vw - 30px);  其余时100% --&gt;</div><div class="line">&lt;img class="image" src="img/480.png" srcset="img/480.png 480w, img/800.png 800w, img/1600.png 1600w"  sizes="(min-width:800px) cal(100vw - 30px), 100vw"&gt;</div></pre></td></tr></table></figure></p>
<h4 id="3-picture元素处理"><a href="#3-picture元素处理" class="headerlink" title="3. picture元素处理"></a>3. picture元素处理</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/picture" target="_blank" rel="external">HTML <picture> 元素</picture></a><br><a href="https://www.w3cplus.com/html5/quick-tip-how-to-use-html5-picture-for-responsive-images.html" target="_blank" rel="external">如何使用 HTML5 的picture元素处理响应式图片</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 简单demo --&gt;</div><div class="line">&lt;picture&gt;</div><div class="line">    &lt;source srcset="smaller.jpg" media="(max-width: 768px)"&gt;</div><div class="line">    &lt;source srcset="default.jpg"&gt;</div><div class="line">    &lt;img srcset="default.jpg" alt="My default image"&gt;</div><div class="line">&lt;/picture&gt;</div><div class="line">&lt;!-- 复杂demo --&gt;</div><div class="line">&lt;picture&gt;</div><div class="line">    &lt;source srcset="smaller_landscape.jpg" media="(max-width: 40em) and (orientation: landscape)"&gt;</div><div class="line">    &lt;source srcset="smaller_portrait.jpg" media="(max-width: 40em) and (orientation: portrait)"&gt;</div><div class="line">    &lt;source srcset="default_landscape.jpg" media="(min-width: 40em) and (orientation: landscape)"&gt;</div><div class="line">    &lt;source srcset="default_portrait.jpg" media="(min-width: 40em) and (orientation: portrait)"&gt;</div><div class="line">    &lt;img srcset="default_landscape.jpg" alt="My default image"&gt;</div><div class="line">&lt;/picture&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li>svg(支持矢量图)</li>
<li>polyfill<br><a href="https://github.com/scottjehl/picturefill/" target="_blank" rel="external">picturefill</a></li>
</ol>
<h3 id="9-兼容性处理"><a href="#9-兼容性处理" class="headerlink" title="9. 兼容性处理"></a>9. 兼容性处理</h3><p><a href="http://browserhacks.com/" target="_blank" rel="external"><strong>Browser hacks</strong></a></p>
<p><strong>Polyfill或shiv</strong></p>
<blockquote>
<p>通过旧浏览器的API来模拟新浏览器功能的兼容库</p>
</blockquote>
<p><strong><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="external">html5shiv</a></strong></p>
<blockquote>
<p>让IE6-9,Safari 4.x (and iPhone 3.x), and Firefox3.x.等支持html标签(header,nav,footer,section等)</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[if lt IE 9]&gt;</div><div class="line">    &lt;script src="bower_components/html5shiv/dist/html5shiv.js"&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><strong><a href="https://github.com/scottjehl/Respond" target="_blank" rel="external">respond.js</a></strong> (polyfill)</p>
<blockquote>
<p>for min/max-width CSS3 Media Queries (for IE 6-8, and more)</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 仅实现支持一下css3媒体查询功能 */</span> </div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>) and (max-width: <span class="number">800px</span>) &#123;</div><div class="line">    <span class="comment">/** ... **/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="external">modernizr</a></strong><br><a href="https://www.tuicool.com/articles/UVnEVj" target="_blank" rel="external">Modernizr.js入门教程</a></p>
<blockquote>
<p>It tells you what HTML,CSS and JavaScript features the user’s browser has to offer.</p>
<p>Modernizr帮助我们检测浏览器是否实现了某个feature，如果实现了那么开发人员就可以充分利用这个feature做一些工作，反之没有实现开发人员也好提供一个fallback。所以，我们要明白的是Modernizr只是帮我们检测feature是否被支持，它并不能够给浏览器添加那些本来不支持的feature。</p>
<p>防御型编程, 主动检测属性的支持</p>
</blockquote>
<p>CSS方面</p>
<blockquote>
<p>当我们引入了Modernizr.js类库后， <html>标签的class属性就会被相应的赋值，以显示浏览器是否支持某类CSS属性。<br>以SVG举例 : 如果浏览器不支持SVG特性，那么在 <html>标签中就会出现 no-svg 类，我们可以做一些fallback的工作;如果支持，则生成svg类。</html></html></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.svg</span> <span class="selector-class">.logo</span>&#123;</div><div class="line">    <span class="attribute">bgackground-image</span>:<span class="built_in">url</span>(img/logo.svg);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.no-svg</span> <span class="selector-class">.logo</span>&#123;</div><div class="line">    <span class="attribute">bgackground-image</span>:<span class="built_in">url</span>(img/logo.png);    <span class="comment">/* fallback */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><a href="https://caniuse.com/" target="_blank" rel="external">Can I use</a></strong></p>
<h3 id="10-调试和打包发布以及其他"><a href="#10-调试和打包发布以及其他" class="headerlink" title="10. 调试和打包发布以及其他"></a>10. 调试和打包发布以及其他</h3><p><a href="http://www.browsersync.cn/" target="_blank" rel="external">BrowserSync多设备调试</a></p>
<p><a href="https://github.com/indexzero/http-server" target="_blank" rel="external">http-server</a></p>
<p>打包：压缩,合并,增加版本号。<br>grunt 自动化构建工具<br>gulp 自动化构建工具<br>Webpack 静态资源打包工具</p>
<p><em>产品原型设计</em><br>纸笔<br>axure RP<br>Sketch (苹果) (原型/UI/矢量图)</p>
<p><em>交互设计</em><br>flinto (Mac)<br>principle (Mac) </p>
<h3 id="11-文章引用来源"><a href="#11-文章引用来源" class="headerlink" title="11. 文章引用来源"></a>11. 文章引用来源</h3><p><a href="https://www.imooc.com/article/11729" target="_blank" rel="external">https://www.imooc.com/article/11729</a><br><a href="https://ylzzxt.cn/2016/%E6%89%80%E5%90%91%E6%8A%AB%E9%9D%A1%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/" target="_blank" rel="external">https://ylzzxt.cn/2016/%E6%89%80%E5%90%91%E6%8A%AB%E9%9D%A1%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/</a><br><a href="https://www.zybuluo.com/GivenCui/note/685097" target="_blank" rel="external">https://www.zybuluo.com/GivenCui/note/685097</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS水平垂直居中]]></title>
      <url>/2018/02/02/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/yanhaijing/vertical-center" target="_blank" rel="noopener">vertical-center</a><br>全部从该项目转载，侵删。</p>
<h1 id="仅居中元素定宽高适用："><a href="#仅居中元素定宽高适用：" class="headerlink" title="仅居中元素定宽高适用："></a>仅居中元素定宽高适用：</h1><p>absolute + 负margin</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    position: absolute;;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">left</span>: 50%;</span><br><span class="line">    <span class="selector-tag">margin-left</span>: <span class="selector-tag">-50px</span>;</span><br><span class="line">    <span class="selector-tag">margin-top</span>: <span class="selector-tag">-50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>absolute + margin auto</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    position: absolute;;</span><br><span class="line">    <span class="selector-tag">top</span>: 0;</span><br><span class="line">    <span class="selector-tag">left</span>: 0;</span><br><span class="line">    <span class="selector-tag">right</span>: 0;</span><br><span class="line">    <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>absolute + calc</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    position: absolute;;</span><br><span class="line">    <span class="selector-tag">top</span>: <span class="selector-tag">calc</span>(50% <span class="selector-tag">-</span> 50<span class="selector-tag">px</span>);</span><br><span class="line">    <span class="selector-tag">left</span>: <span class="selector-tag">calc</span>(50% <span class="selector-tag">-</span> 50<span class="selector-tag">px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="居中元素不定宽高适用："><a href="#居中元素不定宽高适用：" class="headerlink" title="居中元素不定宽高适用："></a>居中元素不定宽高适用：</h1><p>absolute + transform</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    position: absolute;;</span><br><span class="line">    <span class="selector-tag">top</span>: 50%;</span><br><span class="line">    <span class="selector-tag">left</span>: 50%;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>writing-mode</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">writing-mode</span>: vertical-lr;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wp-inner</span> &#123;</span><br><span class="line">    <span class="attribute">writing-mode</span>: horizontal-tb;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>lineheight</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">line-height</span>: initial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>table</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>css-table</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>flex</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>grid</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[You2php使用（完全转载）]]></title>
      <url>/2018/01/12/You2php%E4%BD%BF%E7%94%A8%EF%BC%88%E5%AE%8C%E5%85%A8%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="什么是You2php"><a href="#什么是You2php" class="headerlink" title="什么是You2php?"></a>什么是You2php?</h1><p>You2PHP是一个用PHP开发的Youtube流量代理脚本、通过对接谷歌api获取数据，可用来搭建Youtube视频镜像站、可实现长城之内观看Youtube。<br>详情官网：<a href="https://you2php.github.io" target="_blank" rel="noopener">https://you2php.github.io</a><br>免翻墙：<a href="https://github.com/You2php/you2php/" target="_blank" rel="noopener">https://github.com/You2php/you2php/</a></p>
<h1 id="简单原理："><a href="#简单原理：" class="headerlink" title="简单原理："></a>简单原理：</h1><p>我是将You2php部署在000webhost的海外免费虚拟主机上，绑定自己免费域名，再通过cloud flare进行DNS免费加速，实现看油管视频的。000webhost为每个free app提供10G/月的流量，所以还得省点使用。</p>
<a id="more"></a>
<h1 id="具体部署："><a href="#具体部署：" class="headerlink" title="具体部署："></a>具体部署：</h1><h1 id="1-准备梯子："><a href="#1-准备梯子：" class="headerlink" title="1.准备梯子："></a>1.准备梯子：</h1><p>因为部分网页的账户注册，还有youtube api的获取，需要梯子才能进行。请有代理的人士可以跳过这一步骤，没有先暂时使用下面链接的作者的方法吧。（注意：对宗教敏感的人士请不要使用，里面的软件都涉及到宗教信息，想搭梯子请另找他路吧。）<a href="https://github.com/bannedbook/fanqiang/wiki" target="_blank" rel="noopener">https://github.com/bannedbook/fanqiang/wiki</a></p>
<p>获取Youtube API：请查看教程 <a href="https://laod.cn/tools/you2b-php.html" target="_blank" rel="noopener">https://laod.cn/tools/you2b-php.html</a></p>
<p>获取you2php的源码：下载压缩包 <a href="https://zhujiwiki.com/12297.html" target="_blank" rel="noopener">https://zhujiwiki.com/12297.html</a> 或者 <a href="https://github.com/pigmanidea/you2php-000webhost/blob/master/you2php.zip" target="_blank" rel="noopener">https://github.com/pigmanidea/you2php-000webhost/blob/master/you2php.zip</a></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/1.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<h1 id="2-申请免费域名："><a href="#2-申请免费域名：" class="headerlink" title="2.申请免费域名："></a>2.申请免费域名：</h1><p>该过程需要梯子。请访问网站链接：<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">https://www.freenom.com/zh/index.html?lang=zh</a><br>第一步：注册一个账户。<br><figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/2.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/3.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>使用谷歌邮箱登陆。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/4.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>我们要创建一个免费域名。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/5.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>查找域名，比如：pigman</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/6.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>任意选择一个，都是免费的。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/7.png" alt="Alt text"></p>
<p>点击“checkout”。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/8.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>点击购买12个月。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/9.png" alt="Alt text"></p>
<p>打沟，其他信息可以不填，然后直接下一步。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/10.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>已经购买成功，跳回主页。</p>
<h1 id="3-申请000webhost账号，获得免费虚拟主机。"><a href="#3-申请000webhost账号，获得免费虚拟主机。" class="headerlink" title="3.申请000webhost账号，获得免费虚拟主机。"></a>3.申请000webhost账号，获得免费虚拟主机。</h1><p>请登录网址 <a href="https://www.000webhost.com/" target="_blank" rel="noopener">https://www.000webhost.com/</a> 注册时候需要梯子。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/11.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/12.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>这一步应该不难吧？注册完成后要验证邮箱地址，查看Email，验证000webhost的注册地址，即可申请成功。邮件的收到可能需要一点时间，请耐心等待几分钟。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/13.png" alt="Alt text"></p>
<p>申请成功，进行登陆。Log in.</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/14.png" alt="Alt text"></p>
<p>点击管理，因为它已经为我们创建一个免费app了，所以可以开始进行you2php的上传。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/15.png" alt="Alt text"></p>
<p>点击上传。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/16.png" alt="Alt text"></p>
<p>进去看到这个界面，将htaccess这个文件删除，否则播放视频会出现错误。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/17.png" alt="Alt text"></p>
<p>单机右键，删除。<br>有时候网页会要我们重新登陆，你可以重新再进去，或者再登陆000webhost.</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/60.png" alt="Alt text"></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/18.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/19.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>上传文件</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/20.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>这个界面表示，上传文件成功。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/21.png" alt="Alt text"></p>
<p>我们要把它解压出来。并重命名，比如：2018。“2018”文件夹作为空间的根目录。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/22.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>可以将压缩包删除了。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/23.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>进入我的“2018”的文件里，看到“you2php”,再点进去，将里面文件移出来。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/24.png" alt="Alt text"></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/25.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/26.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/27.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/28.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/29.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>即可看到此列表。</p>
<p>接下来，将“2018”文件加锁。因为不加锁容易被GFW封锁，可能被别人盗取信息，比如你的YouTube api。下面进行演示：<br><figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/30.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure><br><figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/31.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure><br><figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/32.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure><br><figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/33.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure></p>
<p>选择自己要加锁的文件夹，设置用户名和密码。</p>
<p>绑定自己的域名：</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/34.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/35.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/36.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/37.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/38.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>添加自己的域名</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/39.png" alt="Alt text"></p>
<p>复制这行字。接下来到刚刚买域名的网站进行绑定。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/40.png" alt="Alt text"></p>
<p>登陆，选择 my domains.</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/41.png" alt="Alt text"></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/42.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/43.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>按格式填写。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/44.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>成功绑定域名。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/45.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>回到000webhost检查，域名是否连接我的app了，这一过程请等5分钟。跳不出来请重新登陆000webhost,检查。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/46.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>000webhost收到响应了，我们需要link它。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/47.png" alt="Alt text"></p>
<p>最后的连接步骤</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/48.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>连接成功的界面。</p>
<ol start="5">
<li>进行DNS加速。<br>注册cloudflare.账号， <a href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener">https://dash.cloudflare.com/sign-up</a><br>注意这一步骤必须先使域名成功绑定000webhost后，才能继续进行这一步。</li>
</ol>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/49.png" alt="Alt text"></p>
<p>按要求填写，验证邮箱，即可成功。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/50.png" alt="Alt text"></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/51.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>添加要加速的域名。</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/52.png" alt="Alt text"></p>
<p>点击下一步</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/53.png" alt="Alt text"></p>
<p>选择免费项</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/54.png" alt="Alt text"></p>
<p>点击继续</p>
<p><img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/55.png" alt="Alt text"></p>
<p>先复制第一项，再复制第二项，将上面的两行地址，和刚刚申请域名的界面里进行替换。如下图：</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/56.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>回到cloudflare，点击继续，等10几分钟，当你看到下面的绿色条纹，即连接成功。</p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/57.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>好了，现在可以说离成功只差最后一步了。</p>
<h1 id="6-You2php的安装"><a href="#6-You2php的安装" class="headerlink" title="6.You2php的安装:"></a>6.You2php的安装:</h1><p>请使用火狐浏览器或者谷歌浏览器登陆你的you2php。个人测试，国产的浏览器观看速度很慢，甚至出现视频播放失败的状况。请使用国外浏览器观看。<br>进入你的you2php，请在域名后面加上文件名，也就是放you2php的空间根目录，比如“/2018”，我的是这个(<a href="https://pigman.ml/2018)。这里面一个小细节：https与http,其中第一个会比较安全。一般建议你用https，然而我们部署完后，https协议得等一段时间才能生效，最晚24小时，你现在先用http协议吧。" target="_blank" rel="noopener">https://pigman.ml/2018)。这里面一个小细节：https与http,其中第一个会比较安全。一般建议你用https，然而我们部署完后，https协议得等一段时间才能生效，最晚24小时，你现在先用http协议吧。</a></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/58.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>进去后要你输入你的用户名，密码。</p>
<p>接下来步骤，请按照这位作者的步骤填写吧：<a href="https://laod.cn/tools/you2b-php.html" target="_blank" rel="noopener">https://laod.cn/tools/you2b-php.html</a></p>
<figure class="image-box">
                <img src="https://github.com/pigmanidea/you2php-000webhost/raw/master/images/59.png" alt="Alt text" title="" class="">
                <p>Alt text</p>
            </figure>
<p>认真填写，点击继续，安装完成后，即可观看啦。</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hyperledger composer-sample-networks（五）]]></title>
      <url>/2017/12/31/hyperledger%20composer-sample-networks%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="1-basic-sample-network"><a href="#1-basic-sample-network" class="headerlink" title="1. basic-sample-network"></a>1. basic-sample-network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/basic-sample-network" target="_blank" rel="external">basic-sample-network</a></p>
<blockquote>
<p>This is the “Hello World” of Hyperledger Composer samples, which demonstrates the core functionality of Hyperledger Composer by changing the value of an asset.</p>
</blockquote>
<h4 id="Participant-SampleParticipant"><a href="#Participant-SampleParticipant" class="headerlink" title="Participant SampleParticipant"></a><strong>Participant</strong> SampleParticipant</h4><h4 id="Asset-SampleAsset"><a href="#Asset-SampleAsset" class="headerlink" title="Asset SampleAsset"></a><strong>Asset</strong> SampleAsset</h4><h4 id="Transaction-SampleTransaction"><a href="#Transaction-SampleTransaction" class="headerlink" title="Transaction SampleTransaction"></a><strong>Transaction</strong> SampleTransaction</h4><h4 id="Event-SampleEvent"><a href="#Event-SampleEvent" class="headerlink" title="Event SampleEvent"></a><strong>Event</strong> SampleEvent</h4><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3hfyudj20kc0degnn.jpg" alt="basic"></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice can read all of the assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Get the assets.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.getAll();</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">assets</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the assets.</span></div><div class="line">            assets.should.have.lengthOf(<span class="number">2</span>);</div><div class="line">            <span class="keyword">const</span> asset1 = assets[<span class="number">0</span>];</div><div class="line">            asset1.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#alice@email.com'</span>);</div><div class="line">            asset1.value.should.equal(<span class="string">'10'</span>);</div><div class="line">            <span class="keyword">const</span> asset2 = assets[<span class="number">1</span>];</div><div class="line">            asset2.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#bob@email.com'</span>);</div><div class="line">            asset2.value.should.equal(<span class="string">'20'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3i2m1sj20kb0angmt.jpg" alt="Alice can read all of the assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob can read all of the assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Get the assets.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.getAll();</div><div class="line"></div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">assets</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the assets.</span></div><div class="line">            assets.should.have.lengthOf(<span class="number">2</span>);</div><div class="line">            <span class="keyword">const</span> asset1 = assets[<span class="number">0</span>];</div><div class="line">            asset1.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#alice@email.com'</span>);</div><div class="line">            asset1.value.should.equal(<span class="string">'10'</span>);</div><div class="line">            <span class="keyword">const</span> asset2 = assets[<span class="number">1</span>];</div><div class="line">            asset2.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#bob@email.com'</span>);</div><div class="line">            asset2.value.should.equal(<span class="string">'20'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3iozshj20kc09umyb.jpg" alt="bob read"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice can add assets that she owns'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset3 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'3'</span>);</div><div class="line">            asset3.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'alice@email.com'</span>);</div><div class="line">            asset3.value = <span class="string">'30'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Add the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.add(asset3)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.get(<span class="string">'3'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset3</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset3.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#alice@email.com'</span>);</div><div class="line">            asset3.value.should.equal(<span class="string">'30'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3jb89pj20kc0atabd.jpg" alt="alice assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice cannot add assets that Bob owns'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Use the identity for Alice.</span></div><div class="line">        <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                <span class="comment">// Create the asset.</span></div><div class="line">                <span class="keyword">const</span> asset3 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'3'</span>);</div><div class="line">                asset3.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'bob@email.com'</span>);</div><div class="line">                asset3.value = <span class="string">'30'</span>;</div><div class="line"></div><div class="line">                <span class="comment">// Add the asset, then get the asset.</span></div><div class="line">                <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                    .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="keyword">return</span> assetRegistry.add(asset3);</div><div class="line">                    &#125;);</div><div class="line"></div><div class="line">            &#125;)</div><div class="line">            .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3jxnyxj20ke09wgmt.jpg" alt="Alice cannot add assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob can add assets that he owns'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset4 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'4'</span>);</div><div class="line">            asset4.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'bob@email.com'</span>);</div><div class="line">            asset4.value = <span class="string">'40'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Add the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.add(asset4)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.get(<span class="string">'4'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset4</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset4.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#bob@email.com'</span>);</div><div class="line">            asset4.value.should.equal(<span class="string">'40'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3klf1tj20ke0as75l.jpg" alt="Bob can add assets that he owns"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob cannot add assets that Alice owns'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset4 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'4'</span>);</div><div class="line">            asset4.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'alice@email.com'</span>);</div><div class="line">            asset4.value = <span class="string">'40'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Add the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.add(asset4);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3l6jnvj20kd09zab9.jpg" alt="Bob cannot add assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice can update her assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset1 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'1'</span>);</div><div class="line">            asset1.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'alice@email.com'</span>);</div><div class="line">            asset1.value = <span class="string">'50'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Update the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.update(asset1)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.get(<span class="string">'1'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset1</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset1.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#alice@email.com'</span>);</div><div class="line">            asset1.value.should.equal(<span class="string">'50'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3mfhsjj20kd0ardh5.jpg" alt="Alice can update her assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice cannot update Bob\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset2 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'2'</span>);</div><div class="line">            asset2.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'bob@email.com'</span>);</div><div class="line">            asset2.value = <span class="string">'50'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Update the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.update(asset2);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3n27f2j20ke09wjsl.jpg" alt="Alice cannot update Bob"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob can update his assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset2 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'2'</span>);</div><div class="line">            asset2.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'bob@email.com'</span>);</div><div class="line">            asset2.value = <span class="string">'60'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Update the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.update(asset2)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.get(<span class="string">'2'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset2</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset2.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#bob@email.com'</span>);</div><div class="line">            asset2.value.should.equal(<span class="string">'60'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3nokfhj20kd0azq49.jpg" alt="bob can update his assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob cannot update Alice\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the asset.</span></div><div class="line">            <span class="keyword">const</span> asset1 = factory.newResource(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'1'</span>);</div><div class="line">            asset1.owner = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleParticipant'</span>, <span class="string">'alice@email.com'</span>);</div><div class="line">            asset1.value = <span class="string">'60'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Update the asset, then get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.update(asset1);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3obt7ij20kf09tjsl.jpg" alt="Bob cannot update Alice"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice can remove her assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Remove the asset, then test the asset exists.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.remove(<span class="string">'1'</span>)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.exists(<span class="string">'1'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.eventually.be.false;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3oy4zaj20ke0b6t9w.jpg" alt="Alice can remove her assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice cannot remove Bob\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Remove the asset, then test the asset exists.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.remove(<span class="string">'2'</span>);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3pmdx2j20kd0a2wfm.jpg" alt="Alice cannot remove Bob&#39;s assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob can remove his assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Remove the asset, then test the asset exists.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.remove(<span class="string">'2'</span>)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> assetRegistry.exists(<span class="string">'2'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.eventually.be.false;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3q7efmj20kb0b4t9w.jpg" alt="Bob can remove his assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob cannot remove Alice\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Remove the asset, then test the asset exists.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.remove(<span class="string">'1'</span>);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3qtwilj20kd09yq42.jpg" alt="Bob cannot remove Alice&#39;s assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice can submit a transaction for her assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Submit the transaction.</span></div><div class="line">            <span class="keyword">const</span> transaction = factory.newTransaction(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleTransaction'</span>);</div><div class="line">            transaction.asset = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'1'</span>);</div><div class="line">            transaction.newValue = <span class="string">'50'</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.get(<span class="string">'1'</span>);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset1</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset1.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#alice@email.com'</span>);</div><div class="line">            asset1.value.should.equal(<span class="string">'50'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Validate the events.</span></div><div class="line">            events.should.have.lengthOf(<span class="number">1</span>);</div><div class="line">            <span class="keyword">const</span> event = events[<span class="number">0</span>];</div><div class="line">            event.eventId.should.be.a(<span class="string">'string'</span>);</div><div class="line">            event.timestamp.should.be.an.instanceOf(<span class="built_in">Date</span>);</div><div class="line">            event.asset.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleAsset#1'</span>);</div><div class="line">            event.oldValue.should.equal(<span class="string">'10'</span>);</div><div class="line">            event.newValue.should.equal(<span class="string">'50'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3rfe7zj20kd0dadhc.jpg" alt="Alice can submit a transaction for her assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Alice cannot submit a transaction for Bob\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Alice.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Submit the transaction.</span></div><div class="line">            <span class="keyword">const</span> transaction = factory.newTransaction(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleTransaction'</span>);</div><div class="line">            transaction.asset = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'2'</span>);</div><div class="line">            transaction.newValue = <span class="string">'50'</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3s2nfrj20kf0ac75h.jpg" alt="Alice cannot submit"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob can submit a transaction for his assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Submit the transaction.</span></div><div class="line">            <span class="keyword">const</span> transaction = factory.newTransaction(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleTransaction'</span>);</div><div class="line">            transaction.asset = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'2'</span>);</div><div class="line">            transaction.newValue = <span class="string">'60'</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Get the asset.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'org.acme.sample.SampleAsset'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.get(<span class="string">'2'</span>);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">asset2</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Validate the asset.</span></div><div class="line">            asset2.owner.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleParticipant#bob@email.com'</span>);</div><div class="line">            asset2.value.should.equal(<span class="string">'60'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Validate the events.</span></div><div class="line">            events.should.have.lengthOf(<span class="number">1</span>);</div><div class="line">            <span class="keyword">const</span> event = events[<span class="number">0</span>];</div><div class="line">            event.eventId.should.be.a(<span class="string">'string'</span>);</div><div class="line">            event.timestamp.should.be.an.instanceOf(<span class="built_in">Date</span>);</div><div class="line">            event.asset.getFullyQualifiedIdentifier().should.equal(<span class="string">'org.acme.sample.SampleAsset#2'</span>);</div><div class="line">            event.oldValue.should.equal(<span class="string">'20'</span>);</div><div class="line">            event.newValue.should.equal(<span class="string">'60'</span>);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3soxk6j20ke0cymyo.jpg" alt="Bob can submit a transaction for his assets"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'Bob cannot submit a transaction for Alice\'s assets'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Use the identity for Bob.</span></div><div class="line">    <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Submit the transaction.</span></div><div class="line">            <span class="keyword">const</span> transaction = factory.newTransaction(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleTransaction'</span>);</div><div class="line">            transaction.asset = factory.newRelationship(<span class="string">'org.acme.sample'</span>, <span class="string">'SampleAsset'</span>, <span class="string">'1'</span>);</div><div class="line">            transaction.newValue = <span class="string">'60'</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">        .should.be.rejectedWith(<span class="regexp">/does not have .* access to resource/</span>);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3tbgpkj20ke0bzmyk.jpg" alt="Bob cannot submit a transaction for Alice"></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hyperledger composer-sample-networks（四）]]></title>
      <url>/2017/12/24/hyperledger%20composer-sample-networks%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="1-pii-network"><a href="#1-pii-network" class="headerlink" title="1. pii-network"></a>1. pii-network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/pii-network" target="_blank" rel="external">Personally Identifiable Information Network</a></p>
<blockquote>
<p>A business network where members can grant/revoke access to their personal information to other members.</p>
</blockquote>
<h4 id="Participant-Member"><a href="#Participant-Member" class="headerlink" title="Participant Member"></a><strong>Participant</strong> Member</h4><h4 id="Transaction-AuthorizeAccess-RevokeAccess"><a href="#Transaction-AuthorizeAccess-RevokeAccess" class="headerlink" title="Transaction AuthorizeAccess RevokeAccess"></a><strong>Transaction</strong> AuthorizeAccess RevokeAccess</h4><p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3g68xnj20ke088mxy.jpg" alt="pii"></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#OwnRecordFullAccess'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'bob should be able to read own data only'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> useIdentity(bobCardName)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// use a query, bob should only see his own data</span></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectMembers'</span>)</div><div class="line">                        .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check results</span></div><div class="line">                            results.length.should.equal(<span class="number">1</span>);</div><div class="line">                            results[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'bob@email.com'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        it(<span class="string">'alice should be able to read own data only'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// use a query, alice should only see her own data</span></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectMembers'</span>)</div><div class="line">                        .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check results</span></div><div class="line">                            results.length.should.equal(<span class="number">1</span>);</div><div class="line">                            results[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'alice@email.com'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    describe(<span class="string">'#ForeignRecordConditionalAccess'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'bob should be able to read alice data IFF granted access'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> useIdentity(aliceCardName)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// alice grants access to her data to bob</span></div><div class="line">                    <span class="keyword">const</span> authorize = factory.newTransaction(<span class="string">'org.acme.pii'</span>, <span class="string">'AuthorizeAccess'</span>);</div><div class="line">                    authorize.memberId = <span class="string">'bob@email.com'</span>;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(authorize);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> useIdentity(bobCardName);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// use a query, bob should be able to see his own and alice's data</span></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectMembers'</span>)</div><div class="line">                        .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check results</span></div><div class="line">                            results.length.should.equal(<span class="number">2</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// switch back to alice</span></div><div class="line">                    <span class="keyword">return</span> useIdentity(aliceCardName);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// alice revokes access to her data to bob</span></div><div class="line">                    <span class="keyword">const</span> revoke = factory.newTransaction(<span class="string">'org.acme.pii'</span>, <span class="string">'RevokeAccess'</span>);</div><div class="line">                    revoke.memberId = <span class="string">'bob@email.com'</span>;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(revoke);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> useIdentity(bobCardName);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// use a query, bob should now only see his own data</span></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectMembers'</span>)</div><div class="line">                        .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check results</span></div><div class="line">                            results.length.should.equal(<span class="number">1</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="2-Trade-Network"><a href="#2-Trade-Network" class="headerlink" title="2. Trade Network"></a>2. Trade Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/trade-network" target="_blank" rel="external">Trade Network</a></p>
<blockquote>
<p>This Business Network illustrates commodity trading.</p>
</blockquote>
<h4 id="Participant-Trader"><a href="#Participant-Trader" class="headerlink" title="Participant Trader"></a><strong>Participant</strong> Trader</h4><h4 id="Asset-Commodity"><a href="#Asset-Commodity" class="headerlink" title="Asset Commodity"></a><strong>Asset</strong> Commodity</h4><h4 id="Transaction-s-Transaction"><a href="#Transaction-s-Transaction" class="headerlink" title="Transaction(s) Transaction"></a><strong>Transaction(s)</strong> Transaction</h4><h4 id="Event-TradeNotification"><a href="#Event-TradeNotification" class="headerlink" title="Event TradeNotification"></a><strong>Event</strong> TradeNotification</h4><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3gte02j20kc07wgmd.jpg" alt="trade"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#tradeCommodity'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    it(<span class="string">'should be able to trade a commodity'</span>, () =&gt; &#123;</div><div class="line">        <span class="keyword">const</span> factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line"></div><div class="line">        <span class="comment">// create the traders</span></div><div class="line">        <span class="keyword">const</span> dan = factory.newResource(namespace, <span class="string">'Trader'</span>, <span class="string">'dan@email.com'</span>);</div><div class="line">        dan.firstName = <span class="string">'Dan'</span>;</div><div class="line">        dan.lastName = <span class="string">'Selman'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> simon = factory.newResource(namespace, <span class="string">'Trader'</span>, <span class="string">'simon@email.com'</span>);</div><div class="line">        simon.firstName = <span class="string">'Simon'</span>;</div><div class="line">        simon.lastName = <span class="string">'Stone'</span>;</div><div class="line"></div><div class="line">        <span class="comment">// create the commodity</span></div><div class="line">        <span class="keyword">const</span> commodity = factory.newResource(namespace, <span class="string">'Commodity'</span>, <span class="string">'EMA'</span>);</div><div class="line">        commodity.description = <span class="string">'Corn'</span>;</div><div class="line">        commodity.mainExchange = <span class="string">'Euronext'</span>;</div><div class="line">        commodity.quantity = <span class="number">100</span>;</div><div class="line">        commodity.owner = factory.newRelationship(namespace, <span class="string">'Trader'</span>, dan.$identifier);</div><div class="line"></div><div class="line">        <span class="comment">// create the trade transaction</span></div><div class="line">        <span class="keyword">const</span> trade = factory.newTransaction(namespace, <span class="string">'Trade'</span>);</div><div class="line">        trade.newOwner = factory.newRelationship(namespace, <span class="string">'Trader'</span>, simon.$identifier);</div><div class="line">        trade.commodity = factory.newRelationship(namespace, <span class="string">'Commodity'</span>, commodity.$identifier);</div><div class="line"></div><div class="line">        <span class="comment">// the owner should of the commodity should be dan</span></div><div class="line">        commodity.owner.$identifier.should.equal(dan.$identifier);</div><div class="line"></div><div class="line">        <span class="comment">// create the second commodity</span></div><div class="line">        <span class="keyword">const</span> commodity2 = factory.newResource(namespace, <span class="string">'Commodity'</span>, <span class="string">'XYZ'</span>);</div><div class="line">        commodity2.description = <span class="string">'Soya'</span>;</div><div class="line">        commodity2.mainExchange = <span class="string">'Chicago'</span>;</div><div class="line">        commodity2.quantity = <span class="number">50</span>;</div><div class="line">        commodity2.owner = factory.newRelationship(namespace, <span class="string">'Trader'</span>, dan.$identifier);</div><div class="line"></div><div class="line">        <span class="comment">// register for events from the business network</span></div><div class="line">        businessNetworkConnection.on(<span class="string">'event'</span>, (event) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'Received event: '</span> + event.getFullyQualifiedIdentifier() + <span class="string">' for commodity '</span> + event.commodity.getIdentifier() );</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// Get the asset registry.</span></div><div class="line">        <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Commodity'</span>)</div><div class="line">            .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">                <span class="comment">// add the commodities to the asset registry.</span></div><div class="line">                <span class="keyword">return</span> assetRegistry.addAll([commodity,commodity2])</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Trader'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">participantRegistry</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// add the traders</span></div><div class="line">                        <span class="keyword">return</span> participantRegistry.addAll([dan, simon]);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// submit the transaction</span></div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.submitTransaction(trade);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Commodity'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// re-get the commodity</span></div><div class="line">                        <span class="keyword">return</span> assetRegistry.get(commodity.$identifier);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">newCommodity</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// the owner of the commodity should now be simon</span></div><div class="line">                        newCommodity.owner.$identifier.should.equal(simon.$identifier);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// use a query</span></div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectCommoditiesByExchange'</span>, &#123;<span class="attr">exchange</span> : <span class="string">'Euronext'</span>&#125;);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// check results</span></div><div class="line">                        results.length.should.equal(<span class="number">1</span>);</div><div class="line">                        results[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'EMA'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// use another query</span></div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectCommoditiesByOwner'</span>, &#123;<span class="attr">owner</span> : <span class="string">'resource:'</span> + simon.getFullyQualifiedIdentifier()&#125;);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">//  check results</span></div><div class="line">                        results.length.should.equal(<span class="number">1</span>);</div><div class="line">                        results[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'EMA'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// submit the remove transaction</span></div><div class="line">                        <span class="keyword">const</span> remove = factory.newTransaction(namespace, <span class="string">'RemoveHighQuantityCommodities'</span>);</div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.submitTransaction(remove);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// use a query</span></div><div class="line">                        <span class="keyword">return</span> businessNetworkConnection.query(<span class="string">'selectCommodities'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</div><div class="line">                        <span class="comment">// check results, should only have 1 commodity left</span></div><div class="line">                        results.length.should.equal(<span class="number">1</span>);</div><div class="line">                        results[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'XYZ'</span>);</div><div class="line">                    &#125;);</div><div class="line">            &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-vehicle-lifecycle-network"><a href="#3-vehicle-lifecycle-network" class="headerlink" title="3. vehicle-lifecycle-network"></a>3. vehicle-lifecycle-network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/vehicle-lifecycle-network" target="_blank" rel="external">vehicle-lifecycle-network</a></p>
<blockquote>
<p>This network tracks the Lifecycle of Vehicles from manufacture to being scrapped involving private owners, manufacturers and scrap merchants. A regulator is able to provide oversight throughout this whole process.</p>
</blockquote>
<h4 id="Participants-AuctionHouse-Company-Manufacturer-PrivateOwner-Regulator-ScrapMerchant"><a href="#Participants-AuctionHouse-Company-Manufacturer-PrivateOwner-Regulator-ScrapMerchant" class="headerlink" title="Participants AuctionHouse Company Manufacturer PrivateOwner Regulator ScrapMerchant"></a><strong>Participants</strong> AuctionHouse Company Manufacturer PrivateOwner Regulator ScrapMerchant</h4><h4 id="Assets-Order-Vehicle"><a href="#Assets-Order-Vehicle" class="headerlink" title="Assets Order Vehicle"></a><strong>Assets</strong> Order Vehicle</h4><h4 id="Transactions-PlaceOrder-UpdateOrderStatus-ApplicationForVehicleRegistrationCertificate-PrivateVehicleTransfer-ScrapVehicle-UpdateSuspicious-ScrapAllVehiclesByColour-SetupDemo"><a href="#Transactions-PlaceOrder-UpdateOrderStatus-ApplicationForVehicleRegistrationCertificate-PrivateVehicleTransfer-ScrapVehicle-UpdateSuspicious-ScrapAllVehiclesByColour-SetupDemo" class="headerlink" title="Transactions PlaceOrder UpdateOrderStatus ApplicationForVehicleRegistrationCertificate PrivateVehicleTransfer ScrapVehicle UpdateSuspicious ScrapAllVehiclesByColour SetupDemo"></a><strong>Transactions</strong> PlaceOrder UpdateOrderStatus ApplicationForVehicleRegistrationCertificate PrivateVehicleTransfer ScrapVehicle UpdateSuspicious ScrapAllVehiclesByColour SetupDemo</h4><h4 id="Events-PlaceOrderEvent-UpdateOrderStatusEvent-ScrapVehicleEvent"><a href="#Events-PlaceOrderEvent-UpdateOrderStatusEvent-ScrapVehicleEvent" class="headerlink" title="Events PlaceOrderEvent UpdateOrderStatusEvent ScrapVehicleEvent"></a><strong>Events</strong> PlaceOrderEvent UpdateOrderStatusEvent ScrapVehicleEvent</h4><p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3tym7fj20ka0io40f.jpg" alt="vehicle"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#placeOrder'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        it(<span class="string">'should be able to place an order for a vehicle'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> placeOrder()</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_M + <span class="string">'.Order'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">orderRegistry</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> orderRegistry.get(orderId);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">order</span>) </span>&#123;</div><div class="line">                    order.orderStatus.should.equal(<span class="string">'PLACED'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    describe(<span class="string">'#updateOrderStatus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        it(<span class="string">'should create a vehicle and assign it a VIN number'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> placeOrder()</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> updateOrder();</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_D + <span class="string">'.Vehicle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicleRegistry</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> vehicleRegistry.get(<span class="string">'VIN_NUMBER'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicle</span>) </span>&#123;</div><div class="line">                    should.exist(vehicle);</div><div class="line">                    vehicle.vehicleStatus.should.equal(<span class="string">'OFF_THE_ROAD'</span>);</div><div class="line">                    vehicle.vehicleDetails.vin.should.equal(<span class="string">'VIN_NUMBER'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        it(<span class="string">'should assign an owner to a vehicle and make it active'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">const</span> updateOrderStatus = factory.newTransaction(NS_M, <span class="string">'UpdateOrderStatus'</span>);</div><div class="line">            updateOrderStatus.orderStatus = <span class="string">'OWNER_ASSIGNED'</span>;</div><div class="line">            updateOrderStatus.vin = <span class="string">'VIN_NUMBER'</span>;</div><div class="line">            updateOrderStatus.numberPlate = <span class="string">'NUMBER_PLATE'</span>;</div><div class="line">            updateOrderStatus.v5c = <span class="string">'V5C'</span>;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> placeOrder()</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> updateOrder();</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_M + <span class="string">'.Order'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">orderRegistry</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> orderRegistry.getAll();</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">orders</span>) </span>&#123;</div><div class="line">                    <span class="keyword">const</span> order = orders[<span class="number">0</span>];</div><div class="line">                    updateOrderStatus.order = factory.newRelationship(NS_M, <span class="string">'Order'</span>, order.getIdentifier());</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(updateOrderStatus);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_D + <span class="string">'.Vehicle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicleRegistry</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> vehicleRegistry.get(<span class="string">'VIN_NUMBER'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicle</span>) </span>&#123;</div><div class="line">                    should.exist(vehicle);</div><div class="line">                    vehicle.vehicleStatus.should.equal(<span class="string">'ACTIVE'</span>);</div><div class="line">                    vehicle.vehicleDetails.vin.should.equal(updateOrderStatus.vin);</div><div class="line">                    vehicle.owner.getIdentifier().should.equal(<span class="string">'dan'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">        describe(<span class="string">'Setup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        describe(<span class="string">'#setupDemo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line">             *</div><div class="line">             * @param &#123;String&#125; registry - name of a registry</div><div class="line">             */</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getAllFromRegistry</span>(<span class="params">type, registry</span>) </span>&#123;</div><div class="line">                <span class="keyword">const</span> func = <span class="string">'get'</span> + type + <span class="string">'Registry'</span>;</div><div class="line">                <span class="keyword">return</span> businessNetworkConnection[func](registry)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params">registry</span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> registry.getAll();</div><div class="line">                    &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            it(<span class="string">'should create a scenario'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">// submit the transaction</span></div><div class="line">                <span class="keyword">const</span> setupDemo = factory.newTransaction(NS, <span class="string">'SetupDemo'</span>);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> businessNetworkConnection.submitTransaction(setupDemo)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="comment">// (participants) get regulator registry</span></div><div class="line">                        <span class="keyword">return</span> getAllFromRegistry(<span class="string">'Participant'</span>, NS + <span class="string">'.Regulator'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params">regulators</span>) </span>&#123;</div><div class="line">                        regulators.length.should.equal(<span class="number">1</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="comment">// (participants) get manufacturer registry</span></div><div class="line">                        <span class="keyword">return</span> getAllFromRegistry(<span class="string">'Participant'</span>, NS_M + <span class="string">'.Manufacturer'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params">manufacturers</span>) </span>&#123;</div><div class="line">                        manufacturers.length.should.be.above(<span class="number">1</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="comment">// (participants) get private owner registry</span></div><div class="line">                        <span class="keyword">return</span> getAllFromRegistry(<span class="string">'Participant'</span>, NS + <span class="string">'.PrivateOwner'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params">privateOwners</span>) </span>&#123;</div><div class="line">                        privateOwners.length.should.be.above(<span class="number">10</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        <span class="comment">// (assets) get vehicles registry</span></div><div class="line">                        <span class="keyword">return</span> getAllFromRegistry(<span class="string">'Asset'</span>, NS_D + <span class="string">'.Vehicle'</span>);</div><div class="line">                    &#125;)</div><div class="line">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicles</span>) </span>&#123;</div><div class="line">                        vehicles.length.should.be.above(<span class="number">10</span>);</div><div class="line">                    &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">        describe(<span class="string">'#privateVehicleTransfer'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        it(<span class="string">'should be able to transfer a vehicle between two private owners'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">const</span> vehicleToTransfer = <span class="string">'123456789'</span>;</div><div class="line">            <span class="keyword">const</span> owners = [<span class="string">'dan'</span>, <span class="string">'simon'</span>];</div><div class="line"></div><div class="line">            <span class="keyword">let</span> vehicleRegistry;</div><div class="line">            <span class="keyword">let</span> privateOwnerRegistry;</div><div class="line">            <span class="keyword">let</span> vehicle;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_D + <span class="string">'.Vehicle'</span>)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vr</span>) </span>&#123;</div><div class="line">                    vehicleRegistry = vr;</div><div class="line">                    <span class="keyword">return</span> vehicleRegistry.get(vehicleToTransfer);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">                    vehicle = v;</div><div class="line">                    should.not.exist(vehicle.logEntries);</div><div class="line">                    vehicle.owner.getIdentifier().should.equal(<span class="string">'dan'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">const</span> privateVehicleTransfer = factory.newTransaction(NS_D, <span class="string">'PrivateVehicleTransfer'</span>);</div><div class="line">                    privateVehicleTransfer.vehicle = factory.newRelationship(NS_D, <span class="string">'Vehicle'</span>, vehicle.getIdentifier());</div><div class="line">                    privateVehicleTransfer.seller = vehicle.owner;</div><div class="line">                    privateVehicleTransfer.buyer = factory.newRelationship(NS, <span class="string">'PrivateOwner'</span>, <span class="string">'simon'</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(privateVehicleTransfer);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> vehicleRegistry.get(vehicle.getIdentifier());</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">newVehicle</span>) </span>&#123;</div><div class="line">                    newVehicle.owner.getIdentifier().should.equal(<span class="string">'simon'</span>);</div><div class="line">                    should.exist(newVehicle.logEntries);</div><div class="line">                    newVehicle.logEntries.length.should.equal(<span class="number">1</span>);</div><div class="line">                    newVehicle.logEntries[<span class="number">0</span>].buyer.getIdentifier().should.equal(<span class="string">'simon'</span>);</div><div class="line">                    newVehicle.logEntries[<span class="number">0</span>].seller.getIdentifier().should.equal(<span class="string">'dan'</span>);</div><div class="line">                    newVehicle.logEntries[<span class="number">0</span>].vehicle.getIdentifier().should.equal(vehicleToTransfer);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    describe(<span class="string">'ScrapVehicle'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        it(<span class="string">'should change a vehicles status to SCRAPPED'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">const</span> vehicleToScrap = <span class="string">'123456789'</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> scrapVehicle = factory.newTransaction(NS_D, <span class="string">'ScrapVehicle'</span>);</div><div class="line">            scrapVehicle.vehicle = factory.newRelationship(NS_D, <span class="string">'Vehicle'</span>, vehicleToScrap);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(scrapVehicle)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_D + <span class="string">'.Vehicle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">assetRegistry</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.get(vehicleToScrap);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicle</span>) </span>&#123;</div><div class="line">                    vehicle.vehicleStatus.should.equal(<span class="string">'SCRAPPED'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    describe(<span class="string">'ScrapAllVehiclesByColour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        it(<span class="string">'should select vehicles by colour and change vehicles status to SCRAPPED'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// Vehicle with beige colour and id 123456789 resides in reposritory</span></div><div class="line">            <span class="keyword">const</span> vehicleId = <span class="string">'123456789'</span>;</div><div class="line">            <span class="keyword">const</span> scrapVehicleTransaction = factory.newTransaction(NS_D, <span class="string">'ScrapAllVehiclesByColour'</span>);</div><div class="line">            scrapVehicleTransaction.colour = <span class="string">'Beige'</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(scrapVehicleTransaction)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS_D + <span class="string">'.Vehicle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">ar</span>) </span>&#123;</div><div class="line">                    <span class="keyword">const</span> assetRegistry = ar;</div><div class="line">                    <span class="keyword">return</span> assetRegistry.get(vehicleId);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">vehicle</span>) </span>&#123;</div><div class="line">                    vehicle.vehicleStatus.should.equal(<span class="string">'SCRAPPED'</span>);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3uk5n5j20kc05zaay.jpg" alt="alltest"></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hyperledger composer-sample-networks（三）]]></title>
      <url>/2017/12/19/hyperledger%20composer-sample-networks%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="1-Perishable-Goods-Network"><a href="#1-Perishable-Goods-Network" class="headerlink" title="1. Perishable Goods Network"></a>1. Perishable Goods Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/perishable-network" target="_blank" rel="external">Perishable Goods Network</a></p>
<blockquote>
<p>Example business network that shows growers, shippers and importers defining contracts for the price of perishable goods, based on temperature readings received for shipping containers.</p>
</blockquote>
<h4 id="Participants-Grower-Importer-Shipper"><a href="#Participants-Grower-Importer-Shipper" class="headerlink" title="Participants Grower Importer Shipper"></a><strong>Participants</strong> Grower Importer Shipper</h4><h4 id="Assets-Contract-Shipment"><a href="#Assets-Contract-Shipment" class="headerlink" title="Assets Contract Shipment"></a><strong>Assets</strong> Contract Shipment</h4><h4 id="Transactions-TemperatureReading-ShipmentReceived-SetupDemo"><a href="#Transactions-TemperatureReading-ShipmentReceived-SetupDemo" class="headerlink" title="Transactions TemperatureReading ShipmentReceived SetupDemo"></a><strong>Transactions</strong> TemperatureReading ShipmentReceived SetupDemo</h4><a id="more"></a>
<h3 id="2-模型"><a href="#2-模型" class="headerlink" title="2. 模型"></a>2. 模型</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/blob/master/packages/perishable-network/models/perishable.cto" target="_blank" rel="external">perishable.cto</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * A business network for shipping perishable goods</div><div class="line">  * The cargo is temperature controlled and contracts</div><div class="line">  * can be negociated based on the temperature</div><div class="line">  * readings received for the cargo</div><div class="line">  */</div><div class="line"></div><div class="line">namespace org.acme.shipping.perishable</div><div class="line"></div><div class="line">/**</div><div class="line"> * The type of perishable product being shipped</div><div class="line"> */</div><div class="line">enum ProductType &#123;</div><div class="line">  o BANANAS</div><div class="line">  o APPLES</div><div class="line">  o PEARS</div><div class="line">  o PEACHES</div><div class="line">  o COFFEE</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * The status of a shipment</div><div class="line"> */</div><div class="line">enum ShipmentStatus &#123;</div><div class="line">  o CREATED</div><div class="line">  o IN_TRANSIT</div><div class="line">  o ARRIVED</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An abstract transaction that is related to a Shipment</div><div class="line"> */</div><div class="line">abstract transaction ShipmentTransaction &#123;</div><div class="line">    --&gt; Shipment shipment</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An temperature reading for a shipment. E.g. received from a</div><div class="line"> * device within a temperature controlled shipping container</div><div class="line"> */</div><div class="line">transaction TemperatureReading extends ShipmentTransaction &#123;</div><div class="line">  o Double centigrade</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A notification that a shipment has been received by the</div><div class="line"> * importer and that funds should be transferred from the importer</div><div class="line"> * to the grower to pay for the shipment.</div><div class="line"> */</div><div class="line">transaction ShipmentReceived extends ShipmentTransaction &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A shipment being tracked as an asset on the ledger</div><div class="line"> */</div><div class="line">asset Shipment identified by shipmentId &#123;</div><div class="line">  o String shipmentId</div><div class="line">  o ProductType type</div><div class="line">  o ShipmentStatus status</div><div class="line">  o Long unitCount</div><div class="line">  o TemperatureReading[] temperatureReadings optional</div><div class="line">  --&gt; Contract contract</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Defines a contract between a Grower and an Importer to ship using</div><div class="line"> * a Shipper, paying a set unit price. The unit price is multiplied by</div><div class="line"> * a penality factor proportional to the deviation from the min and max</div><div class="line"> * negociated temperatures for the shipment.</div><div class="line"> */</div><div class="line">asset Contract identified by contractId &#123;</div><div class="line">  o String contractId</div><div class="line">  --&gt; Grower grower</div><div class="line">  --&gt; Shipper shipper</div><div class="line">  --&gt; Importer importer</div><div class="line">  o DateTime arrivalDateTime</div><div class="line">  o Double unitPrice</div><div class="line">  o Double minTemperature</div><div class="line">  o Double maxTemperature</div><div class="line">  o Double minPenaltyFactor</div><div class="line">  o Double maxPenaltyFactor</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A concept for a simple street address</div><div class="line"> */</div><div class="line">concept Address &#123;</div><div class="line">  o String city optional</div><div class="line">  o String country</div><div class="line">  o String street optional</div><div class="line">  o String zip optional</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An abstract participant type in this business network</div><div class="line"> */</div><div class="line">abstract participant Business identified by email &#123;</div><div class="line">  o String email</div><div class="line">  o Address address</div><div class="line">  o Double accountBalance</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A Grower is a type of participant in the network</div><div class="line"> */</div><div class="line">participant Grower extends Business &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * A Shipper is a type of participant in the network</div><div class="line"> */</div><div class="line">participant Shipper extends Business &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * An Importer is a type of participant in the network</div><div class="line"> */</div><div class="line">participant Importer extends Business &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * JUST FOR INITIALIZING A DEMO</div><div class="line"> */</div><div class="line">transaction SetupDemo &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-模板构建"><a href="#3-模板构建" class="headerlink" title="3. 模板构建"></a>3. 模板构建</h3><p><strong>建立SetupDemo交易:</strong></p>
<blockquote>
<p>This transaction populates the Participant Registries with a Grower, an Importer and a Shipper. The Asset Registries will have a Contract asset and a Shipment asset.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.shipping.perishable.SetupDemo&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>建立TemperatureReading交易:</strong></p>
<blockquote>
<p>If the temperature reading falls outside the min/max range of the contract, the price received by the grower will be reduced. You may submit several readings if you wish. Each reading will be aggregated within SHIP_001 Shipment Asset Registry.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.shipping.perishable.TemperatureReading&quot;,</div><div class="line">  &quot;centigrade&quot;: 8,</div><div class="line">  &quot;shipment&quot;: &quot;resource:org.acme.shipping.perishable.Shipment#SHIP_001&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>建立ShipmentReceived交易:</strong></p>
<blockquote>
<p>Submit a ShipmentReceived transaction for SHIP_001 to trigger the payout to the grower, based on the parameters of the CON_001 contract.</p>
<p>If the date-time of the ShipmentReceived transaction is after the arrivalDateTime on CON_001 then the grower will no receive any payment for the shipment.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.shipping.perishable.ShipmentReceived&quot;,</div><div class="line">  &quot;shipment&quot;: &quot;resource:org.acme.shipping.perishable.Shipment#SHIP_001&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-perishable-js"><a href="#4-perishable-js" class="headerlink" title="4. perishable.js"></a>4. perishable.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> AdminConnection = <span class="built_in">require</span>(<span class="string">'composer-admin'</span>).AdminConnection;</div><div class="line"><span class="keyword">const</span> BusinessNetworkConnection = <span class="built_in">require</span>(<span class="string">'composer-client'</span>).BusinessNetworkConnection;</div><div class="line"><span class="keyword">const</span> BusinessNetworkDefinition = <span class="built_in">require</span>(<span class="string">'composer-common'</span>).BusinessNetworkDefinition;</div><div class="line"><span class="keyword">const</span> IdCard = <span class="built_in">require</span>(<span class="string">'composer-common'</span>).IdCard;</div><div class="line"><span class="keyword">const</span> MemoryCardStore = <span class="built_in">require</span>(<span class="string">'composer-common'</span>).MemoryCardStore;</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'chai'</span>).should();</div><div class="line"><span class="keyword">let</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> namespace = <span class="string">'org.acme.shipping.perishable'</span>;</div><div class="line"><span class="keyword">let</span> grower_id = <span class="string">'farmer@email.com'</span>;</div><div class="line"><span class="keyword">let</span> importer_id = <span class="string">'supermarket@email.com'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'Perishable Shipping Network'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// In-memory card store for testing so cards are not persisted to the file system</span></div><div class="line">    <span class="keyword">const</span> cardStore = <span class="keyword">new</span> MemoryCardStore();</div><div class="line">    <span class="keyword">let</span> adminConnection;</div><div class="line">    <span class="keyword">let</span> businessNetworkConnection;</div><div class="line">    <span class="keyword">let</span> factory;</div><div class="line">    <span class="keyword">let</span> clock;</div><div class="line"></div><div class="line">    before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// Embedded connection used for local testing</span></div><div class="line">        <span class="keyword">const</span> connectionProfile = &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">'embedded'</span>,</div><div class="line">            <span class="attr">type</span>: <span class="string">'embedded'</span></div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// Embedded connection does not need real credentials</span></div><div class="line">        <span class="keyword">const</span> credentials = &#123;</div><div class="line">            <span class="attr">certificate</span>: <span class="string">'FAKE CERTIFICATE'</span>,</div><div class="line">            <span class="attr">privateKey</span>: <span class="string">'FAKE PRIVATE KEY'</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// PeerAdmin identity used with the admin connection to deploy business networks</span></div><div class="line">        <span class="keyword">const</span> deployerMetadata = &#123;</div><div class="line">            <span class="attr">version</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">userName</span>: <span class="string">'PeerAdmin'</span>,</div><div class="line">            <span class="attr">roles</span>: [ <span class="string">'PeerAdmin'</span>, <span class="string">'ChannelAdmin'</span> ]</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">const</span> deployerCard = <span class="keyword">new</span> IdCard(deployerMetadata, connectionProfile);</div><div class="line">        deployerCard.setCredentials(credentials);</div><div class="line"></div><div class="line">        <span class="keyword">const</span> deployerCardName = <span class="string">'PeerAdmin'</span>;</div><div class="line">        adminConnection = <span class="keyword">new</span> AdminConnection(&#123; <span class="attr">cardStore</span>: cardStore &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">const</span> adminUserName = <span class="string">'admin'</span>;</div><div class="line">        <span class="keyword">let</span> adminCardName;</div><div class="line">        <span class="keyword">let</span> businessNetworkDefinition;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> adminConnection.importCard(deployerCardName, deployerCard).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> adminConnection.connect(deployerCardName);</div><div class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            businessNetworkConnection = <span class="keyword">new</span> BusinessNetworkConnection(&#123; <span class="attr">cardStore</span>: cardStore &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> BusinessNetworkDefinition.fromDirectory(path.resolve(__dirname, <span class="string">'..'</span>));</div><div class="line">        &#125;).then(<span class="function"><span class="params">definition</span> =&gt;</span> &#123;</div><div class="line">            businessNetworkDefinition = definition;</div><div class="line">            <span class="comment">// Install the Composer runtime for the new business network</span></div><div class="line">            <span class="keyword">return</span> adminConnection.install(businessNetworkDefinition.getName());</div><div class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// Start the business network and configure an network admin identity</span></div><div class="line">            <span class="keyword">const</span> startOptions = &#123;</div><div class="line">                <span class="attr">networkAdmins</span>: [</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">userName</span>: adminUserName,</div><div class="line">                        <span class="attr">enrollmentSecret</span>: <span class="string">'adminpw'</span></div><div class="line">                    &#125;</div><div class="line">                ]</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> adminConnection.start(businessNetworkDefinition, startOptions);</div><div class="line">        &#125;).then(<span class="function"><span class="params">adminCards</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// Import the network admin identity for us to use</span></div><div class="line">            adminCardName = <span class="string">`<span class="subst">$&#123;adminUserName&#125;</span>@<span class="subst">$&#123;businessNetworkDefinition.getName()&#125;</span>`</span>;</div><div class="line">            <span class="keyword">return</span> adminConnection.importCard(adminCardName, adminCards.get(adminUserName));</div><div class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// Connect to the business network using the network admin identity</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.connect(adminCardName);</div><div class="line">        &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line">            <span class="keyword">const</span> setupDemo = factory.newTransaction(namespace, <span class="string">'SetupDemo'</span>);</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(setupDemo);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        clock = sinon.useFakeTimers();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    afterEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        clock.restore();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    describe(<span class="string">'#shipment'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'should receive base price for a shipment within temperature range'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            ^^^</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        it(<span class="string">'should receive nothing for a late shipment'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            ^^^</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        it(<span class="string">'should apply penalty for min temperature violation'</span>, () =&gt; &#123;</div><div class="line">            ^^^</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        it(<span class="string">'should apply penalty for max temperature violation'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            ^^^</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>receive base price<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should receive base price for a shipment within temperature range'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            <span class="keyword">const</span> tempReading = factory.newTransaction(namespace, <span class="string">'TemperatureReading'</span>);</div><div class="line">            tempReading.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">            tempReading.centigrade = <span class="number">4.5</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(tempReading)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// submit the shipment received</span></div><div class="line">                    <span class="keyword">const</span> received = factory.newTransaction(namespace, <span class="string">'ShipmentReceived'</span>);</div><div class="line">                    received.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(received);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Grower'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">growerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the grower's balance</span></div><div class="line">                    <span class="keyword">return</span> growerRegistry.get(grower_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newGrower</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// console.log(JSON.stringify(businessNetworkConnection.getBusinessNetwork().getSerializer().toJSON(newGrower)));</span></div><div class="line">                    newGrower.accountBalance.should.equal(<span class="number">2500</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Importer'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">importerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the importer's balance</span></div><div class="line">                    <span class="keyword">return</span> importerRegistry.get(importer_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newImporter</span>) =&gt;</span> &#123;</div><div class="line">                    newImporter.accountBalance.should.equal(<span class="number">-2500</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Shipment'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">shipmentRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the state of the shipment</span></div><div class="line">                    <span class="keyword">return</span> shipmentRegistry.get(<span class="string">'SHIP_001'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">shipment</span>) =&gt;</span> &#123;</div><div class="line">                    shipment.status.should.equal(<span class="string">'ARRIVED'</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>receive nothing<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should receive nothing for a late shipment'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            <span class="keyword">const</span> tempReading = factory.newTransaction(namespace, <span class="string">'TemperatureReading'</span>);</div><div class="line">            tempReading.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">            tempReading.centigrade = <span class="number">4.5</span>;</div><div class="line">            <span class="comment">// advance the javascript clock to create a time-advanced test timestamp</span></div><div class="line">            clock.tick(<span class="number">1000000000000000</span>);</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(tempReading)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// submit the shipment received</span></div><div class="line">                    <span class="keyword">const</span> received = factory.newTransaction(namespace, <span class="string">'ShipmentReceived'</span>);</div><div class="line">                    received.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(received);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Grower'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">growerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the grower's balance</span></div><div class="line">                    <span class="keyword">return</span> growerRegistry.get(grower_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newGrower</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// console.log(JSON.stringify(businessNetworkConnection.getBusinessNetwork().getSerializer().toJSON(newGrower)));</span></div><div class="line">                    newGrower.accountBalance.should.equal(<span class="number">2500</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Importer'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">importerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the importer's balance</span></div><div class="line">                    <span class="keyword">return</span> importerRegistry.get(importer_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newImporter</span>) =&gt;</span> &#123;</div><div class="line">                    newImporter.accountBalance.should.equal(<span class="number">-2500</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>apply penalty for min temperature violation<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should apply penalty for min temperature violation'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            <span class="keyword">const</span> tempReading = factory.newTransaction(namespace, <span class="string">'TemperatureReading'</span>);</div><div class="line">            tempReading.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">            tempReading.centigrade = <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(tempReading)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// submit the shipment received</span></div><div class="line">                    <span class="keyword">const</span> received = factory.newTransaction(namespace, <span class="string">'ShipmentReceived'</span>);</div><div class="line">                    received.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(received);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Grower'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">growerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the grower's balance</span></div><div class="line">                    <span class="keyword">return</span> growerRegistry.get(grower_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newGrower</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// console.log(JSON.stringify(businessNetworkConnection.getBusinessNetwork().getSerializer().toJSON(newGrower)));</span></div><div class="line">                    newGrower.accountBalance.should.equal(<span class="number">4000</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Importer'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">importerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the importer's balance</span></div><div class="line">                    <span class="keyword">return</span> importerRegistry.get(importer_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newImporter</span>) =&gt;</span> &#123;</div><div class="line">                    newImporter.accountBalance.should.equal(<span class="number">-4000</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>apply penalty for max temperature violation<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should apply penalty for max temperature violation'</span>, () =&gt; &#123;</div><div class="line">            <span class="comment">// submit the temperature reading</span></div><div class="line">            <span class="keyword">const</span> tempReading = factory.newTransaction(namespace, <span class="string">'TemperatureReading'</span>);</div><div class="line">            tempReading.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">            tempReading.centigrade = <span class="number">11</span>;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(tempReading)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// submit the shipment received</span></div><div class="line">                    <span class="keyword">const</span> received = factory.newTransaction(namespace, <span class="string">'ShipmentReceived'</span>);</div><div class="line">                    received.shipment = factory.newRelationship(namespace, <span class="string">'Shipment'</span>, <span class="string">'SHIP_001'</span>);</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(received);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Grower'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">growerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the grower's balance</span></div><div class="line">                    <span class="keyword">return</span> growerRegistry.get(grower_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newGrower</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// console.log(JSON.stringify(businessNetworkConnection.getBusinessNetwork().getSerializer().toJSON(newGrower)));</span></div><div class="line">                    newGrower.accountBalance.should.equal(<span class="number">5000</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Importer'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">importerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// check the importer's balance</span></div><div class="line">                    <span class="keyword">return</span> importerRegistry.get(importer_id);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">newImporter</span>) =&gt;</span> &#123;</div><div class="line">                    newImporter.accountBalance.should.equal(<span class="number">-5000</span>);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5. 测试结果"></a>5. 测试结果</h3><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3eyb5oj20ke0e6wgr.jpg" alt="ship1"></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3fjib0j20kc0afabe.jpg" alt="ship2"></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hyperledger composer-sample-networks（二）]]></title>
      <url>/2017/12/18/hyperledger%20composer-sample-networks%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="1-Car-Auction-Network"><a href="#1-Car-Auction-Network" class="headerlink" title="1. Car Auction Network"></a>1. Car Auction Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/461ed452d8c316a0421b43199b129cad04625277/packages/carauction-network" target="_blank" rel="external">Car Auction拍卖 Network</a></p>
<blockquote>
<p> List assets for sale (setting a reserve price), and watch as assets that have met their reserve price are automatically transferred to the highest bidder at the end of the auction.</p>
</blockquote>
<h4 id="Participants-Member-Auctioneer"><a href="#Participants-Member-Auctioneer" class="headerlink" title="Participants: Member Auctioneer"></a><strong>Participants</strong>: Member Auctioneer</h4><h4 id="Assets-Vehicle-VehicleListing"><a href="#Assets-Vehicle-VehicleListing" class="headerlink" title="Assets: Vehicle VehicleListing"></a><strong>Assets</strong>: Vehicle VehicleListing</h4><h4 id="Transactions-Offer-CloseBidding"><a href="#Transactions-Offer-CloseBidding" class="headerlink" title="Transactions: Offer CloseBidding"></a><strong>Transactions</strong>: Offer CloseBidding</h4><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3d4vrkj20kf04wt94.jpg" alt="car"></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#makeOffer'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'should add the offer to the offers of a vehicle listing'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line"></div><div class="line">            <span class="comment">// create the auctioneer</span></div><div class="line">            <span class="keyword">const</span> seller = factory.newResource(NS, <span class="string">'Member'</span>, <span class="string">'daniel.selman@example.com'</span>);</div><div class="line">            seller.firstName = <span class="string">'Dan'</span>;</div><div class="line">            seller.lastName = <span class="string">'Selman'</span>;</div><div class="line">            seller.balance = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">// create the vehicle</span></div><div class="line">            <span class="keyword">const</span> vehicle = factory.newResource(NS, <span class="string">'Vehicle'</span>, <span class="string">'CAR_001'</span>);</div><div class="line">            vehicle.owner = factory.newRelationship(NS, <span class="string">'Member'</span>, seller.$identifier);</div><div class="line"></div><div class="line">            <span class="comment">// create the vehicle listing</span></div><div class="line">            <span class="keyword">const</span> listing = factory.newResource(NS, <span class="string">'VehicleListing'</span>, <span class="string">'LISTING_001'</span>);</div><div class="line">            listing.reservePrice = <span class="number">100</span>;</div><div class="line">            listing.description = <span class="string">'My nice car'</span>;</div><div class="line">            listing.state = <span class="string">'FOR_SALE'</span>;</div><div class="line">            listing.vehicle = factory.newRelationship(NS, <span class="string">'Vehicle'</span>, <span class="string">'CAR_001'</span>);</div><div class="line"></div><div class="line">            <span class="comment">// create the buyer</span></div><div class="line">            <span class="keyword">const</span> buyer = factory.newResource(NS, <span class="string">'Member'</span>, <span class="string">'sstone1@example.com'</span>);</div><div class="line">            buyer.firstName = <span class="string">'Simon'</span>;</div><div class="line">            buyer.lastName = <span class="string">'Stone'</span>;</div><div class="line">            buyer.balance = <span class="number">1000</span>;</div><div class="line"></div><div class="line">            <span class="comment">// create another potential buyer</span></div><div class="line">            <span class="keyword">const</span> buyer2 = factory.newResource(NS, <span class="string">'Member'</span>, <span class="string">'whitemat@example.com'</span>);</div><div class="line">            buyer2.firstName = <span class="string">'Matthew'</span>;</div><div class="line">            buyer2.lastName = <span class="string">'White'</span>;</div><div class="line">            buyer2.balance = <span class="number">100</span>;</div><div class="line"></div><div class="line">            <span class="comment">// create the auctioneer</span></div><div class="line">            <span class="keyword">const</span> auctioneer = factory.newResource(NS, <span class="string">'Auctioneer'</span>, <span class="string">'boss@auction.com'</span>);</div><div class="line">            auctioneer.firstName = <span class="string">'Mr'</span>;</div><div class="line">            auctioneer.lastName = <span class="string">'Smith'</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> offer = factory.newTransaction(NS, <span class="string">'Offer'</span>);</div><div class="line">            offer.member = factory.newRelationship(NS, <span class="string">'Member'</span>, buyer.$identifier);</div><div class="line">            offer.listing = factory.newRelationship(NS, <span class="string">'VehicleListing'</span>, <span class="string">'LISTING_001'</span>);</div><div class="line">            offer.bidPrice = <span class="number">200</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Get the asset registry.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS + <span class="string">'.Vehicle'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">vehicleRegistry</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// Add the Vehicle to the asset registry.</span></div><div class="line">                    <span class="keyword">return</span> vehicleRegistry.add(vehicle)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// Add the VehicleListing to the asset registry</span></div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS + <span class="string">'.VehicleListing'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">vehicleListingRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the vehicle listing</span></div><div class="line">                            <span class="keyword">return</span> vehicleListingRegistry.add(listing);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(NS + <span class="string">'.Member'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">userRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the members</span></div><div class="line">                            <span class="keyword">return</span> userRegistry.addAll([buyer, buyer2, seller]);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(NS + <span class="string">'.Auctioneer'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">userRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the auctioneers</span></div><div class="line">                            <span class="keyword">return</span> userRegistry.addAll([auctioneer]);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// Create the offer transaction and submit</span></div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(offer);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">const</span> lowOffer = factory.newTransaction(NS, <span class="string">'Offer'</span>);</div><div class="line">                            lowOffer.member = factory.newRelationship(NS, <span class="string">'Member'</span>, buyer2.$identifier);</div><div class="line">                            lowOffer.listing = factory.newRelationship(NS, <span class="string">'VehicleListing'</span>, <span class="string">'LISTING_001'</span>);</div><div class="line">                            lowOffer.bidPrice = <span class="number">50</span>;</div><div class="line">                            <span class="comment">// Create the offer transaction and submit</span></div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(lowOffer);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS + <span class="string">'.VehicleListing'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">vehicleListingRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// get the listing</span></div><div class="line">                            <span class="keyword">return</span> vehicleListingRegistry.get(listing.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newListing</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// both offers should have been added to the listing</span></div><div class="line">                            newListing.offers.length.should.equal(<span class="number">2</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// close the bidding</span></div><div class="line">                            <span class="keyword">const</span> closeBidding = factory.newTransaction(NS, <span class="string">'CloseBidding'</span>);</div><div class="line">                            closeBidding.listing = factory.newRelationship(NS, <span class="string">'VehicleListing'</span>, <span class="string">'LISTING_001'</span>);</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(closeBidding);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS + <span class="string">'.VehicleListing'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">vehicleListingRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// get the listing</span></div><div class="line">                            <span class="keyword">return</span> vehicleListingRegistry.get(listing.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newListing</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// the offer should have been added to the listing</span></div><div class="line">                            newListing.state.should.equal(<span class="string">'SOLD'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(NS + <span class="string">'.Member'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">userRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the buyer and seller</span></div><div class="line">                            <span class="keyword">return</span> userRegistry.get(buyer.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">buyer</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check the buyer's balance</span></div><div class="line">                            buyer.balance.should.equal(<span class="number">800</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(NS + <span class="string">'.Member'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">userRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the buyer and seller</span></div><div class="line">                            <span class="keyword">return</span> userRegistry.get(seller.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newSeller</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check the seller's balance</span></div><div class="line">                            newSeller.balance.should.equal(<span class="number">200</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(NS + <span class="string">'.Member'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">userRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the buyer and seller</span></div><div class="line">                            <span class="keyword">return</span> userRegistry.get(buyer.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newBuyer</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check the buyer's balance</span></div><div class="line">                            newBuyer.balance.should.equal(<span class="number">800</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(NS + <span class="string">'.Vehicle'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">vehicleRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// get the vehicle</span></div><div class="line">                            <span class="keyword">return</span> vehicleRegistry.get(vehicle.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newVehicle</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// check that the buyer now owns the car</span></div><div class="line">                            newVehicle.owner.getIdentifier().should.equal(buyer.$identifier);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="2-Animal-Tracking-Network"><a href="#2-Animal-Tracking-Network" class="headerlink" title="2. Animal Tracking Network"></a>2. Animal Tracking Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/animaltracking-network" target="_blank" rel="external">Animal Tracking Network</a></p>
<blockquote>
<p> Farmers can move animals between farms/fields and the UK government farming regulator has visibility into the locations of all animals and all animal movements between farms.</p>
</blockquote>
<h4 id="Participants-Farmer-Regulator"><a href="#Participants-Farmer-Regulator" class="headerlink" title="Participants: Farmer Regulator"></a><strong>Participants</strong>: Farmer Regulator</h4><h4 id="Assets-Animal-Business-Field"><a href="#Assets-Animal-Business-Field" class="headerlink" title="Assets: Animal Business Field"></a><strong>Assets</strong>: Animal Business Field</h4><h4 id="Transactions-AnimalMovementDeparture-AnimalMovementArrival-SetupDemo"><a href="#Transactions-AnimalMovementDeparture-AnimalMovementArrival-SetupDemo" class="headerlink" title="Transactions: AnimalMovementDeparture AnimalMovementArrival SetupDemo"></a><strong>Transactions</strong>: AnimalMovementDeparture AnimalMovementArrival SetupDemo</h4><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3diexdj20kg0b5mye.jpg" alt="animal"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#setupDemo'</span>, () =&gt; &#123;</div><div class="line">       it(<span class="string">'should create the correct number of resources in the network'</span>, () =&gt; &#123;</div><div class="line">           <span class="comment">// Transaction is run in before</span></div><div class="line">           <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Animal'</span>)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.getAll();</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">animals</span>) =&gt;</span> &#123;</div><div class="line">                   animals.length.should.equal(<span class="number">8</span>);</div><div class="line"></div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Farmer'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">pr</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> pr.getAll();</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">farmers</span>) =&gt;</span> &#123;</div><div class="line">                   farmers.length.should.equal(<span class="number">2</span>);</div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Business'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.getAll();</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">businesses</span>) =&gt;</span> &#123;</div><div class="line">                   businesses.length.should.equal(<span class="number">2</span>);</div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Field'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.getAll();</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">fields</span>) =&gt;</span> &#123;</div><div class="line">                   fields.length.should.equal(<span class="number">4</span>);</div><div class="line">               &#125;);</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   describe(<span class="string">'#onAnimalMovementDeparture'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">       it(<span class="string">'should change an animal to IN_TRANSIT and add it to receiving business'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> runAnimalMovementDepartureAndGetAnimal()</div><div class="line">               .then(<span class="function">(<span class="params">animal</span>) =&gt;</span> &#123;</div><div class="line">                   animal.movementStatus.should.equal(<span class="string">'IN_TRANSIT'</span>);</div><div class="line"></div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Business'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.get(<span class="string">'BUSINESS_2'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">business</span>) =&gt;</span> &#123;</div><div class="line">                   business.incomingAnimals[<span class="number">0</span>].getIdentifier().should.equal(<span class="string">'ANIMAL_1'</span>);</div><div class="line">               &#125;);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       it(<span class="string">'should fail if the animal is not IN_FIELD'</span>, () =&gt; &#123;</div><div class="line">           <span class="keyword">const</span> transaction = factory.newTransaction(namespace, <span class="string">'AnimalMovementDeparture'</span>);</div><div class="line">           transaction.animal = factory.newRelationship(namespace, <span class="string">'Animal'</span>, <span class="string">'ANIMAL_1'</span>);</div><div class="line">           transaction.from = factory.newRelationship(namespace, <span class="string">'Business'</span>, <span class="string">'BUSINESS_1'</span>);</div><div class="line">           transaction.to = factory.newRelationship(namespace, <span class="string">'Business'</span>, <span class="string">'BUSINESS_2'</span>);</div><div class="line">           transaction.fromField = factory.newRelationship(namespace, <span class="string">'Field'</span>, <span class="string">'FIELD_1'</span>);</div><div class="line"></div><div class="line">           <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction)</div><div class="line">               .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">                   err.message.should.equal(<span class="string">'Animal is already IN_TRANSIT'</span>);</div><div class="line">               &#125;);</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div><div class="line"></div><div class="line">   describe(<span class="string">'#onAnimalMovementArrival'</span>, () =&gt; &#123;</div><div class="line">       it(<span class="string">'should change an animal to IN_FIELD and change its owner, location and remove it from incoming animals'</span>, () =&gt; &#123;</div><div class="line">           <span class="keyword">let</span> animalId;</div><div class="line">           <span class="keyword">return</span> runAnimalMovementDepartureAndGetAnimal()</div><div class="line">               .then(<span class="function"><span class="params">animal</span> =&gt;</span> &#123;</div><div class="line">                   animalId = animal.getIdentifier();</div><div class="line">                   <span class="keyword">const</span> transaction = factory.newTransaction(namespace, <span class="string">'AnimalMovementArrival'</span>);</div><div class="line">                   transaction.animal = factory.newRelationship(namespace, <span class="string">'Animal'</span>, animalId);</div><div class="line">                   transaction.from = factory.newRelationship(namespace, <span class="string">'Business'</span>, <span class="string">'BUSINESS_1'</span>);</div><div class="line">                   transaction.to = factory.newRelationship(namespace, <span class="string">'Business'</span>, <span class="string">'BUSINESS_2'</span>);</div><div class="line">                   transaction.arrivalField = factory.newRelationship(namespace, <span class="string">'Field'</span>, <span class="string">'FIELD_2'</span>);</div><div class="line"></div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Animal'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.get(animalId);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">animal</span>) =&gt;</span> &#123;</div><div class="line">                   animal.movementStatus.should.equal(<span class="string">'IN_FIELD'</span>);</div><div class="line">                   animal.owner.getIdentifier().should.equal(<span class="string">'FARMER_2'</span>);</div><div class="line">                   animal.location.getIdentifier().should.equal(<span class="string">'FIELD_2'</span>);</div><div class="line"></div><div class="line">                   <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Business'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">ar</span>) =&gt;</span> &#123;</div><div class="line">                   <span class="keyword">return</span> ar.get(<span class="string">'BUSINESS_2'</span>);</div><div class="line">               &#125;)</div><div class="line">               .then(<span class="function">(<span class="params">business</span>) =&gt;</span> &#123;</div><div class="line">                   business.incomingAnimals.forEach(<span class="function">(<span class="params">animal</span>) =&gt;</span> &#123;</div><div class="line">                       animal.getIdentifier().should.not.equal(animalId);</div><div class="line">                   &#125;);</div><div class="line">               &#125;);</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h3 id="3-Digital-Property-Network"><a href="#3-Digital-Property-Network" class="headerlink" title="3. Digital Property Network"></a>3. Digital Property Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/digitalproperty-network" target="_blank" rel="external">Digital Property Network</a></p>
<blockquote>
<p> This Defines a business network where house sellers can list their properties for sale.</p>
</blockquote>
<h4 id="Participants-Person"><a href="#Participants-Person" class="headerlink" title="Participants: Person"></a><strong>Participants</strong>: Person</h4><h4 id="Assets-LandTitle-SalesAgreement"><a href="#Assets-LandTitle-SalesAgreement" class="headerlink" title="Assets: LandTitle SalesAgreement"></a><strong>Assets</strong>: LandTitle SalesAgreement</h4><h4 id="Transactions-RegisterPropertyForSale"><a href="#Transactions-RegisterPropertyForSale" class="headerlink" title="Transactions: RegisterPropertyForSale"></a><strong>Transactions</strong>: RegisterPropertyForSale</h4><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3dybxbj20kf0710td.jpg" alt="digital house sellers"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#onRegisterPropertyForSale'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'should change the forSale flag from undefined to true'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Create the existing LandTitle asset.</span></div><div class="line">            <span class="keyword">let</span> factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line"></div><div class="line">            <span class="keyword">let</span> seller = factory.newResource(<span class="string">'net.biz.digitalPropertyNetwork'</span>, <span class="string">'Person'</span>, <span class="string">'P1'</span>);</div><div class="line">            seller. firstName = <span class="string">'Dan'</span>;</div><div class="line">            seller.lastName = <span class="string">'Selman'</span>;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> landTitle = factory.newResource(<span class="string">'net.biz.digitalPropertyNetwork'</span>, <span class="string">'LandTitle'</span>, <span class="string">'TITLE_1'</span>);</div><div class="line">            <span class="keyword">let</span> person = factory.newRelationship(<span class="string">'net.biz.digitalPropertyNetwork'</span>, <span class="string">'Person'</span>, <span class="string">'P1'</span>);</div><div class="line">            landTitle.owner = person;</div><div class="line">            landTitle.information = <span class="string">'Some information'</span>;</div><div class="line">            landTitle.forSale = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Create the transaction.</span></div><div class="line">            <span class="keyword">let</span> transaction = factory.newTransaction(<span class="string">'net.biz.digitalPropertyNetwork'</span>, <span class="string">'RegisterPropertyForSale'</span>);</div><div class="line">            transaction.title = factory.newRelationship(<span class="string">'net.biz.digitalPropertyNetwork'</span>, <span class="string">'LandTitle'</span>, <span class="string">'TITLE_1'</span>);</div><div class="line">            transaction.seller = person;</div><div class="line"></div><div class="line">            <span class="comment">// Get the asset registry.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(<span class="string">'net.biz.digitalPropertyNetwork.Person'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">personRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> personRegistry.add(seller);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'net.biz.digitalPropertyNetwork.LandTitle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// Add the LandTitle asset to the asset registry.</span></div><div class="line">                    <span class="keyword">return</span> assetRegistry.add(landTitle);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// Submit the transaction.</span></div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.submitTransaction(transaction);</div><div class="line"></div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(<span class="string">'net.biz.digitalPropertyNetwork.LandTitle'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">assetRegistry</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// Get the modified land title.</span></div><div class="line">                    <span class="keyword">return</span> assetRegistry.get(<span class="string">'TITLE_1'</span>);</div><div class="line">                &#125;)</div><div class="line">                .then(<span class="function">(<span class="params">modifiedLandTitle</span>) =&gt;</span> &#123;</div><div class="line">                    <span class="comment">// Ensure the LandTitle has been modified correctly.</span></div><div class="line">                    modifiedLandTitle.forSale.should.be.true;</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="4-Marbles-Network"><a href="#4-Marbles-Network" class="headerlink" title="4. Marbles Network"></a>4. Marbles Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/marbles-network" target="_blank" rel="external">Marbles Network</a></p>
<blockquote>
<p> This is an interactive and distributed, marble trading demo. List marbles for sale and exchange marbles between participants.</p>
</blockquote>
<h4 id="Participants-Player"><a href="#Participants-Player" class="headerlink" title="Participants: Player"></a><strong>Participants</strong>: Player</h4><h4 id="Assets-Marble"><a href="#Assets-Marble" class="headerlink" title="Assets: Marble"></a><strong>Assets</strong>: Marble</h4><h4 id="Transactions-TradeMarble"><a href="#Transactions-TradeMarble" class="headerlink" title="Transactions: TradeMarble"></a><strong>Transactions</strong>: TradeMarble</h4><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3ebs87j20kc064t8x.jpg" alt="此处输入图片的描述"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#trade'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        it(<span class="string">'should be able to trade marbles'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line"></div><div class="line">            <span class="comment">// create the first player</span></div><div class="line">            <span class="keyword">const</span> dan = factory.newResource(namespace, <span class="string">'Player'</span>, <span class="string">'daniel.selman@example.com'</span>);</div><div class="line">            dan.firstName = <span class="string">'Dan'</span>;</div><div class="line">            dan.lastName = <span class="string">'Selman'</span>;</div><div class="line"></div><div class="line">            <span class="comment">// create the marble</span></div><div class="line">            <span class="keyword">const</span> marble = factory.newResource(namespace, <span class="string">'Marble'</span>, <span class="string">'MARBLE_001'</span>);</div><div class="line">            marble.size = <span class="string">'SMALL'</span>;</div><div class="line">            marble.color = <span class="string">'RED'</span>;</div><div class="line">            marble.owner = factory.newRelationship(namespace, <span class="string">'Player'</span>, dan.$identifier);</div><div class="line"></div><div class="line">            <span class="comment">// create the second player</span></div><div class="line">            <span class="keyword">const</span> simon = factory.newResource(namespace, <span class="string">'Player'</span>, <span class="string">'sstone1@example.com'</span>);</div><div class="line">            simon.firstName = <span class="string">'Simon'</span>;</div><div class="line">            simon.lastName = <span class="string">'Stone'</span>;</div><div class="line"></div><div class="line">            <span class="keyword">const</span> tradeMarble = factory.newTransaction(namespace, <span class="string">'TradeMarble'</span>);</div><div class="line">            tradeMarble.newOwner = factory.newRelationship(namespace, <span class="string">'Player'</span>, simon.$identifier);</div><div class="line">            tradeMarble.marble = factory.newRelationship(namespace, <span class="string">'Marble'</span>, marble.$identifier);</div><div class="line"></div><div class="line">            <span class="comment">// Get the asset registry.</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Marble'</span>)</div><div class="line">                .then(<span class="function">(<span class="params">marbleRegistry</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// Add the Marble to the asset registry.</span></div><div class="line">                    <span class="keyword">return</span> marbleRegistry.add(marble)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Player'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">playerRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// add the players</span></div><div class="line">                            <span class="keyword">return</span> playerRegistry.addAll([dan, simon]);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// submit the transaction</span></div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(tradeMarble);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.Marble'</span>);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">marbleRegistry</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// get the listing</span></div><div class="line">                            <span class="keyword">return</span> marbleRegistry.get(marble.$identifier);</div><div class="line">                        &#125;)</div><div class="line">                        .then(<span class="function">(<span class="params">newMarble</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="comment">// simon should now own the marble</span></div><div class="line">                            newMarble.owner.getIdentifier().should.equal(<span class="string">'sstone1@example.com'</span>);</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hyperledger composer-sample-networks（一）]]></title>
      <url>/2017/12/18/hyperledger%20composer-sample-networks%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/hyperledger/composer-sample-networks" target="_blank" rel="external">composer-sample-networks</a></p>
<h3 id="1-创建business-network"><a href="#1-创建business-network" class="headerlink" title="1. 创建business network"></a>1. 创建business network</h3><p>clone官方示例，获取Business Network Definitions</p>
<pre><code>git clone https://github.com/hyperledger/composer-sample-networks.git
</code></pre><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc39sr54j20k704rgmi.jpg" alt="clone"></p>
<h3 id="2-安装-Lerna-来-build-该仓库文件"><a href="#2-安装-Lerna-来-build-该仓库文件" class="headerlink" title="2. 安装 Lerna 来 build 该仓库文件"></a>2. 安装 Lerna 来 build 该仓库文件</h3><pre><code>$ npm install -g lerna
</code></pre><p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3a6f1fj20kb02xglv.jpg" alt="lerna1"></p>
<h3 id="3-bootstrap-the-repository"><a href="#3-bootstrap-the-repository" class="headerlink" title="3. bootstrap the repository"></a>3. bootstrap the repository</h3><p>安装依赖，链接package（正如normal node.js package）</p>
<pre><code>$ lerna bootstrap
</code></pre><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fmlc3al8w2j20ow0fsmzk.jpg" alt="lerna2"></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fmlc3aysw8j20kf06y3zs.jpg" alt="lerna3"></p>
<a id="more"></a>
<h3 id="4-使用lerna一次性在所有packege中执行npm命令"><a href="#4-使用lerna一次性在所有packege中执行npm命令" class="headerlink" title="4. 使用lerna一次性在所有packege中执行npm命令"></a>4. 使用lerna一次性在所有packege中执行npm命令</h3><pre><code>$ lerna run test
</code></pre><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3be6g1j20jk015aa1.jpg" alt="lerna5"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fmlc3c3ftbj20kc0k275x.jpg" alt="bond1"></p>
<p>自动生成打包好的<code>.bna</code>文件</p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1fmlc3cpkp7j20m70b0myl.jpg" alt="bond2"></p>
<h3 id="5-Bond-Network"><a href="#5-Bond-Network" class="headerlink" title="5. Bond Network"></a>5. Bond Network</h3><p><a href="https://github.com/hyperledger/composer-sample-networks/tree/master/packages/bond-network" target="_blank" rel="external">Bond债券 Network</a></p>
<blockquote>
<p>The Bond Network allows the issuer of a bond to update the bond information whilst other members of the business network can only read the bond data.</p>
</blockquote>
<ul>
<li><strong>Participants</strong> Issuer Member</li>
<li><strong>Assets</strong> BondAsset</li>
<li><strong>Transactions</strong> PublishBond</li>
</ul>
<p>The PublishBond transaction submitted by an Issuer participant will create a new BondAsset.</p>
<ul>
<li>Create a <code>Issuer</code> participant:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.bond.Issuer&quot;,</div><div class="line">  &quot;memberId&quot;: &quot;memberId:1&quot;,</div><div class="line">  &quot;name&quot;: &quot;Billy Thompson&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Create a <code>Member</code> participant:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.bond.Member&quot;,</div><div class="line">  &quot;memberId&quot;: &quot;memberId:1&quot;,</div><div class="line">  &quot;name&quot;: &quot;Jenny Jones&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Submit a <code>PublishBond</code> transaction:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.bond.PublishBond&quot;,</div><div class="line">  &quot;ISINCode&quot;: &quot;ISINCode:1234&quot;,</div><div class="line">  &quot;bond&quot;: &#123;</div><div class="line">    &quot;$class&quot;: &quot;org.acme.bond.Bond&quot;,</div><div class="line">    &quot;instrumentId&quot;: [],</div><div class="line">    &quot;exchangeId&quot;: [],</div><div class="line">    &quot;maturity&quot;: &quot;2017-07-13T09:39:05.369Z&quot;,</div><div class="line">    &quot;parValue&quot;: 1000,</div><div class="line">    &quot;faceAmount&quot;: 1000,</div><div class="line">    &quot;paymentFrequency&quot;: &#123;</div><div class="line">      &quot;$class&quot;: &quot;org.acme.bond.PaymentFrequency&quot;,</div><div class="line">      &quot;periodMultiplier&quot;: 0,</div><div class="line">      &quot;period&quot;: &quot;DAY&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;dayCountFraction&quot;: &quot;&quot;,</div><div class="line">    &quot;issuer&quot;: &quot;resource:org.acme.bond.Issuer#memberId:1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>bond.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'#publish'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">    it(<span class="string">'should be able to publish a bond'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">        <span class="keyword">const</span> factory = businessNetworkConnection.getBusinessNetwork().getFactory();</div><div class="line"></div><div class="line">        <span class="comment">// create the issuer发行人</span></div><div class="line">        <span class="keyword">const</span> issuer = factory.newResource(namespace, <span class="string">'Issuer'</span>, <span class="string">'daniel.selman@example.com'</span>);</div><div class="line">        issuer.name = <span class="string">'Dan Selman Holdings'</span>;</div><div class="line"></div><div class="line">        <span class="comment">// create the bond</span></div><div class="line">        <span class="keyword">const</span> paymentFrequency = factory.newConcept(namespace, <span class="string">'PaymentFrequency'</span>);</div><div class="line">        paymentFrequency.periodMultiplier = <span class="number">6</span>;</div><div class="line">        paymentFrequency.period = <span class="string">'MONTH'</span>;</div><div class="line">        <span class="keyword">const</span> bond = factory.newConcept(namespace, <span class="string">'Bond'</span>);</div><div class="line">        bond.instrumentId = [<span class="string">'ACME'</span>];</div><div class="line">        bond.exchangeId = [<span class="string">'NYSE'</span>];</div><div class="line">        bond.maturity = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-02-27T21:03:52+00:00'</span>);</div><div class="line">        bond.parValue = <span class="number">1000</span>;</div><div class="line">        bond.faceAmount = <span class="number">1000</span>;</div><div class="line">        bond.paymentFrequency = paymentFrequency;</div><div class="line">        bond.dayCountFraction = <span class="string">'EOM'</span>;</div><div class="line">        bond.issuer = factory.newRelationship(namespace, <span class="string">'Issuer'</span>, issuer.$identifier);</div><div class="line"></div><div class="line">        <span class="comment">// create the publish the bond transaction</span></div><div class="line">        <span class="keyword">const</span> publishBond = factory.newTransaction(namespace, <span class="string">'PublishBond'</span>);</div><div class="line">        publishBond.bond = bond;</div><div class="line">        publishBond.ISINCode = <span class="string">'US4592001014'</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> businessNetworkConnection.getParticipantRegistry(namespace + <span class="string">'.Issuer'</span>)</div><div class="line">        .then(<span class="function">(<span class="params">issuerRegistry</span>) =&gt;</span> &#123;</div><div class="line">            <span class="comment">// add the issuers</span></div><div class="line">            <span class="keyword">return</span> issuerRegistry.addAll([issuer]);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// submit the publishBond</span></div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.submitTransaction(publishBond);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> businessNetworkConnection.getAssetRegistry(namespace + <span class="string">'.BondAsset'</span>);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">bondRegistry</span>) =&gt;</span> &#123;</div><div class="line">            <span class="comment">// get the bond and check its contents</span></div><div class="line">            <span class="keyword">return</span> bondRegistry.get(publishBond.ISINCode);</div><div class="line">        &#125;)</div><div class="line">        .then(<span class="function">(<span class="params">newBondAsset</span>) =&gt;</span> &#123;</div><div class="line">            newBondAsset.ISINCode.should.equal(publishBond.ISINCode);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HEXO 新主题mellow]]></title>
      <url>/2017/12/16/HEXO%20%E6%96%B0%E4%B8%BB%E9%A2%98mellow/</url>
      <content type="html"><![CDATA[<p>主题<a href="https://github.com/codefine/hexo-theme-mellow" target="_blank" rel="external">mellow</a><br>作者<a href="http://blog.lujingtao.com/" target="_blank" rel="external">Michael.Lu</a><br><a href="https://github.com/codefine/hexo-theme-mellow/wiki" target="_blank" rel="external">文档</a></p>
<p>用了一年多的默认主题landscape，虽然简洁但功能欠缺，干脆换个主题。最后选择了mellow，因为UI好看，基础功能全面，非常轻量，而且评论系统valine使用友好。</p>
<figure class="image-box">
                <img src="http://wx4.sinaimg.cn/large/789d050dgy1fmhv3xe69oj21hc0xctys.jpg" alt="原banner" title="justify-full" class="">
                <p>justify-full</p>
            </figure>
<a id="more"></a>
<p>下面贴几个该主题的自定义markdown语法。</p>
<h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><blockquote><p>明日の予定もわからない<br>〖面对未知的明天 也要勇敢的去冒险〗<br>無限大な夢のあとの<br>〖在无限延伸的梦想后面〗<br>何もない世の中じゃ<br>〖穿越冷酷无情的世界〗<br>そうさ愛しい<br>〖不想要输给自己〗<br>想いも負けそうになるけど<br>〖有你的美丽记忆会让我更加努力〗<br>Stayしがちなイメージだらけの<br>〖相信爱永远不会止息〗<br>頼りない翼でも<br>〖即使偶尔会遇上难题〗<br>きっと飛べるさ<br>〖一定能化险为夷〗</p>
<footer><strong>和田光司</strong><cite><a href="http://music.163.com/#/song?id=4940920&userid=66808772" target="_blank" rel="external">Butter-Fly</a></cite></footer></blockquote>
<h3 id="带标题及链接的代码"><a href="#带标题及链接的代码" class="headerlink" title="带标题及链接的代码"></a>带标题及链接的代码</h3><figure class="highlight js"><figcaption><span>jQuery</span><a href="http://api.jquery.com/delegate/" target="_blank" rel="external">$.delegate()</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"table"</span> ).delegate( <span class="string">"td"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $( <span class="keyword">this</span> ).toggleClass( <span class="string">"chosen"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="双栏结构"><a href="#双栏结构" class="headerlink" title="双栏结构"></a>双栏结构</h3><p>@column-2{</p>
<p>@card{</p>
<p>左</p>
<p>}</p>
<p>@card{</p>
<p>右</p>
<p>}</p>
<p>}</p>
<h3 id="控制文本对齐方式的三栏结构"><a href="#控制文本对齐方式的三栏结构" class="headerlink" title="控制文本对齐方式的三栏结构"></a>控制文本对齐方式的三栏结构</h3><p>@column-3{</p>
<p>@card{</p>
<p>左</p>
<p>}</p>
<p>@card{</p>
<p>@center{</p>
<p>中</p>
<p>}</p>
<p>}</p>
<p>@card{</p>
<p>@right{</p>
<p>右</p>
<p>}</p>
<p>}</p>
<p>}</p>
<h2 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h2><p>@timeline{</p>
<h5 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h5><p>@item{</p>
<h6 id="Nov-10"><a href="#Nov-10" class="headerlink" title="Nov 10"></a>Nov 10</h6><p>搭建了hexo博客<br>(<em>^__^</em>)</p>
<p>}</p>
<p>@item{</p>
<h6 id="Nov-11"><a href="#Nov-11" class="headerlink" title="Nov 11"></a>Nov 11</h6><p>搞好了域名<br>(＾－＾)V</p>
<p>}</p>
<h5 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h5><p>@item{</p>
<h6 id="Dec-15"><a href="#Dec-15" class="headerlink" title="Dec 15"></a>Dec 15</h6><p>换了新主题mellow<br>o(∩_∩)o</p>
<p>}</p>
<p>}</p>
<h3 id="音乐外链"><a href="#音乐外链" class="headerlink" title="音乐外链"></a>音乐外链</h3><p>iframe框架代码中加入 <code>type=&quot;music&quot;</code> 字段</p>
<iframe type="music" frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4940920&auto=1&height=66"></iframe>


]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google 地图 JavaScript API（五）]]></title>
      <url>/2017/12/05/Google%20%E5%9C%B0%E5%9B%BE%20JavaScript%20API%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>根据udacity课程学习的笔记。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/?hl=zh_CN" target="_blank" rel="external">教程和文档</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/reference" target="_blank" rel="external">Google Maps JavaScript API V3 Reference</a></p>
<hr>
<h3 id="1-方向API"><a href="#1-方向API" class="headerlink" title="1. 方向API"></a>1. 方向API</h3><p>是一项计算位置间路线的服务。您可以搜索包括公共交通、驾车、步行或骑行在内的几种交通模式的路线。</p>
<p><a href="https://developers.google.com/maps/documentation/directions/" target="_blank" rel="external">Google Maps Directions API</a> </p>
<p><a href="https://developers.google.com/maps/documentation/javascript/directions" target="_blank" rel="external">方向服务</a></p>
<pre><code>https://maps.googleapis.com/maps/api/directions/json?origin=75+9th+Ave+New+York,+NY&amp;destination=MetLife+Stadium+1+MetLife+Stadium+Dr+East+Rutherford,+NJ+07073&amp;waypoints=optimize:true|Providence,+RI|Hartford,+CT&amp;mode=transit&amp;arrival_time=1391374800&amp;departure_time=1541202457&amp;traffic_model=best_guess&amp;key=YOUR_API_KEY
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加一个按钮指向新函数displayDirections( origins[i])</span></div><div class="line"><span class="comment">//传入起点是列出的地址，使用的终点是用户输入地址</span></div><div class="line"><span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</div><div class="line">  <span class="attr">content</span>:durationText+<span class="string">'away,'</span>+distanceText+</div><div class="line">  <span class="string">'&lt;div&gt;&lt;input type=\"button\" value=\"View Route\" onclick ='</span> +</div><div class="line">  <span class="string">'\"displayDirections(&amp;quot;'</span> + origins[i] + <span class="string">'&amp;quot;);\"&gt;&lt;/input&gt;&lt;/div&gt;'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算实际方向并在地图上显示路线</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayDirections</span>(<span class="params">origin</span>) </span>&#123;</div><div class="line">  hideListings();</div><div class="line">  <span class="comment">//初始化新实例</span></div><div class="line">  <span class="keyword">var</span> directionsService = <span class="keyword">new</span> google.maps.DirectionsService;</div><div class="line">  <span class="comment">//重新捕获用户输入终点和出行模式</span></div><div class="line">  <span class="keyword">var</span> destinationAddress =<span class="built_in">document</span>.getElementById(<span class="string">'search-within-time-text'</span>).value;</div><div class="line">  <span class="keyword">var</span> mode = <span class="built_in">document</span>.getElementById(<span class="string">'mode'</span>).value;</div><div class="line">  <span class="comment">//计算路线，传入起点，终点，出行模式</span></div><div class="line">  directionsService.route(&#123;</div><div class="line">    <span class="comment">// The origin is the passed in marker's position.</span></div><div class="line">    origin: origin,</div><div class="line">    <span class="comment">// The destination is user entered address.</span></div><div class="line">    destination: destinationAddress,</div><div class="line">    <span class="attr">travelMode</span>: google.maps.TravelMode[mode]</div><div class="line">  &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">response, status</span>) </span>&#123;</div><div class="line">    <span class="comment">//获得响应后确保状态为OK</span></div><div class="line">    <span class="keyword">if</span> (status === google.maps.DirectionsStatus.OK) &#123;</div><div class="line">      <span class="comment">//此渲染器负责显示信息，在地图上显示最终的折线</span></div><div class="line">      <span class="keyword">var</span> directionsDisplay = <span class="keyword">new</span> google.maps.DirectionsRenderer(&#123;</div><div class="line">        <span class="comment">//指定地图</span></div><div class="line">        map: map,</div><div class="line">        <span class="comment">//从路线响应中获取方向</span></div><div class="line">        directions: response,</div><div class="line">        <span class="comment">//路线可移动</span></div><div class="line">        draggable: <span class="literal">true</span>,</div><div class="line">        <span class="comment">//路线绿色</span></div><div class="line">        polylineOptions: &#123;</div><div class="line">          <span class="attr">strokeColor</span>: <span class="string">'green'</span></div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">window</span>.alert(<span class="string">'Directions request failed due to '</span> + status);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-距离矩阵和方向API注意点"><a href="#2-距离矩阵和方向API注意点" class="headerlink" title="2. 距离矩阵和方向API注意点"></a>2. 距离矩阵和方向API注意点</h3><p><strong>距离矩阵 API 请求</strong> 通过组合使用 ORIGIN、DESTINATION 和 TRAVELMODE 发出。在发出请求时，请注意以下几点：</p>
<ul>
<li>无论选择何种出行方式，每个请求最多可以传入 25 个 起点或者 25 个终点，但元素最多仅限 100 个， 且元素个数 =起点数*终点数。例如，10 个起点和 10 个 终点 = 100 个元素。在使用 Web 服务的情况下， 对于高级计划客户，此值最大可达到 625。</li>
<li>虽然大多数其他服务受速率限制（每秒查询数不超过 50）， 但距离矩阵 API 在元素（而非查询）方面受到 速率 限制。如果某时间段内请求的元素数目 过多，将返回 OVER_QUERY_LIMIT 响应 代码。</li>
<li>某些参数仅适用于特定出行方式， 例如：<ul>
<li>如果出行方式为 transit，则将忽略 AvoidTolls 和 AvoidHighways</li>
<li>仅当出行方式为 transit 时，所有 TransitOptions 才有效 </li>
<li>departureTime 可在传递DrivingOptions 或 TransitOptions 参数时进行传递</li>
</ul>
</li>
</ul>
<p><strong>方向 API 请求</strong> 也涉及 ORIGIN、DESTINATION 和 TRAVELMODE，但还具有可选 参数 WAYPOINTS 或 VIA points。在发出请求时， 请注意以下几点：</p>
<ul>
<li>对于客户端方向服务（使用 Javascript API）， 除起点和终点外，最多可指定 8 个 途经点/请求 ，即每个请求 共 10个地理编码点。对于 高级计划 客户，这一限值由 8 增加至 23</li>
<li>对于 Web 服务，只要提供 API 密钥等有效标识符， 即可为每个请求指定最多 23 个途经点。如果超出限制， 响应 代码将给出相应指示。</li>
<li>TRANSIT 出行方式不支持途经点</li>
</ul>
<h3 id="3-道路API"><a href="#3-道路API" class="headerlink" title="3. 道路API"></a>3. 道路API</h3><p>通过 Google Maps Roads API 追踪 GPS 面包屑导航轨迹，以绘制车辆行驶的道路地图和确定这些路段沿线的速度限制。<br>标识车辆行驶的道路，并提供有关这些道路的附加元数据（如速度限制）。</p>
<p><a href="https://developers.google.com/maps/documentation/roads/intro" target="_blank" rel="external">Google Maps Roads API</a></p>
<p><a href="https://developers.google.com/maps/documentation/roads/inspector" target="_blank" rel="external">Google Maps Roads API 检查器</a><br>用自定义点测试道路吸附请求</p>
<h3 id="4-地点自动完成"><a href="#4-地点自动完成" class="headerlink" title="4. 地点自动完成"></a>4. 地点自动完成</h3><a id="more"></a> 
<p>加载地点库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 用于异步加载API --&gt;</div><div class="line">&lt;script async defer src="https://maps.googleapis.com/maps/api/js?key=输入key&amp;libraries=places,drawing,geometry&amp;v=3&amp;callback=initMap"&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>search for nearby places<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"places-search"</span> <span class="attr">placeholder</span>=<span class="string">"Ex: 电子科技大学邮政代办所"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"go-places"</span> <span class="attr">value</span>=<span class="string">"Go"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//把地点自动完成实例绑定到文本输入框</span></div><div class="line"><span class="keyword">var</span> timeAutocomplete = <span class="keyword">new</span> google.maps.places.Autocomplete(</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'search-within-time-text'</span>)</div><div class="line">);</div><div class="line"><span class="keyword">var</span> zoomAutocomplete = <span class="keyword">new</span> google.maps.places.Autocomplete(</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'zoom-to-area-text'</span>)</div><div class="line">);</div><div class="line"><span class="comment">//添加边界限制为地图范围内</span></div><div class="line">zoomAutocomplete.bindTo(<span class="string">'bounds'</span>,map);</div><div class="line">      <span class="comment">//创建一个文本搜索框</span></div><div class="line"><span class="keyword">var</span> searchBox = <span class="keyword">new</span> google.maps.places.SearchBox(</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'places-search'</span>)</div><div class="line">);</div><div class="line"><span class="comment">//搜索框范围限制在地图内</span></div><div class="line">searchBox.setBounds(map.getBounds());</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 监听用户从选项列表中选择一个选项</span></div><div class="line"><span class="comment">// 即地点变化事件</span></div><div class="line">searchBox.addListener(<span class="string">'places_changed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  searchBoxPlaces(<span class="keyword">this</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 监听用户输入并点击go按钮，而未选择建议选项的情况</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'go-places'</span>).addEventListener(<span class="string">'click'</span>, textSearchPlaces);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个全局地点标记数组</span></div><div class="line"><span class="keyword">var</span> placeMarkers =[];</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当用户输入一个值时将获得普通查询词条</span></div><div class="line"><span class="comment">//用户选择搜索栏提供选项时</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchBoxPlaces</span>(<span class="params">searchBox</span>) </span>&#123;</div><div class="line">  <span class="comment">//隐藏上次搜索中的任何地点标记</span></div><div class="line">  hideMarkers(placeMarkers);</div><div class="line">  <span class="comment">//找到匹配查询词条的所有地点</span></div><div class="line">  <span class="keyword">var</span> places = searchBox.getPlaces();</div><div class="line">  <span class="comment">// For each place, get the icon, name and location.</span></div><div class="line">  createMarkersForPlaces(places);</div><div class="line">  <span class="keyword">if</span> (places.length == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.alert(<span class="string">'We did not find any places matching that search!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此函数在用户输入查询词条或位置并点击go按钮时执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">textSearchPlaces</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//捕捉地图界限</span></div><div class="line">  <span class="keyword">var</span> bounds = map.getBounds();</div><div class="line">  <span class="comment">//隐藏上次搜索中的任何地点标记</span></div><div class="line">  hideMarkers(placeMarkers);</div><div class="line">  <span class="comment">//创建新的地点服务实例</span></div><div class="line">  <span class="keyword">var</span> placesService = <span class="keyword">new</span> google.maps.places.PlacesService(map);</div><div class="line">  <span class="comment">//传入用户输入的查询词条和地图界限</span></div><div class="line">  placesService.textSearch(&#123;</div><div class="line">    <span class="attr">query</span>: <span class="built_in">document</span>.getElementById(<span class="string">'places-search'</span>).value,</div><div class="line">    <span class="attr">bounds</span>: bounds</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">results, status</span>) </span>&#123;</div><div class="line">    <span class="comment">//返回的结果（地点数组）状态OK</span></div><div class="line">    <span class="keyword">if</span> (status === google.maps.places.PlacesServiceStatus.OK) &#123;</div><div class="line">      createMarkersForPlaces(results);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历地点数组并为它们创建标记</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMarkersForPlaces</span>(<span class="params">places</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> bounds = <span class="keyword">new</span> google.maps.LatLngBounds();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; places.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> place = places[i];</div><div class="line">    <span class="keyword">var</span> icon = &#123;</div><div class="line">      <span class="attr">url</span>: place.icon,</div><div class="line">      <span class="attr">size</span>: <span class="keyword">new</span> google.maps.Size(<span class="number">35</span>, <span class="number">35</span>),</div><div class="line">      <span class="attr">origin</span>: <span class="keyword">new</span> google.maps.Point(<span class="number">0</span>, <span class="number">0</span>),</div><div class="line">      <span class="attr">anchor</span>: <span class="keyword">new</span> google.maps.Point(<span class="number">15</span>, <span class="number">34</span>),</div><div class="line">      <span class="attr">scaledSize</span>: <span class="keyword">new</span> google.maps.Size(<span class="number">25</span>, <span class="number">25</span>)</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// Create a marker for each place.</span></div><div class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</div><div class="line">      <span class="attr">map</span>: map,</div><div class="line">      <span class="attr">icon</span>: icon,</div><div class="line">      <span class="attr">title</span>: place.name,</div><div class="line">      <span class="attr">position</span>: place.geometry.location,</div><div class="line">      <span class="attr">id</span>: place.id</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// If a marker is clicked, do a place details search on it in the next function.</span></div><div class="line">    marker.addListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    getPlacesDetails(<span class="keyword">this</span>, place);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//将创建的每个标记放入placeMarkers数组</span></div><div class="line">    placeMarkers.push(marker);</div><div class="line">    <span class="comment">//调节地图平衡并使它适当放入返回的所有地点标记</span></div><div class="line">    <span class="keyword">if</span> (place.geometry.viewport) &#123;</div><div class="line">      <span class="comment">// Only geocodes have viewport.</span></div><div class="line">      bounds.union(place.geometry.viewport);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      bounds.extend(place.geometry.location);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  map.fitBounds(bounds);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-地点详情"><a href="#5-地点详情" class="headerlink" title="5. 地点详情"></a>5. 地点详情</h3><p><a href="https://developers.google.com/places/web-service/details" target="_blank" rel="external">Places API Web Service</a></p>
<pre><code>https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJN1t_tDeuEmsRUsoyG83frY4&amp;key=YOUR_API_KEY
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//function createMarkersForPlaces(places) 中添加</span></div><div class="line">    <span class="comment">//在每个不同地点标记间创造信息窗口显示地点详情</span></div><div class="line">    <span class="keyword">var</span> placeInfoWindow = <span class="keyword">new</span> google.maps.InfoWindow();</div><div class="line">    <span class="comment">// marker.addListener('click', function() &#123;</span></div><div class="line">    <span class="comment">// getPlacesDetails(this, place);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    marker.addListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (placeInfoWindow.marker == <span class="keyword">this</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"This infowindow already is on this marker!"</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        getPlacesDetails(<span class="keyword">this</span>, placeInfoWindow);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="6-地点-API-请求"><a href="#6-地点-API-请求" class="headerlink" title="6. 地点 API 请求"></a>6. 地点 API 请求</h3><p><strong>附近搜索</strong><br>附近搜索以前称为“地点搜索”， 是在某指定范围内搜索地点的最简单方式。可以指定 圆心和半径，划定搜索范围。附近搜索 默认返回含 20 个地点的列表，如具有高级计划许可，可返回含 60 个地点的列表。</p>
<p><strong>文本搜索</strong><br>文本搜索允许用户或系统使用文本查询执行地点搜索， 而无需指定位置。此搜索还可以 通过传递位置信息，设置搜索倾向。</p>
<p><strong>雷达搜索</strong><br>雷达搜索允许用户指定与附近搜索相同的参数， 可以返回 200 条结果，而不是 20 条， 但是返回数据有限。</p>
<p>在所有搜索中，都可以将 <code>next_page_token</code> 的值传递到 新搜索的 <code>pagetoken</code> 参数中，以查看 下一组结果。如果 <code>next_page_token</code> 为空，或未返回， 则说明不存在更多结果。</p>
<p>下面列出了必需参数和可选参数， 以及能够与这些参数配合使用的搜索方法。</p>
<p><img src="https://lh3.googleusercontent.com/qFxkShPh5qNPpNzzmtNKjhUKZuOD3NM6O3Yx9ajCgyxjf8HZkoBv4UzfomkkYhfVo9xWcqpEN76oIp3DSTL6=s0#w=651&amp;h=370" alt="地点 API 请求1"><br><img src="https://lh3.googleusercontent.com/D87WymWM5s9-MLFYkx965W0orXtP_GiQaejhArKE1Tw71aEK8wRnuOEh2fkAaPxmDaAHXIpU9JQ016B0fs7_=s0#w=651&amp;h=867" alt="地点 API 请求2"><br><img src="https://lh3.googleusercontent.com/gaqcuIF8lZAs7ApNDUF35LV5PqzySnh-8uZ-7RWgi-saBLli-TzdEmDpEZ7_-3uUWmITSN5DRc9KqHww6mM=s0#w=651&amp;h=390" alt="地点 API 请求3"></p>
<h3 id="7-时区API"><a href="#7-时区API" class="headerlink" title="7. 时区API"></a>7. 时区API</h3><p><a href="https://developers.google.com/maps/documentation/timezone/intro?hl=zh-cn" target="_blank" rel="external">Time Zone API</a></p>
<p>Google Maps Time Zone API 提供地球表明各位置的时间偏移数据。您可以请求特定纬度/经度对和日期的时区信息。该 API 将返回该时区的名称、与协调世界时的时间偏移以及夏令时偏移。<br>您可以通过 HTTPS 接口访问 Google Maps Time Zone API。</p>
<pre><code>https://maps.googleapis.com/maps/api/timezone/json?location=30.310597,120.343251&amp;timestamp=1331161200&amp;key=输入key
</code></pre><p><code>timestamp=1331161200</code>表示单位为秒的时间戳<br><code>UTC</code>协调世界时，格林尼治标准时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;dstOffset&quot; : 0,</div><div class="line">   &quot;rawOffset&quot; : 28800,</div><div class="line">   &quot;status&quot; : &quot;OK&quot;,</div><div class="line">   &quot;timeZoneId&quot; : &quot;Asia/Shanghai&quot;,</div><div class="line">   &quot;timeZoneName&quot; : &quot;China Standard Time&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>dstOffset</code>: 夏令时偏移<br><code>rawOffset</code>: UTC偏移28800s即8h</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google 地图 JavaScript API（四）]]></title>
      <url>/2017/12/04/Google%20%E5%9C%B0%E5%9B%BE%20JavaScript%20API%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>根据udacity课程学习的笔记。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/?hl=zh_CN" target="_blank" rel="external">教程和文档</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/reference" target="_blank" rel="external">Google Maps JavaScript API V3 Reference</a></p>
<hr>
<h3 id="1-地理编码"><a href="#1-地理编码" class="headerlink" title="1. 地理编码"></a>1. 地理编码</h3><p>在地址和经纬度之间转换</p>
<p><code>地理编码</code>是将地址（如“1600 Amphitheatre Parkway, Mountain View, CA”）转换为地理坐标（如纬度 37.423021 和经度 -122.083739）的过程，您可以借此在地图上放置标记，或在地图上定位。</p>
<p><code>反向地理编码</code>是将地理坐标转换为可人工读取的地址的过程。反向地理编码器还可让您找到对应于给定的地点 ID 的地址。</p>
<p><a href="https://google-developers.appspot.com/maps/documentation/utils/geocoder/" target="_blank" rel="external">地理编码查询</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/geocoding" target="_blank" rel="external">地理编码服务</a></p>
<p>地理编码 API <a href="https://developers.google.com/maps/documentation/geocoding/intro" target="_blank" rel="external">Geocoding API</a> </p>
<p>地理编码的 <a href="https://developers.google.com/maps/documentation/geocoding/intro#StatusCodes" target="_blank" rel="external">状态代码</a> 和 <a href="https://developers.google.com/maps/documentation/geocoding/intro#Types" target="_blank" rel="external">地址和组成部分类型</a> </p>
<p>地理寻宝游戏<a href="https://www.geocaching.com/play" target="_blank" rel="external">Geocaching</a></p>
<hr>
<p>Google Maps Geocoding API 请求使用以下格式：</p>
<pre><code>https://maps.googleapis.com/maps/api/geocode/outputFormat?parameters

//json输出
https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;key=YOUR_API_KEY
//XML输出
https://maps.googleapis.com/maps/api/geocode/xml?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;key=YOUR_API_KEY
//parameters参数：地址&amp;密钥
</code></pre><p>示例<br>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://maps.googleapis.com/maps/api/geocode/json?key=输入API&amp;latlng=30.315099,120.342865</div></pre></td></tr></table></figure></p>
<p>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;results&quot; : [</div><div class="line">      &#123;</div><div class="line">        &quot;//&quot;:&quot;地址要素部分，分解信息为街道、城镇、社区、州、国家等&quot;,</div><div class="line">        &quot;//&quot;:&quot;详情查阅前面地址类型和地址组成部分类型链接&quot;,</div><div class="line">         &quot;address_components&quot; : [</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;问鼎西路&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;问鼎西路&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;route&quot; ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;下沙&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;下沙&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;neighborhood&quot;, &quot;political&quot; ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;江干区&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;江干区&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;political&quot;, &quot;sublocality&quot;, &quot;sublocality_level_1&quot; ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;杭州市&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;杭州市&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;locality&quot;, &quot;political&quot; ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;浙江省&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;浙江省&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;administrative_area_level_1&quot;, &quot;political&quot; ]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">               &quot;long_name&quot; : &quot;中国&quot;,</div><div class="line">               &quot;short_name&quot; : &quot;CN&quot;,</div><div class="line">               &quot;types&quot; : [ &quot;country&quot;, &quot;political&quot; ]</div><div class="line">            &#125;</div><div class="line">         ],</div><div class="line">         &quot;//&quot;:&quot;格式化地址&quot;,</div><div class="line">         &quot;formatted_address&quot; : &quot;中国浙江省杭州市江干区下沙问鼎西路&quot;,</div><div class="line">         &quot;//&quot;:&quot;几何图形包含实际位置的经纬度和其他重要信息&quot;,</div><div class="line">         &quot;geometry&quot; : &#123;</div><div class="line">            &quot;bounds&quot; : &#123;</div><div class="line">               &quot;northeast&quot; : &#123;</div><div class="line">                  &quot;lat&quot; : 30.314869,</div><div class="line">                  &quot;lng&quot; : 120.3432986</div><div class="line">               &#125;,</div><div class="line">               &quot;southwest&quot; : &#123;</div><div class="line">                  &quot;lat&quot; : 30.3116694,</div><div class="line">                  &quot;lng&quot; : 120.3429376</div><div class="line">               &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;//&quot;:&quot;经纬度&quot;,</div><div class="line">            &quot;location&quot; : &#123;</div><div class="line">               &quot;lat&quot; : 30.3131545,</div><div class="line">               &quot;lng&quot; : 120.3429652</div><div class="line">            &#125;,</div><div class="line">            &quot;//&quot;:&quot;位置类型告诉我们返回点的更多信息&quot;,</div><div class="line">            &quot;//&quot;:&quot;rooftop屋顶说明获得了位置的全部匹配&quot;,</div><div class="line">            &quot;//&quot;:&quot;若是range interpolated差值范围：地理编码根据周围点近似的一个点&quot;,</div><div class="line">            &quot;//&quot;:&quot;若是geometric center几何中心：获得一条线的中心点&quot;,</div><div class="line">            &quot;location_type&quot; : &quot;GEOMETRIC_CENTER&quot;,</div><div class="line">            &quot;viewport&quot; : &#123;</div><div class="line">               &quot;northeast&quot; : &#123;</div><div class="line">                  &quot;lat&quot; : 30.314869,</div><div class="line">                  &quot;lng&quot; : 120.3444670802915</div><div class="line">               &#125;,</div><div class="line">               &quot;southwest&quot; : &#123;</div><div class="line">                  &quot;lat&quot; : 30.3116694,</div><div class="line">                  &quot;lng&quot; : 120.3417691197085</div><div class="line">               &#125;</div><div class="line">            &#125;</div><div class="line">         &#125;,</div><div class="line">         &quot;//&quot;:&quot;地点ID是任何地点的另一个唯一标识符&quot;,</div><div class="line">         &quot;place_id&quot; : &quot;ChIJycYN2imYTDQRoLUHSrSQQE8&quot;,</div><div class="line">         &quot;types&quot; : [ &quot;route&quot; ]</div><div class="line">      &#125;,</div><div class="line">   ],</div><div class="line">   &quot;//&quot;:&quot;告诉我们请求是否成功，能在各种web服务间共享，详情查询前面状态代码链接&quot;,</div><div class="line">   &quot;//&quot;:&quot;ok指找到一个或多个结果&quot;,</div><div class="line">   &quot;//&quot;:&quot;ZERO_RESULTS表示地理编码成功，但未返回任何结果&quot;,</div><div class="line">   &quot;//&quot;:&quot;invali request指请求中包含一些错误&quot;,</div><div class="line">   &quot;//&quot;:&quot;unknown error通常指服务器错误并可重复请求直到成功&quot;,</div><div class="line">   &quot;//&quot;:&quot;query limit error超过查询限制错误&quot;,</div><div class="line">   &quot;//&quot;:&quot;request denied error请求被拒错误&quot;,</div><div class="line">   &quot;status&quot; : &quot;OK&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-地理编码应用"><a href="#2-地理编码应用" class="headerlink" title="2. 地理编码应用"></a>2. 地理编码应用</h3><a id="more"></a> 
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 提示用户选择城市中的一个区域，并添加缩放区域按钮 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"zoom-to-area-text"</span> <span class="attr">value</span>=<span class="string">"enter your favourite area"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"zoom-to-area"</span> <span class="attr">value</span>=<span class="string">"Zoom"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#zoom-to-area-text</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#zoom-to-area</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">24%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击按钮缩放区域</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'zoom-to-area'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  zoomToArea();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取用户输入的地址,通过地理编码获得经纬度，然后放大</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">zoomToArea</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建一个新的地理编码器实例</span></div><div class="line">  <span class="keyword">var</span> geocoder = <span class="keyword">new</span> google.maps.Geocoder();</div><div class="line">  <span class="comment">// 捕获用户输入的地址</span></div><div class="line">  <span class="keyword">var</span> address = <span class="built_in">document</span>.getElementById(<span class="string">'zoom-to-area-text'</span>).value;</div><div class="line">  <span class="comment">// 确保地址不是空白</span></div><div class="line">  <span class="keyword">if</span> (address == <span class="string">''</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.alert(<span class="string">'You must enter an area, or address.'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 对地址进行地理编码</span></div><div class="line">    geocoder.geocode(</div><div class="line">      &#123; <span class="attr">address</span>: address,</div><div class="line">        <span class="comment">//添加要素限制以确保在城市内</span></div><div class="line">        componentRestrictions: &#123;<span class="attr">locality</span>: <span class="string">'杭州市'</span>&#125;</div><div class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">results, status</span>) </span>&#123;</div><div class="line">        <span class="comment">//如果获得结果，检查地理编码器状态</span></div><div class="line">        <span class="keyword">if</span> (status == google.maps.GeocoderStatus.OK) &#123;</div><div class="line">          <span class="comment">//通过获得的经纬度重新聚焦地图并放大</span></div><div class="line">          map.setCenter(results[<span class="number">0</span>].geometry.location);</div><div class="line">          map.setZoom(<span class="number">15</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">window</span>.alert(<span class="string">'We could not find that location - try entering a more'</span> +</div><div class="line">              <span class="string">' specific place.'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-海拔API"><a href="#3-海拔API" class="headerlink" title="3. 海拔API"></a>3. 海拔API</h3><p><a href="https://developers.google.com/maps/documentation/elevation/intro" target="_blank" rel="external">Elevation API</a><br>利用 Google Maps Elevation API，您可以通过一个简单的接口查询地球上各个位置的海拔高度数据。此外，您还可以请求路径沿途的抽样海拔高度数据，以便计算路线沿途的海拔高度变化。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/elevation" target="_blank" rel="external">海拔服务</a></p>
<p>查询 雷峰塔海拔</p>
<pre><code>https://maps.googleapis.com/maps/api/elevation/json?locations=30.231596,120.14966&amp;key=输入API
</code></pre><p>返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"results"</span> : [</div><div class="line">      &#123;</div><div class="line">         <span class="attr">"elevation"</span> : <span class="number">16.24967765808105</span>,</div><div class="line">         <span class="attr">"location"</span> : &#123;</div><div class="line">            <span class="attr">"lat"</span> : <span class="number">30.231596</span>,</div><div class="line">            <span class="attr">"lng"</span> : <span class="number">120.14966</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"resolution"</span> : <span class="number">152.7032318115234</span></div><div class="line">      &#125;</div><div class="line">   ],</div><div class="line">   <span class="attr">"status"</span> : <span class="string">"OK"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-距离矩阵API"><a href="#4-距离矩阵API" class="headerlink" title="4. 距离矩阵API"></a>4. 距离矩阵API</h3><p>使用给定出行方式计算多个起点与终点之间的行程距离和行程持续时间。</p>
<p><a href="https://developers.google.com/maps/documentation/distance-matrix/start" target="_blank" rel="external">Distance Matrix API</a> </p>
<p><a href="https://developers.google.com/maps/documentation/javascript/distancematrix" target="_blank" rel="external">Distance Matrix 服务</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Within<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 希望花费在通勤上的最长时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"max-duration"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span>10 min<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"15"</span>&gt;</span>15 min<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span>30 min<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"60"</span>&gt;</span>1 hour<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 出行方式 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"mode"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"DRIVING"</span>&gt;</span>drive<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"WALKING"</span>&gt;</span>walk<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"BICYCLING"</span>&gt;</span>bike<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"TRANSIT"</span>&gt;</span>transit ride<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>of<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 输入想要的地址和提示，以及前往按钮 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search-within-time-text"</span> <span class="attr">placeholder</span>=<span class="string">"Ex:中国工商银行ATM ，浙江省杭州市江干区下沙学林街"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"search-within-time"</span> <span class="attr">value</span>=<span class="string">"Go"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#search-within-time-text</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">84%</span>;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击按钮计算出行时间</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'search-within-time'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  searchWithinTime();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用distanceMatrixService计算每个标记和用户输入位置之间的距离和行程持续时间</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchWithinTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//初始化distanceMatrixService</span></div><div class="line">  <span class="keyword">var</span> distanceMatrixService = <span class="keyword">new</span> google.maps.DistanceMatrixService;</div><div class="line">  <span class="comment">//获得并检查地址</span></div><div class="line">  <span class="keyword">var</span> address =  <span class="built_in">document</span>.getElementById(<span class="string">'search-within-time-text'</span>).value;</div><div class="line">  <span class="keyword">if</span> (address == <span class="string">''</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.alert(<span class="string">'you must enter an address'</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    hideListings();</div><div class="line">    <span class="comment">//从标记列表中创建一个起点数组</span></div><div class="line">    <span class="keyword">var</span> origins =[];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">      origins[i] =markers[i].position;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//将用户输入地址作为终点</span></div><div class="line">    <span class="keyword">var</span> destination = address;</div><div class="line">    <span class="comment">//捕获用户输入的出行方式</span></div><div class="line">    <span class="keyword">var</span> mode = <span class="built_in">document</span>.getElementById(<span class="string">'mode'</span>).value;</div><div class="line">    <span class="comment">//调用getDistanceMatrix函数，传入起点、唯一终点、出行方式</span></div><div class="line">    distanceMatrixService.getDistanceMatrix(&#123;</div><div class="line">      <span class="attr">origins</span>:origins,</div><div class="line">      <span class="attr">destinations</span>:[destination],</div><div class="line">      <span class="attr">travelMode</span>: google.maps.TravelMode[mode],</div><div class="line">      <span class="comment">//指定距离单位为英制</span></div><div class="line">      unitSystem:google.maps.UnitSystem.IMPERIAL,</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">response,status</span>) </span>&#123;</div><div class="line">      <span class="comment">//收到返回的响应后，确认状态为OK</span></div><div class="line">      <span class="keyword">if</span> (status !== google.maps.DistanceMatrixStatus.OK) &#123;</div><div class="line">        <span class="built_in">window</span>.alert(<span class="string">'error was :'</span> + status);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//显示符合用户输入条件的所有标记</span></div><div class="line">        displayMarkersWithinTime(response);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayMarkersWithinTime</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="comment">//捕获用户输入的最大行程持续时间</span></div><div class="line">  <span class="keyword">var</span> maxDuration = <span class="built_in">document</span>.getElementById(<span class="string">'max-duration'</span>).value;</div><div class="line">  <span class="comment">//从响应中重新捕获所有起点和终点</span></div><div class="line">  <span class="keyword">var</span> origins = response.originAddresses;</div><div class="line">  <span class="keyword">var</span> destinations = response.destinationAddresses;</div><div class="line">  <span class="comment">//为每个起点队和终点创建元素</span></div><div class="line">  <span class="comment">//此元素将包含从A点到B点的距离和行程时间</span></div><div class="line">  <span class="keyword">var</span> atLeastOne = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; origins.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> results  = response.rows[i].elements;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; results.length; j++) &#123;</div><div class="line">      <span class="keyword">var</span> element = results[j];</div><div class="line">      <span class="keyword">if</span> (element.status == <span class="string">"OK"</span>) &#123;</div><div class="line">        <span class="comment">//文本形式捕获距离</span></div><div class="line">        <span class="keyword">var</span> distanceText = element.distance.text;</div><div class="line">        <span class="comment">//捕获行程时间的数值，方便下面比较用户设定的最大行程时间</span></div><div class="line">        <span class="keyword">var</span> duration =  element.duration.value/<span class="number">60</span>;</div><div class="line">        <span class="comment">//文本形式捕获行程时间</span></div><div class="line">        <span class="keyword">var</span> durationText = element.duration.text;</div><div class="line">        <span class="keyword">if</span> (duration&lt;=maxDuration) &#123;</div><div class="line">          <span class="comment">//行程时间小于用户输入，显示标记</span></div><div class="line">          markers[i].setMap(map);</div><div class="line">          <span class="comment">//即使状态OK也可能没找到在可接受通勤时间内的标记</span></div><div class="line">          <span class="comment">//所以设定atLeastOne变量让用户知道</span></div><div class="line">          atLeastOne = <span class="literal">true</span>;</div><div class="line">          <span class="comment">//对于显示的每个标记创建一个小的信息窗口</span></div><div class="line">          <span class="comment">//在此信息窗口中显示持续时间和行程距离</span></div><div class="line">          <span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</div><div class="line">            <span class="attr">content</span>:durationText+<span class="string">'away,'</span>+distanceText</div><div class="line">          &#125;);</div><div class="line">          infowindow.open(map,markers[i]);</div><div class="line">          markers[i].infowindow = infowindow;</div><div class="line">          <span class="comment">//如果用户点击标记就关闭小的信息窗口，然后跳出大信息窗口显示全景图</span></div><div class="line">          google.maps.event.addListener(markers[i],<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.infowindow.close();</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google 地图 JavaScript API（三）]]></title>
      <url>/2017/12/03/Google%20%E5%9C%B0%E5%9B%BE%20JavaScript%20API%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>根据udacity课程学习的笔记。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/?hl=zh_CN" target="_blank" rel="external">教程和文档</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/reference" target="_blank" rel="external">Google Maps JavaScript API V3 Reference</a></p>
<hr>
<h3 id="1-静态地图和街道地图成像"><a href="#1-静态地图和街道地图成像" class="headerlink" title="1. 静态地图和街道地图成像"></a>1. 静态地图和街道地图成像</h3><p>Google 静态地图 API<br><a href="https://developers.google.com/maps/documentation/static-maps/intro" target="_blank" rel="external">Google Static Maps API</a></p>
<p>Google 街道视图图像 API<br><a href="https://developers.google.com/maps/documentation/streetview/" target="_blank" rel="external">Street View Image API</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 点击标识时弹出信息窗口。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateInfoWindow</span>(<span class="params">marker, infowindow</span>) </span>&#123;</div><div class="line">  <span class="comment">// 检查信息窗口还没有在这个标识打开</span></div><div class="line">  <span class="keyword">if</span> (infowindow.marker != marker) &#123;</div><div class="line">    infowindow.marker = marker;</div><div class="line">    infowindow.setContent(<span class="string">'&lt;div&gt;'</span> + marker.title + <span class="string">'&lt;/div&gt;'</span>);</div><div class="line">    infowindow.open(map, marker);</div><div class="line">    <span class="comment">// 确保信息窗口关闭时已清空marker属性值</span></div><div class="line">    infowindow.addListener(<span class="string">'closeclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      infowindow.setMarker = <span class="literal">null</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//此服务根据离标记最近的位置获取全景图像</span></div><div class="line">    <span class="comment">//并找出相机朝向、角度(heading,pitch)</span></div><div class="line">    <span class="keyword">var</span> streetViewService = <span class="keyword">new</span> google.maps.StreetViewService();</div><div class="line">    <span class="comment">//寻找街景图像的范围</span></div><div class="line">    <span class="keyword">var</span> radius = <span class="number">50</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getStreetView</span>(<span class="params">data, status</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (status == google.maps.StreetViewStatus.OK) &#123;</div><div class="line">        <span class="comment">//取最近的街景位置</span></div><div class="line">        <span class="keyword">var</span> nearStreetViewLocation = data.location.latLng;</div><div class="line">        <span class="comment">//计算相机方向，要在加载api时添加&amp;libraries=geometry以使用谷歌地图的几何库</span></div><div class="line">        <span class="keyword">var</span> heading = google.maps.geometry.spherical.computeHeading(</div><div class="line">          nearStreetViewLocation, marker.position);</div><div class="line">        infowindow.setContent(<span class="string">'&lt;div&gt;'</span> + marker.title + <span class="string">'&lt;/div&gt;&lt;div id="pano"&gt;&lt;/div&gt;'</span>);</div><div class="line">        <span class="comment">//设置全景选项</span></div><div class="line">        <span class="keyword">var</span> panoramaOptions = &#123;</div><div class="line">          <span class="comment">//最近的街景位置</span></div><div class="line">          position: nearStreetViewLocation,</div><div class="line">          <span class="comment">//视角</span></div><div class="line">          pov: &#123;</div><div class="line">            <span class="attr">heading</span>: heading,</div><div class="line">            <span class="attr">pitch</span>: <span class="number">30</span></div><div class="line">          &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//创建街景并将它放在id为pano的div处的信息窗口</span></div><div class="line">        <span class="keyword">var</span> panorama = <span class="keyword">new</span> google.maps.StreetViewPanorama(</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">'pano'</span>), panoramaOptions);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果没有找到街景就在信息窗口放入说明信息</span></div><div class="line">        infowindow.setContent(<span class="string">'&lt;div&gt;'</span> + marker.title + <span class="string">'&lt;/div&gt;'</span> +</div><div class="line">          <span class="string">'&lt;div&gt;No Street View Found&lt;/div&gt;'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);</div><div class="line">    infowindow.open(map, marker);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求geometry library<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="keyword">async</span> defer</div><div class="line">    src=</div><div class="line">    <span class="string">"https://maps.googleapis.com/maps/api/js?key=MYAPIKEY&amp;libraries=geometry&amp;v=3&amp;callback=initMap"</span>&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>街道视图图像请求示例<br>outdoor Url</p>
<pre><code>https://maps.googleapis.com/maps/api/streetview?size=600x300&amp;location=46.414382,10.013988&amp;heading=151.78&amp;pitch=-0.76&amp;key=YOUR_API_KEY
</code></pre><p>indoor Url</p>
<pre><code>https://maps.googleapis.com/maps/api/streetview?size=600x300&amp;location=41.403609,2.174448&amp;heading=100&amp;pitch=28&amp;scale=2&amp;key=YOUR_API_KEY
</code></pre><h3 id="2-库"><a href="#2-库" class="headerlink" title="2. 库"></a>2. 库</h3><p><a href="https://developers.google.com/maps/documentation/javascript/libraries" target="_blank" rel="external">Maps JavaScript API 库</a></p>
<p>Maps API 的 JavaScript 代码通过<code>https://maps.googleapis.com/maps/api/js</code> 形式的引导程序 URL 进行加载。此引导程序请求会加载所有供在 Maps API 中使用的主要 JavaScript 对象和符号。此外，明确请求时才会加载的自包含内容库中也提供了一些 Maps API 功能。将辅助组件分解成内容库可使主 API 快速加载（和解析）；您只会招致在必要时加载和解析内容库的额外开销。</p>
<p>您可以通过指定 <code>libraries</code> 参数并向其传递内容库的名称，指定要在引导程序请求内加载的其他内容库。可以逗号分隔列表形式指定多个内容库。加载后的内容库通过 <code>google.maps.libraryName</code> 命名空间进行访问。</p>
<ul>
<li>drawing 提供了一个图形界面，以供用户在地图上绘制多边形、矩形、多段线、圆和标记。<a href="https://developers.google.com/maps/documentation/javascript/drawinglayer" target="_blank" rel="external">文档</a>。</li>
<li>geometry 包括用于计算地球表面上标量几何值（如距离和面积）的应用函数。<a href="https://developers.google.com/maps/documentation/javascript/geometry" target="_blank" rel="external">文档</a>。</li>
<li>places 让您的应用能够在定义的区域内搜索场所、地理位置或著名景点等地点。<a href="https://developers.google.com/maps/documentation/javascript/places" target="_blank" rel="external">文档</a>。</li>
<li>visualization 提供数据的视觉表示，包括热图和 Google Maps Engine 数据。<a href="https://developers.google.com/maps/documentation/javascript/visualization" target="_blank" rel="external">文档</a>。</li>
</ul>
<a id="more"></a> 
<ol>
<li><p>几何库<br>在站点中加载 JavaScript API 时， 可通过指定 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">几何库不 包含任何类，但包含以下三个命名空间中的 方法：</div><div class="line"></div><div class="line">    - [球形][31] 包含球形几何实用程序，以便允许你计算 球面的角度、距离、偏航角和面积。 其中的一些示例有：`computeArea`，该方法接受多边形路径（以 lat/lng 对集合的形式）， 计算面积；或者为`computeDistanceBetween`， 该方法接受两个 lat/lng 点，计算地球上这两点之间的距离（考虑地球的曲率）。</div><div class="line"></div><div class="line">    - [多边形][32] 包含涉及多边形和折线的实用计算函数， 从而确定点是位于多边形内，还是 位于指定距离的折线上。</div><div class="line">     </div><div class="line">    - [编码][33] 包含根据 [编码多线段算法][34] 对多线段路径进行编码和解码的实用程序。</div><div class="line"></div><div class="line">2. 可视化</div><div class="line">在站点中加载 JavaScript API 时， 可通过指定`` &quot;libraries=visualizations&quot;`` 加载可视化库。该库中包含 `HeatmapLayer` 类， 使你能够在给定地理点可视化数据强度。 注释：</div><div class="line">    - 使用此类时，通常有一个要可视化的数据集 </div><div class="line">    - 可将数据存储在客户端，但如果数据集过大，可能会降低         站点的性能，也可将数据存储在服务器端，并进行动态访问， 但你会损失一些客户端数据操作选项</div><div class="line"></div><div class="line">3. 绘图库</div><div class="line">[DrawingManagerOptions object specification][35]</div><div class="line"></div><div class="line">    ```javascript</div><div class="line">    &lt;script async defer</div><div class="line">        src=</div><div class="line">        &quot;https://maps.googleapis.com/maps/api/js?libraries=geometry,drawing&amp;key=MYAPIKEY&amp;v=3&amp;callback=initMap&quot;&gt;</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;input type=&quot;button&quot; id=&quot;show-listings&quot; value=&quot;show listings&quot;&gt;</div><div class="line">  &lt;input type=&quot;button&quot; id=&quot;hide-listings&quot; value=&quot;hide listings&quot;&gt;</div><div class="line">  &lt;hr&gt;</div><div class="line">  &lt;span class=&quot;text&quot;&gt;Draw a shape to search within it for dorm!&lt;/span&gt;</div><div class="line">  &lt;!-- 打开和关闭绘图工具 --&gt;</div><div class="line">  &lt;input id=&quot;toggle-drawing&quot; type=&quot;button&quot; value=&quot;Drawing Tools&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//确保只有一个多边形被渲染</span></div><div class="line"><span class="keyword">var</span> polygon = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在初始化函数中创建新对象drawingManager</span></div><div class="line"><span class="keyword">var</span> drawingManager = <span class="keyword">new</span> google.maps.drawing.DrawingManager(&#123;</div><div class="line">  <span class="comment">//默认绘图模式</span></div><div class="line">  drawingMode: google.maps.drawing.OverlayType.POLYGON,</div><div class="line">  <span class="attr">drawingControl</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">drawingControlOptions</span>: &#123;</div><div class="line">    <span class="comment">//地图上控件的位置</span></div><div class="line">    position: google.maps.ControlPosition.TOP_LEFT,</div><div class="line">    <span class="comment">//指定多个绘图模式 此处为多边形绘图</span></div><div class="line">    <span class="comment">//其他绘图模式：'marker', 'polyline', 'rectangle', 'circle', or null.</span></div><div class="line">    drawingModes: [</div><div class="line">      google.maps.drawing.OverlayType.POLYGON</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加事件：单击按钮时隐藏或显示绘图工具</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'toggle-drawing'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  toggleDrawing(drawingManager);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleDrawing</span>(<span class="params">drawingManager</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (drawingManager.map) &#123;</div><div class="line">    drawingManager.setMap(<span class="literal">null</span>);</div><div class="line">    <span class="comment">//将覆盖区域删除，保留标记</span></div><div class="line">    <span class="keyword">if</span> (polygon !== <span class="literal">null</span>) &#123;</div><div class="line">      polygon.setMap(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">      drawingManager.setMap(map);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用用户所画的多边形和标记位置，并使用更多几何库功能检查多边形内是否有标记</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchWithinPolygon</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">    <span class="comment">//有标记则显示，没有在则隐藏</span></div><div class="line">    <span class="keyword">if</span> (google.maps.geometry.poly.containsLocation(markers[i].position, polygon)) &#123;</div><div class="line">      markers[i].setMap(map);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      markers[i].setMap(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询polygon的area</span></div><div class="line"><span class="keyword">var</span> area = google.maps.geometry.spherical.computeArea(polygon.getPath());</div><div class="line"><span class="built_in">window</span>.alert(area+<span class="string">'this is polygon area'</span>);</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flickr和Google地图的混搭]]></title>
      <url>/2017/12/03/Flickr%E5%92%8CGoogle%E5%9C%B0%E5%9B%BE%E7%9A%84%E6%B7%B7%E6%90%AD/</url>
      <content type="html"><![CDATA[<p>使用API创建一个混搭，它可以作为一个小部件内嵌在网站上。</p>
<ul>
<li>API（Application Programming Interface）：带有文档的接口，让第三方开发者使用产品的功能。</li>
<li>混搭（Mashup）：一种服务，结合两个或多个不同API提供的功能。</li>
<li>小部件（Widget）：一个可以内嵌在网站上的自包含小应用。</li>
</ul>
<h2 id="Flickr-API"><a href="#Flickr-API" class="headerlink" title="Flickr API"></a>Flickr API</h2><blockquote>
<p>Flickr 社群具有超過 50 億張相片 (其中許多包含具有價值的描述資訊，例如標籤、地理位置和 Exif 資料)，建立了非常豐富的資料。<br>Flickr API 是可讓你存取該資料的工具。 事實上，幾乎所有使 flickr.com 得以運作的功能都可透過 API 取得。 並且API 的使用完全免費，是專為我們的會員以及開發人員和其他整合者提供的服務，使他們可以創造出 flickr.com 所未能提供的更多其他相片互動方式。</p>
</blockquote>
<p><a href="https://www.flickr.com/services/api/" target="_blank" rel="external">Flickr API 文档</a><br><a href="https://developers.google.com/maps/documentation/?hl=zh-cn" target="_blank" rel="external">Google地图 API 文档</a></p>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a><a href="http://www.json.org/" target="_blank" rel="external"><strong>JSON</strong></a></h2><p>Douglas Crockford认识到大部分现代编程语言共享了相同的数据结构核心：数值、字符串、布尔型、数组及键值对容器（又叫做记录、结构、字典、哈希表、哈希或关系数组）。JSON标准重用javascript语法来定义一个微型语言以表示那些和语言无关的数据结构。</p>
<p>eval函数是将JSON字符串转成javascript对象的最快速的方式，但是它只能用在可以信任的JSON源上。如果JSON字符串来自不可信任的地方，可能包含恶意javascript代码。一个安全的替代直接调用的方式是使用parseJSON方法，其使用正则表示式检查JSON字符串是否安全，然后再传递给eval。</p>
<h2 id="同源限制"><a href="#同源限制" class="headerlink" title="同源限制"></a>同源限制</h2><p>传统Ajax调用(使用XMLHttpRequest对象)有一个重要的限制：它们只允许和提供源代码的域进行通信。<br>如果没有同源限制，当一个用户在公司内部网络中访问一个恶意网站时，公共因特网上的恶意网页可以使用XMLHttpRequest从私有wiki上偷取信息。如果浏览器不强制同源限制，很多私有网站可能会被偷数据。<br>对于依赖外部域的操作，JSON可以让我们绕过这个限制，方法包括<code>跨域JSON</code>和<code>JSON-P</code>（“JSON with padding”缩写）。<br>永远不要从一个不信任的网站加载JSON-P文档，这样做可能让你受到恶意的跨站脚本攻击。</p>
<p>为了提供跨域JSON，一个网站只需要在普通的JSON对象外面包裹一个命名函数的调用。通过定义自己的jsonfeed函数，并用HTML中的script标签引入。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>用户输入标签后显示包含该tag的20张图片<br>使用下面的URL获取被打标签的照片</p>
<pre><code>http://api.flickr.com/services/feeds/photos_public.gne?tags=[TAG]
</code></pre><p><a href="https://github.com/RenkoQ/googleMap_example/blob/master/Flickr_photos%26googlemap/Viewphotos_by_tag.html" target="_blank" rel="external">详细代码</a></p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>window是全局变量，所以给window设置属性相当于创建了一个全局变量。还可以通过省略变量声明中的var关键字来创建一个全局变量，不过这样难以区分。<br>在javascript中最好尽量避免使用全局变量。<br><a id="more"></a></p>
<h2 id="函数工厂"><a href="#函数工厂" class="headerlink" title="函数工厂"></a>函数工厂</h2><p>闭包允许创建一个函数捕捉一个或多个必须的变量。<br>函数工厂指一个创建并返回另外一个函数的函数。<br>利用该技巧可以创建需要的回调函数。回调函数接受一个参数ev，它是浏览器创建的事件对象。可以用它阻止浏览器的默认行为。</p>
<h2 id="demo详细代码"><a href="#demo详细代码" class="headerlink" title="demo详细代码"></a>demo<a href="https://github.com/RenkoQ/googleMap_example/blob/master/Flickr_photos%26googlemap/Flickr_photos%26map.html" target="_blank" rel="external">详细代码</a></h2>]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google 地图 JavaScript API（二）]]></title>
      <url>/2017/12/02/Google%20%E5%9C%B0%E5%9B%BE%20JavaScript%20API%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>根据udacity课程学习的笔记。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/?hl=zh_CN" target="_blank" rel="external">教程和文档</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/reference" target="_blank" rel="external">Google Maps JavaScript API V3 Reference</a></p>
<hr>
<h3 id="1-层"><a href="#1-层" class="headerlink" title="1. 层"></a>1. 层</h3><p>层是地图上的对象，包含一个或多个单独项，但可作为一个整体进行操作。层通常反映了您添加到地图上用于指定公共关联的对象集合。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/layers" target="_blank" rel="external">文档</a></p>
<p><code>数据层</code><br>    Google 地图数据层提供了一个可用于储存任意地理空间数据的容器。您可以使用数据层储存您的自定义数据，或在 Google 地图上显示 GeoJSON 数据。<br>    <a href="https://developers.google.com/maps/documentation/javascript/datalayer" target="_blank" rel="external">文档</a></p>
<p><code>Fusion Tables 图层/ 融合表层（试验性）</code><br>使用 FusionTablesLayer 对象将 Google Fusion Tables 中包含的数据呈现为地图上的图层。<br><a href="https://developers.google.com/maps/documentation/javascript/fusiontableslayer" target="_blank" rel="external">文档</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map;</div><div class="line">  <span class="comment">//加载地图</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initMap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Constructor creates a new map - only center and zoom are required.</span></div><div class="line">    map = <span class="keyword">new</span> google.maps.Map(<span class="built_in">document</span>.getElementById(<span class="string">'map'</span>), &#123;</div><div class="line">      <span class="comment">//中心 纬度 经度</span></div><div class="line">      center: &#123;<span class="attr">lat</span>: <span class="number">30.317655</span>, <span class="attr">lng</span>: <span class="number">120.343745</span>&#125;,</div><div class="line">      <span class="comment">//缩放值 越高越详细</span></div><div class="line">      zoom: <span class="number">13</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> markers = [];</div><div class="line"></div><div class="line">    <span class="comment">//创建一组位置信息</span></div><div class="line">    <span class="keyword">var</span> locations = [</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 1'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.310597</span>,<span class="attr">lng</span>:<span class="number">120.343251</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 2'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.313089</span>,<span class="attr">lng</span>:<span class="number">120.340934</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 3'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.313103</span>,<span class="attr">lng</span>:<span class="number">120.344903</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 4'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.310653</span>,<span class="attr">lng</span>:<span class="number">120.347006</span>&#125;&#125;,</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">//创建信息窗口</span></div><div class="line">    <span class="keyword">var</span> largeInfowindow = <span class="keyword">new</span> google.maps.InfoWindow();</div><div class="line">    <span class="comment">//创建经纬度边界</span></div><div class="line">    <span class="keyword">var</span> bounds = <span class="keyword">new</span> google.maps.LatLngBounds();</div><div class="line"></div><div class="line">    <span class="comment">//通过位置数组初始化创建标识数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> position = locations[i].location;</div><div class="line">      <span class="keyword">var</span> title = locations[i].title;</div><div class="line">      <span class="comment">//为每个位置创建标识</span></div><div class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</div><div class="line">        <span class="attr">map</span>: map,</div><div class="line">        <span class="attr">position</span>: position,</div><div class="line">        <span class="attr">title</span>: title,</div><div class="line"></div><div class="line">        <span class="attr">animation</span>: google.maps.Animation.DROP,</div><div class="line">        <span class="attr">id</span>: i</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//把marker放进markers数组里</span></div><div class="line">      markers.push(marker);</div><div class="line">      <span class="comment">//添加事件使得点击时打开信息窗口</span></div><div class="line">      marker.addListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        populateInfoWindow(<span class="keyword">this</span>, largeInfowindow);</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//传入各标识位置扩展边界</span></div><div class="line">      bounds.extend(markers[i].position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    map.fitBounds(bounds);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 点击标识时弹出信息窗口。</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">populateInfoWindow</span>(<span class="params">marker, infowindow</span>) </span>&#123;</div><div class="line">    <span class="comment">// 检查信息窗口还没有在这个标识打开</span></div><div class="line">    <span class="keyword">if</span> (infowindow.marker != marker) &#123;</div><div class="line">      infowindow.marker = marker;</div><div class="line">      infowindow.setContent(<span class="string">'&lt;div&gt;'</span> + marker.title + <span class="string">'&lt;/div&gt;'</span>);</div><div class="line">      infowindow.open(map, marker);</div><div class="line">      <span class="comment">// 确保信息窗口关闭时已清空marker属性值</span></div><div class="line">      infowindow.addListener(<span class="string">'closeclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        infowindow.setMarker = <span class="literal">null</span>;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="2-标识显隐"><a href="#2-标识显隐" class="headerlink" title="2. 标识显隐"></a>2. 标识显隐</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;input id=&quot;show-listings&quot; type=&quot;button&quot; value=&quot;Show Listings&quot;&gt;</div><div class="line">&lt;input id=&quot;hide-listings&quot; type=&quot;button&quot; value=&quot;Hide Listings&quot;&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    map = <span class="keyword">new</span> google.maps.Map(</div><div class="line">        <span class="comment">//省略同上</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> locations = [</div><div class="line">        <span class="comment">//省略同上</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> largeInfowindow = <span class="keyword">new</span> google.maps.InfoWindow();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> position = locations[i].location;</div><div class="line">      <span class="keyword">var</span> title = locations[i].title;</div><div class="line">       <span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</div><div class="line">        <span class="comment">//省略同上</span></div><div class="line">      &#125;);</div><div class="line">      markers.push(marker);</div><div class="line">      marker.addListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        populateInfoWindow(<span class="keyword">this</span>, largeInfowindow);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//不立即设置标识的地图参数和扩展地图界限，用showListings函数做</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'show-listings'</span>).addEventListener(<span class="string">'click'</span>, showListings);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'hide-listings'</span>).addEventListener(<span class="string">'click'</span>, hideListings);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">populateInfoWindow</span>(<span class="params">marker, infowindow</span>) </span>&#123;</div><div class="line">        <span class="comment">//省略同上</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// This function will loop through the markers array and display them all.</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showListings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bounds = <span class="keyword">new</span> google.maps.LatLngBounds();</div><div class="line">    <span class="comment">// Extend the boundaries of the map for each marker and display the marker</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">      <span class="comment">//将每个标识的地图设置为map</span></div><div class="line">      markers[i].setMap(map);</div><div class="line">      <span class="comment">//扩展地图界限来容纳标识</span></div><div class="line">      bounds.extend(markers[i].position);</div><div class="line">    &#125;</div><div class="line">    map.fitBounds(bounds);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// This function will loop through the listings and hide them all.</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hideListings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">      <span class="comment">//不删除标识，只隐藏</span></div><div class="line">      markers[i].setMap(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="3-设置地图样式"><a href="#3-设置地图样式" class="headerlink" title="3. 设置地图样式"></a>3. 设置地图样式</h3><p><a href="https://developers.google.com/maps/documentation/javascript/styling" target="_blank" rel="external">设置地图样式入门</a><br>可以利用样式化地图自定义 Google 基础地图的呈现方式，从而更改道路、公园和建成区等元素的视觉显示。</p>
<a id="more"></a> 
<p><a href="https://snazzymaps.com/" target="_blank" rel="external">时髦地图</a><br>可获取预先构建的地图样式示例。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/styling#creating_a_styledmaptype" target="_blank" rel="external">创建带样式的地图类型</a><br><a href="https://developers.google.com/maps/documentation/javascript/examples/maptype-styled-simple" target="_blank" rel="external">Styled Map Types</a><br>可以通过创建 <code>StyledMapType</code> 并向构造函数传递选择器和样式设置器信息，新增作为样式应用对象的地图类型。此方法不会影响默认地图类型的样式。</p>
<p>搜索<code>GOOGLE MAPS API STYLES</code>获得更多样式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> map;</div><div class="line">  <span class="keyword">var</span> markers = [];</div><div class="line"></div><div class="line">  <span class="comment">//加载地图</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">initMap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 改变地图样式</span></div><div class="line">    <span class="keyword">var</span> styles = [</div><div class="line">      &#123;</div><div class="line">        <span class="comment">//地图特征是可以在地图上作为目标的地理元素</span></div><div class="line">        featureType: <span class="string">'water'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#19a0d8'</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'administrative'</span>,</div><div class="line">        <span class="comment">//元素是想要对特征进行修改的对象(标签、图形等)</span></div><div class="line">        elementType: <span class="string">'labels.text.stroke'</span>,</div><div class="line">        <span class="comment">//应用于地图特征的颜色、可见属性</span></div><div class="line">        stylers: [</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#ffffff'</span> &#125;,</div><div class="line">          &#123; <span class="attr">weight</span>: <span class="number">6</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'administrative'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'labels.text.fill'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#e85113'</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="comment">//蓝色高速公路</span></div><div class="line">        featureType: <span class="string">'road.highway'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'geometry.stroke'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#efe9e4'</span> &#125;,</div><div class="line">          &#123; <span class="attr">lightness</span>: <span class="number">-40</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'transit.station'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">weight</span>: <span class="number">9</span> &#125;,</div><div class="line">          &#123; <span class="attr">hue</span>: <span class="string">'#e85113'</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'road.highway'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'labels.icon'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">visibility</span>: <span class="string">'off'</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'water'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'labels.text.stroke'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">lightness</span>: <span class="number">100</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'water'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'labels.text.fill'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">lightness</span>: <span class="number">-100</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'poi'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'geometry'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">visibility</span>: <span class="string">'on'</span> &#125;,</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#f0e4d3'</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;,&#123;</div><div class="line">        <span class="attr">featureType</span>: <span class="string">'road.highway'</span>,</div><div class="line">        <span class="attr">elementType</span>: <span class="string">'geometry.fill'</span>,</div><div class="line">        <span class="attr">stylers</span>: [</div><div class="line">          &#123; <span class="attr">color</span>: <span class="string">'#efe9e4'</span> &#125;,</div><div class="line">          &#123; <span class="attr">lightness</span>: <span class="number">-25</span> &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">// Constructor creates a new map - only center and zoom are required.</span></div><div class="line">    map = <span class="keyword">new</span> google.maps.Map(<span class="built_in">document</span>.getElementById(<span class="string">'map'</span>), &#123;</div><div class="line">      <span class="comment">//中心 纬度 经度</span></div><div class="line">      center: &#123;<span class="attr">lat</span>: <span class="number">30.317655</span>, <span class="attr">lng</span>: <span class="number">120.343745</span>&#125;,</div><div class="line">      <span class="comment">//缩放值 越高越详细</span></div><div class="line">      zoom: <span class="number">13</span>,</div><div class="line">      <span class="comment">//禁止用户将地图类型改为公路、地形、卫星等</span></div><div class="line">      mapTypeControl: <span class="literal">false</span>,</div><div class="line">      <span class="comment">//设置地图对象选项中的属性</span></div><div class="line">      styles: styles</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// //创建寝室标识</span></div><div class="line">    <span class="comment">// var dorm  =&#123;lat: 30.317655, lng: 120.343745&#125;;</span></div><div class="line">    <span class="comment">// var marker = new google.maps.Marker(&#123;</span></div><div class="line">    <span class="comment">//   //放置位置</span></div><div class="line">    <span class="comment">//   position: dorm,</span></div><div class="line">    <span class="comment">//   map: map,</span></div><div class="line">    <span class="comment">//   title: 'My Dorm'</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// //创建信息窗口</span></div><div class="line">    <span class="comment">// var infowindow = new google.maps.InfoWindow(&#123;</span></div><div class="line">    <span class="comment">//   content: 'this is a infowindow'</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">// //因为窗口不会自动打开，所以在事件监听器中调用方法</span></div><div class="line">    <span class="comment">// marker.addListener('click',function() &#123;</span></div><div class="line">    <span class="comment">//   //传入窗口打开的地图和固定它的标记(后者可换为位置属性)</span></div><div class="line">    <span class="comment">//   infowindow.open(map,marker);</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">    <span class="comment">//创建一组位置信息</span></div><div class="line">    <span class="keyword">var</span> locations = [</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 1'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.310597</span>,<span class="attr">lng</span>:<span class="number">120.343251</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 2'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.313089</span>,<span class="attr">lng</span>:<span class="number">120.340934</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 3'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.313103</span>,<span class="attr">lng</span>:<span class="number">120.344903</span>&#125;&#125;,</div><div class="line">      &#123;<span class="attr">title</span>:<span class="string">'building 4'</span>,<span class="attr">location</span>:&#123;<span class="attr">lat</span>:<span class="number">30.310653</span>,<span class="attr">lng</span>:<span class="number">120.347006</span>&#125;&#125;,</div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="comment">//创建两个标记图标</span></div><div class="line">    <span class="comment">//标记出现在地图上时的默认图标</span></div><div class="line">    <span class="keyword">var</span> defaultIcon = makeMarkerIcon(<span class="string">'0091ff'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//鼠标移到地图上时突出显示的图标</span></div><div class="line">    <span class="keyword">var</span> highlightedIcon = makeMarkerIcon(<span class="string">'FFFF24'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建信息窗口</span></div><div class="line">    <span class="keyword">var</span> largeInfowindow = <span class="keyword">new</span> google.maps.InfoWindow();</div><div class="line"></div><div class="line">    <span class="comment">//通过位置数组初始化创建标识数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> position = locations[i].location;</div><div class="line">      <span class="keyword">var</span> title = locations[i].title;</div><div class="line">      <span class="comment">//为每个位置创建标识</span></div><div class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</div><div class="line">        <span class="attr">map</span>: map,</div><div class="line">        <span class="attr">position</span>: position,</div><div class="line">        <span class="attr">title</span>: title,</div><div class="line">        <span class="comment">//将每个标记的图标设置为默认图标</span></div><div class="line">        icon: defaultIcon,</div><div class="line">        <span class="attr">animation</span>: google.maps.Animation.DROP,</div><div class="line">        <span class="attr">id</span>: i</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//把marker放进markers数组里</span></div><div class="line">      markers.push(marker);</div><div class="line">      <span class="comment">//添加事件使得点击时打开信息窗口</span></div><div class="line">      marker.addListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        populateInfoWindow(<span class="keyword">this</span>, largeInfowindow);</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">// //传入各标识位置扩展边界</span></div><div class="line">      <span class="comment">// bounds.extend(markers[i].position);</span></div><div class="line"></div><div class="line">      <span class="comment">//鼠标悬停时突出显示图标</span></div><div class="line">      marker.addListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setIcon(highlightedIcon);</div><div class="line">      &#125;);</div><div class="line">      <span class="comment">//鼠标移开时恢复默认图标</span></div><div class="line">      marker.addListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setIcon(defaultIcon);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//map.fitBounds(bounds);</span></div><div class="line"></div><div class="line">    <span class="comment">//不立即设置标识的地图参数和扩展地图界限，用showListings函数做</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'show-listings'</span>).addEventListener(<span class="string">'click'</span>, showListings);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'hide-listings'</span>).addEventListener(<span class="string">'click'</span>, hideListings);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 点击标识时弹出信息窗口。</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">populateInfoWindow</span>(<span class="params">marker, infowindow</span>) </span>&#123;</div><div class="line">    <span class="comment">// 检查信息窗口还没有在这个标识打开</span></div><div class="line">    <span class="keyword">if</span> (infowindow.marker != marker) &#123;</div><div class="line">      infowindow.marker = marker;</div><div class="line">      infowindow.setContent(<span class="string">'&lt;div&gt;'</span> + marker.title + <span class="string">'&lt;/div&gt;'</span>);</div><div class="line">      infowindow.open(map, marker);</div><div class="line">      <span class="comment">// 确保信息窗口关闭时已清空marker属性值</span></div><div class="line">      infowindow.addListener(<span class="string">'closeclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        infowindow.setMarker = <span class="literal">null</span>;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// This function will loop through the markers array and display them all.</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showListings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//创建经纬度边界</span></div><div class="line">    <span class="keyword">var</span> bounds = <span class="keyword">new</span> google.maps.LatLngBounds();</div><div class="line">    <span class="comment">// Extend the boundaries of the map for each marker and display the marker</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">      <span class="comment">//将每个标识的地图设置为map</span></div><div class="line">      markers[i].setMap(map);</div><div class="line">      <span class="comment">//扩展地图界限来容纳标识</span></div><div class="line">      bounds.extend(markers[i].position);</div><div class="line">    &#125;</div><div class="line">    map.fitBounds(bounds);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// This function will loop through the listings and hide them all.</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hideListings</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; markers.length; i++) &#123;</div><div class="line">      <span class="comment">//不删除标识，只隐藏</span></div><div class="line">      markers[i].setMap(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//创建标记图标对象函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeMarkerIcon</span>(<span class="params">markerColor</span>) </span>&#123;</div><div class="line">    <span class="comment">//获取标记颜色并创建markerimage(标记图像)使用该颜色，自定义其尺寸</span></div><div class="line">    <span class="keyword">var</span> markerImage = <span class="keyword">new</span> google.maps.MarkerImage(</div><div class="line">      <span class="string">'http://chart.googleapis.com/chart?chst=d_map_spin&amp;chld=1.15|0|'</span>+ markerColor +</div><div class="line">      <span class="string">'|40|_|%E2%80%A2'</span>,</div><div class="line">      <span class="keyword">new</span> google.maps.Size(<span class="number">21</span>, <span class="number">34</span>),</div><div class="line">      <span class="keyword">new</span> google.maps.Point(<span class="number">0</span>, <span class="number">0</span>),</div><div class="line">      <span class="keyword">new</span> google.maps.Point(<span class="number">10</span>, <span class="number">34</span>),</div><div class="line">      <span class="keyword">new</span> google.maps.Size(<span class="number">21</span>,<span class="number">34</span>)</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> markerImage;</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google 地图 JavaScript API（一）]]></title>
      <url>/2017/12/02/Google%20%E5%9C%B0%E5%9B%BE%20JavaScript%20API%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>根据udacity课程学习的笔记。</p>
<p><a href="https://developers.google.com/maps/documentation/javascript/?hl=zh_CN" target="_blank" rel="external">教程和文档</a></p>
<p><a href="https://developers.google.com/maps/documentation/javascript/reference" target="_blank" rel="external">Google Maps JavaScript API V3 Reference</a></p>
<h3 id="1-首先需要在控制台创建一个项目。"><a href="#1-首先需要在控制台创建一个项目。" class="headerlink" title="1. 首先需要在控制台创建一个项目。"></a>1. 首先需要在<a href="https://console.developers.google.com" target="_blank" rel="external">控制台</a>创建一个项目。</h3><h3 id="2-然后启用API。"><a href="#2-然后启用API。" class="headerlink" title="2. 然后启用API。"></a>2. 然后启用API。</h3><pre><code>[Google Maps JavaScript API](https://console.developers.google.com/apis/library/maps-backend.googleapis.com)



[Google Maps Roads API][4]
[Google Static Maps API][5]
[Google Street View Image API][6]
[Google Places API Web Service][7]
[Google Maps Geocoding API][8]
[Google Maps Geolocation API][9]
[Google Maps Directions API][10]
[Google Maps Distance Matrix API][11]
[Google Maps Elevation API][12]
[Google Maps Time Zone API][13]
</code></pre><h3 id="3-创建凭据"><a href="#3-创建凭据" class="headerlink" title="3. 创建凭据"></a>3. 创建凭据</h3><pre><code>创建 API 密钥，在您的应用中使用此密钥的方法是：使用 key=API_KEY 参数传递此密钥。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 用于异步加载API --&gt;</div><div class="line">&lt;script async defer</div><div class="line">    src=&quot;https://maps.googleapis.com/maps/api/js?key=填写api密钥&amp;v=3&amp;callback=initMap&quot;&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="4-创建地图"><a href="#4-创建地图" class="headerlink" title="4. 创建地图"></a>4. 创建地图</h3><p><code>a lat long literal</code>经纬度字面量</p>
<p><a href="https://google-developers.appspot.com/maps/documentation/utils/geocoder/" target="_blank" rel="external">获取特定位置的坐标</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map;</div><div class="line"><span class="comment">//加载地图</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMap</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Constructor creates a new map - only center and zoom are required.</span></div><div class="line">  map = <span class="keyword">new</span> google.maps.Map(<span class="built_in">document</span>.getElementById(<span class="string">'map'</span>), &#123;</div><div class="line">    <span class="comment">//中心 纬度 经度</span></div><div class="line">    center: &#123;<span class="attr">lat</span>: <span class="number">30.317655</span>, <span class="attr">lng</span>: <span class="number">120.343745</span>&#125;,</div><div class="line">    <span class="comment">//缩放值 越高越详细</span></div><div class="line">    zoom: <span class="number">13</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="5-标记Marker"><a href="#5-标记Marker" class="headerlink" title="5. 标记Marker"></a>5. 标记Marker</h3><p>标记用来标识地图上的位置。<br><a href="https://developers.google.com/maps/documentation/javascript/markers" target="_blank" rel="external">文档</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建寝室标识</span></div><div class="line"><span class="keyword">var</span> dorm  =&#123;<span class="attr">lat</span>: <span class="number">30.317655</span>, <span class="attr">lng</span>: <span class="number">120.343745</span>&#125;;</div><div class="line"><span class="keyword">var</span> marker = <span class="keyword">new</span> google.maps.Marker(&#123;</div><div class="line">  <span class="comment">//放置位置</span></div><div class="line">  position: dorm,</div><div class="line">  <span class="attr">map</span>: map,</div><div class="line">  <span class="attr">title</span>: <span class="string">'My Dorm'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="6-信息窗口InfoWindow"><a href="#6-信息窗口InfoWindow" class="headerlink" title="6. 信息窗口InfoWindow"></a>6. 信息窗口InfoWindow</h3><p>在地图上方给定位置的弹出窗口中显示内容（通常为文本或图像）。<br><a href="https://developers.google.com/maps/documentation/javascript/infowindows" target="_blank" rel="external">文档</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建信息窗口</span></div><div class="line"><span class="keyword">var</span> infowindow = <span class="keyword">new</span> google.maps.InfoWindow(&#123;</div><div class="line">  <span class="attr">content</span>: <span class="string">'this is a infowindow'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//因为窗口不会自动打开，所以在事件监听器中调用方法</span></div><div class="line">marker.addListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//传入窗口打开的地图和固定它的标记(后者可换为位置属性)</span></div><div class="line">  infowindow.open(map,marker);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> MAP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hyperledger Composer（一）]]></title>
      <url>/2017/11/19/Hyperledger%20Composer%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>所有参考资料贴在最后。</p>
<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq2afpkbgj20yg0kqtd6.jpg" alt="架构图"><br>Hyperledger Composer 是一个应用程序开发框架，它简化并加快了 Hyperledger Fabric 应用程序[^foot1]的创建。</p>
<p>它包含一组API、一种建模语言和一个编程模型，可以使用它们快速定义和部署业务网络和应用程序，使参与者能执行交易来交换资产。</p>
<p>Composer 编程模型以定义并部署业务网络定义为基础，它包含一个数据模型，该模型定义了业务网络中的资产、参与者和交易的名称与结构。该业务网络还指定了交易处理器函数（ES5 编写），在客户端提交交易时，这些函数会自动在一个 Hyperledger Fabric 上运行。<br>Composer 定义了 JavaScript API 来提交交易，并在资产注册表中创建、检索、更新和删除资产。</p>
<h3 id="2-前置环境"><a href="#2-前置环境" class="headerlink" title="2.前置环境"></a>2.前置环境</h3><ul>
<li>Operating Systems: Ubuntu Linux 14.04 / 16.04 LTS (both 64-bit), or<br>Mac OS 10.12</li>
<li>Docker Engine: Version 17.03 or higher</li>
<li>Docker-Compose: Version 1.8 or higher</li>
<li>Node: 8.9 or higher <strong><em>(note version 9 is not supported)</em></strong></li>
<li>npm: v5.x</li>
<li>git: 2.9.x or higher</li>
<li>Python: 2.7.x</li>
<li>A code editor of your choice, we recommend VSCode.</li>
</ul>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09wyl3ej20a8026q2w.jpg" alt="node"></p>
<p><strong>LINUX环境下注意点</strong></p>
<ol>
<li>Login as a normal user, rather than root.</li>
<li>Do not su to root.</li>
<li>When installing prerequisites, use curl, then unzip using sudo.</li>
<li>Run prereqs-ubuntu.sh as a normal user. It may prompt for root<br>password as some of it’s actions are required to be run as root.</li>
<li>Do not use npm with sudo or su to root to use it.</li>
<li>Avoid installing node globally as root.</li>
</ol>
<p>总之尽力避免在root模式下操作。</p>
<p><strong>ubuntu直接用官方bash文件完成上述依赖项的安装：</strong></p>
<p>下载脚本文件</p>
<pre><code>curl -O https://hyperledger.github.io/composer/prereqs-ubuntu.sh
</code></pre><p>修改权限</p>
<pre><code>chmod u+x prereqs-ubuntu.sh
</code></pre><p>运行脚本文件</p>
<pre><code>./prereqs-ubuntu.sh
</code></pre><a id="more"></a>
<h3 id="3-安装Hyperledger-Composer开发工具"><a href="#3-安装Hyperledger-Composer开发工具" class="headerlink" title="3. 安装Hyperledger Composer开发工具"></a>3. 安装Hyperledger Composer开发工具</h3><p>安装composer命令行包</p>
<pre><code>npm install -g composer-cli
</code></pre><p>安装REST服务器生成包</p>
<pre><code>npm install -g composer-rest-server
</code></pre><p>使用yeoman及composer应用框架生产包搭建应用：</p>
<pre><code>npm install -g yo
npm install -g composer-rest-server
</code></pre><p>Yeoman是应用生成工具。<br><code>generator-hyperledger-composer</code> 是Yeoman plugin。用来为业务网络创建可定制的应用。 </p>
<h3 id="4-通过本地Playground链接business-network"><a href="#4-通过本地Playground链接business-network" class="headerlink" title="4.通过本地Playground链接business network"></a>4.通过本地Playground链接business network</h3><pre><code>npm install -g composer-playground

composer-playground
</code></pre><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09wevl2j212i0nx117.jpg" alt="local playground"></p>
<h3 id="5-安装Hyperledger-Fabric-v1-0"><a href="#5-安装Hyperledger-Fabric-v1-0" class="headerlink" title="5. 安装Hyperledger Fabric v1.0"></a>5. 安装Hyperledger Fabric v1.0</h3><pre><code>mkdir ~/fabric-tools &amp;&amp; cd ~/fabric-tools

curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.zip

unzip fabric-dev-servers.zip
</code></pre><p>或者下载tar.gz file</p>
<pre><code>mkdir ~/fabric-tools &amp;&amp; cd ~/fabric-tools

curl -O https://raw.githubusercontent.com/hyperledger/composer-tools/master/packages/fabric-dev-servers/fabric-dev-servers.tar.gz

tar xvzf fabric-dev-servers.tar.gz
</code></pre><h3 id="6-Hyperledger-Composer使用"><a href="#6-Hyperledger-Composer使用" class="headerlink" title="6. Hyperledger Composer使用"></a>6. Hyperledger Composer使用</h3><p>启动Fabric（v1.0.0 ，包含一个orderer, 一个ca，两个peer）+</p>
<pre><code>cd ~/fabric-tools
</code></pre><p>pull镜像到本地</p>
<pre><code>./downloadFabric.sh
</code></pre><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09xa5g8j20ey07qq3u.jpg" alt="downloadFabric.sh"></p>
<p>生成Fabric与Composer的连接文件</p>
<pre><code>./startFabric.sh
</code></pre><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09xxtbcj20kb0bcgn5.jpg" alt="startFabric.sh1"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09yks1hj20kc0b80up.jpg" alt="startFabric.sh2"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09z60woj20ka07omyu.jpg" alt="startFabric.sh3"></p>
<p>为正在运行的Hyperledger Fabric的主节点创建一个business network card。</p>
<pre><code>./createPeerAdminCard.sh
</code></pre><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09zsvd4j20ki08j0tp.jpg" alt="createPeerAdminCard.sh1"></p>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq0a0ecsbj20ka09qt9f.jpg" alt="createPeerAdminCard.sh2"></p>
<p>停止与拆卸</p>
<pre><code>cd ~/fabric-tools
./stopFabric.sh
./teardownFabric.sh
</code></pre><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq0a11d35j20kb0apta7.jpg" alt="stopFabric.sh"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq0a1oa40j20kd0g5jtn.jpg" alt="teardownFabric.sh"></p>
<h3 id="5-Script-解析"><a href="#5-Script-解析" class="headerlink" title="5. Script 解析"></a>5. Script 解析</h3><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq0a29xysj20kj07ajrr.jpg" alt="script"></p>
<p>[^foot1]:Hyperledger Fabric 应用程序是一个记录交易历史的共享的、不可变的账本；它将促进新一代的交易应用。</p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hyperledger Composer Playground]]></title>
      <url>/2017/11/18/Hyperledger%20Composer%20Playground/</url>
      <content type="html"><![CDATA[<p>所有参考资料贴在最后。</p>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>在线试验场<br><a href="http://composer-playground.mybluemix.net/" target="_blank" rel="external">Composer Playground</a></p>
<p><a href="https://hyperledger.github.io/composer/tutorials/playground-tutorial.html" target="_blank" rel="external">文档</a></p>
<h3 id="2-创建新business-network"><a href="#2-创建新business-network" class="headerlink" title="2. 创建新business network"></a>2. 创建新business network</h3><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09iqcjaj20qi0lkq3v.jpg" alt="Deploy a new business network1 "></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq0g4uphej21di0kiju1.jpg" alt="Deploy a new business network2"></p>
<h3 id="3-链接business-network"><a href="#3-链接business-network" class="headerlink" title="3. 链接business network"></a>3. 链接business network</h3><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09j4x1mj20b80cijre.jpg" alt="connect"></p>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq09jym5wj21fa0nrmys.jpg" alt="ALC FILE"></p>
<ul>
<li>About文件 – Markdown格式的说明文件，试验场默认将显示该文件的内容。</li>
<li>Access Control List – 决定了哪些参与者可以看到哪些资产。</li>
<li>Add按钮 – 必要时可向项目中添加额外的文件。</li>
<li>Deploy按钮 – 可将对项目文件的改动应用给当前已连接的区块链实例或模拟器。</li>
<li>Import功能可将试验场的内容替换为指定的其他内容。</li>
<li>Export功能可将整个解决方案打包为一个文件，并转移到其他环境中使用。</li>
</ul>
<p>界面右侧的主区域显示了所选文件的编辑器或查看器。此外页面顶部的Define/Test选项卡可供我们在开发或测试模式之间切换。最后，页面右上角可供我们（在本地版本中）模拟另一个区块链用户的身份，连接至自己的线上区块链实例，或开始在Web浏览器中模拟。在线版试验场目前仅支持模拟器模式。<a href="http://www.infoq.com/cn/articles/blockchain-poc-hyperledger" target="_blank" rel="external">^foot1</a></p>
<a id="more"></a>
<h3 id="4-添加一个model-file"><a href="#4-添加一个model-file" class="headerlink" title="4. 添加一个model file"></a>4. 添加一个model file</h3><blockquote>
<p>Model files define the assets, participants, transactions, and events in our business network.</p>
</blockquote>
<ul>
<li>Model文件 – 定义了项目中涉及的资产、参与者，以及事务。</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09kexjjj20oh0ntdgw.jpg" alt="Add a file"></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09kujyij20k808r749.jpg" alt="code in the model file 1"></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09l6xeej20mz0m5wf8.jpg" alt="code in the model file 2"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*This domain model defines a single asset type Commodity and single participant type Trader and a single transaction type Trade that is used to modify the owner of a commodity.*/</div><div class="line">namespace org.acme.mynetwork</div><div class="line">asset Commodity identified by tradingSymbol &#123;</div><div class="line">    o String tradingSymbol</div><div class="line">    o String description</div><div class="line">    o String mainExchange</div><div class="line">    o Double quantity</div><div class="line">    --&gt; Trader owner</div><div class="line">&#125;</div><div class="line">participant Trader identified by tradeId &#123;</div><div class="line">    o String tradeId</div><div class="line">    o String firstName</div><div class="line">    o String lastName</div><div class="line">&#125;</div><div class="line">transaction Trade &#123;</div><div class="line">    --&gt; Commodity commodity</div><div class="line">    --&gt; Trader newOwner</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-添加transaction-processor-script-file"><a href="#5-添加transaction-processor-script-file" class="headerlink" title="5. 添加transaction processor script file"></a>5. 添加transaction processor script file</h3><blockquote>
<p>define the transaction logic for the business network. </p>
</blockquote>
<ul>
<li>Script文件 – 以JavaScript实现的事务逻辑。</li>
</ul>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09ljf0wj20nz0nngmn.jpg" alt="add script file"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Track the trade of a commodity from one trader to another</div><div class="line"> * @param &#123;org.acme.mynetwork.Trade&#125; trade - the trade to be processed</div><div class="line"> * @transaction</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tradeCommodity</span>(<span class="params">trade</span>) </span>&#123;</div><div class="line">    trade.commodity.owner = trade.newOwner;</div><div class="line">    <span class="keyword">return</span> getAssetRegistry(<span class="string">'org.acme.mynetwork.Commodity'</span>)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">assetRegistry</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> assetRegistry.update(trade.commodity);</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This function simply changes the owner property on a commodity based on the newOwner property on an incoming Trade transaction. It then persists the modified Commodity back into the asset registry, used to store Commodity instances.</p>
<h3 id="6-Access-control"><a href="#6-Access-control" class="headerlink" title="6. Access control"></a>6. Access control</h3><blockquote>
<p>define the access control rules for business networks.</p>
</blockquote>
<h3 id="7-发布已更新的business-network"><a href="#7-发布已更新的business-network" class="headerlink" title="7. 发布已更新的business network"></a>7. 发布已更新的business network</h3><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09m16onj20ag0hajrl.jpg" alt="update1"> </p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09mm2ogj209903x746.jpg" alt="update2"> </p>
<h3 id="8-测试business-network定义"><a href="#8-测试business-network定义" class="headerlink" title="8. 测试business network定义"></a>8. 测试business network定义</h3><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09n0r3bj21ey0nqjsm.jpg" alt="test"></p>
<h3 id="9-创建participants"><a href="#9-创建participants" class="headerlink" title="9. 创建participants"></a>9. 创建participants</h3><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq09nm921j20o90n674w.jpg" alt="a Trader participant1"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09o8zc2j20nw0mpgm8.jpg" alt="a Trader participant2"></p>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq09osofjj20ha05zgli.jpg" alt="a Trader participant3"></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09q6lo3j214l0e1t93.jpg" alt="Trader view"></p>
<h3 id="10-创建asset"><a href="#10-创建asset" class="headerlink" title="10. 创建asset"></a>10. 创建asset</h3><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1flq09qq9fzj21fd0jrwfk.jpg" alt="Create New Asset"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09rd0uyj20nu0nogmc.jpg" alt="asset code1"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09rxa3wj20lr07r3yk.jpg" alt="asset code2"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09slfclj214r0czjrr.jpg" alt="Commodity tab"></p>
<h3 id="11-在participants间交易commodity"><a href="#11-在participants间交易commodity" class="headerlink" title="11. 在participants间交易commodity"></a>11. 在participants间交易commodity</h3><p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09t8oyjj21f00nxabo.jpg" alt="trade1"></p>
<p><img src="http://wx2.sinaimg.cn/large/789d050dgy1flq09twbruj20o20nrwf3.jpg" alt="trade2"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;$class&quot;: &quot;org.acme.mynetwork.Trade&quot;,</div><div class="line">  &quot;commodity&quot;: &quot;resource:org.acme.mynetwork.Commodity#ABC&quot;,</div><div class="line">  &quot;newOwner&quot;: &quot;resource:org.acme.mynetwork.Trader#TRADER2&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1flq09ufdouj208w064jrd.jpg" alt="submit"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09v3u5rj214m0bhwex.jpg" alt="result"></p>
<p><img src="http://wx1.sinaimg.cn/large/789d050dgy1flq09vqfszj21f90nkabp.jpg" alt="history record"></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机组成原理笔记（三）——指令系统]]></title>
      <url>/2017/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>整理自<a href="http://jpkc.hdu.edu.cn/computer/zcyl/kcxx.asp?id=2" target="_blank" rel="noopener">学院网站</a></p>
<h3 id="1-指令的基本格式"><a href="#1-指令的基本格式" class="headerlink" title="1. 指令的基本格式"></a>1. 指令的基本格式</h3><p>一条指令就是机器语言的一个语句，它是一组有意义的二进制代码。</p>
<p>其中操作码指明了指令的操作性质及功能，地址码则给出了操作数的地址。</p>
<p>地址码中的地址可以是主存的地址，也可以是寄存器的地址（编号），甚至可以是I/O设备的地址。</p>
<p>对于双操作数运算指令来说，需要操作数的地址、结果的地址以及下一条指令的地址，这些地址可以在指令中明显给出，称为显地址；<br>也可以依照某种事先的约定，用隐含的地址给出，称为隐地址。</p>
<p>根据显地址的个数有：三地址和二地址指令（通用寄存器指令）、一地址指令（累加型计算机）和零地址指令（堆栈型计算机）。</p>
<h3 id="2-定长操作码指令格式"><a href="#2-定长操作码指令格式" class="headerlink" title="2.定长操作码指令格式"></a>2.定长操作码指令格式</h3><p>定长操作码以称为规整型编码，这是一种最简单的编码方法，操作码字段的位数和位置是固定的。</p>
<p>为了能表示整个系统中的全部指令，指令的操作码字段应当有足够的位数。</p>
<p>定长编对于简化硬件设计，减少指令的译码时间是非常有利的。</p>
<a id="more"></a>
<h3 id="3-扩展操作码指令格式"><a href="#3-扩展操作码指令格式" class="headerlink" title="3.扩展操作码指令格式"></a>3.扩展操作码指令格式</h3><p>扩展操作码以称为非规整编码，操作码字段的位数不固定，且分散地放在指令字的不同位置上。</p>
<p>这种方式能够有效地压缩指令中操作码字段的平均长度，显然，操作码字段的位数和位置不固定将增加指令译码和分析的难度，使控制器的设计复杂化。</p>
<p>典型的扩展操作码编码让操作数地址个数多的指令（三地址指令）的操作码字段短些，操作数地址个数少的指令（一或零地址指令）的操作码字段长些，这样既能充分地利用指令的各个字段，又能在不增加指令长度的情况下扩展操作码的位数，使它能表示更多的指令。</p>
<h3 id="4-指令的寻址方式"><a href="#4-指令的寻址方式" class="headerlink" title="4.指令的寻址方式"></a>4.指令的寻址方式</h3><p><strong>（1）立即寻址</strong></p>
<p>立即寻址是一种特殊的寻址方式，指令中在操作码字段后面的部分不是通常意义上的操作数地址，而是操作数本身。</p>
<p><strong>（2）寄存器寻址</strong></p>
<p>寄存器寻址指令的地址码部分给出某一个通用寄存器的编号Ri，这个指定的寄存器中存放着操作数。<br>有效地址EA=Ri。<br>这种方式可以缩短指令长度，提高指令的执行速度。</p>
<p><strong>（3）直接寻址</strong></p>
<p>指令中地址码字段给出的地址A就是操作数的有效地址，即形式地址等于有效地址：EA=A。</p>
<p>由于这样给出的操作数地址是不能修改的，与程序本所在的位置无关，所以又叫绝对寻址方式。</p>
<p><strong>（4）间接寻址</strong></p>
<p>间接寻址意味着指令中给定的地址A不是操作数的地址，而是存放操作数地址的主存单元的地址，简称为操作数地址的地址，即EA=（A）。</p>
<p>间接寻址的指令在执行阶段要多次访存，可扩大寻址范围，便于编制程序。</p>
<p><strong>（5）寄存器间接寻址</strong></p>
<p>寄存器间接寻址指令中的地址码给出某一通用寄存器的编号，在被指定的寄存器中存放操作数的有效地址，EA=（Ri），而操作数则存放在主存单元中。</p>
<p>这种寻址方式的指令较短，并且在取指后只需一次访存便可得到操作数，因此指令执行的速度较间接寻址方式快。</p>
<p><strong>（6）变址寻址</strong></p>
<p>变址寻址就是把变址寄存器Rx的内容与指令中给出的形式地址A相加，形成操作数有效地址，即EA=（Rx）+A。</p>
<p>Rx的内容称为变址值。</p>
<p><strong>（7）基址寻址</strong></p>
<p>基址寻址是将基址寄存器Rb的内容与指令中给出的位移量D相加，形成操作数有效地址，即EA=（Rb）+D。</p>
<p>Rb的内容称为基址值。</p>
<p><strong>（8）相对寻址</strong></p>
<p>相对寻址是基址寻址的一种变通，由程序计数器（PC）提供基准地址，指令中的地址码字段作为位移量D，两者相加后得到操作数的有效地址，即EA=（PC）+D。</p>
<p>位移量指出的是操作数和现行指令之间的相对位置。</p>
<p><strong>（9）页面寻址</strong></p>
<p>存储器的有效地址就被分为两部分：前部分为页面地址，后部为页内地址。</p>
<p>页内地址是由指令的地址码自动直接提供，它与页面地址通过简单的拼装连接就可得到有效地址，无须进行计算，因此寻址迅速。</p>
<p>根据页面地址的来源不同，页面寻址以可分为三种不同的方式。</p>
<p>①基页寻址，又称为零页寻址。由于页面的地址全等于0，所以有效地址EA=0//A。基页寻址实际就是直接寻址。</p>
<p>②当前页寻址。页面地址就等于程序计数器（PC）的高位部分的内容，所以有效地址EA=（PC）H//A，操作数S与指令本身处于同一页面中。</p>
<p>③页寄存器地址。页面地址取自页寄存器，与形式地址相拼接形成有效地址。</p>
<p><strong>（10）堆栈寻址</strong></p>
<p>堆栈是一种按特定顺序进行存取的存储区，这种特定的顺序可归结为“后进先出（LIFO）”或“先进后出（FILO）”。<br>寄存器堆栈由 一组专门的寄存器构成，又称为硬堆栈。这种堆栈的栈顶是固定的，寄存器组中各寄存器是互相连接的，它们之间具有对应位自动推移的功能，即可将一个寄存器的内容推移到相邻的另一个寄存器中去。<br>利用主存的一段区域构成的堆栈称为软堆栈，软堆栈的大小可变，栈底固定，栈顶浮动，故需要一个专门的硬件寄存器作为堆栈的栈顶，简称堆栈指针（SP）。<br>若软堆栈的栈底地址大于栈顶地址，且栈指针始终指向栈顶的满单元，则</p>
<p>进栈时的操作：<br>（SP）-1→SP        修改栈指针<br>（A）→（A）       将A中的内容压入栈顶单元</p>
<p>出栈时操作：<br>（（SP））→A        将栈顶单元的内容弹出送入A中<br>（SP）+1→SP       修改栈指针</p>
<h3 id="5-CISC和RISC"><a href="#5-CISC和RISC" class="headerlink" title="5.CISC和RISC"></a>5.CISC和RISC</h3><p>基于复杂指令系统设计的计算机称为复杂指令系统计算机（CISC），基于精简指令系统设计的计算机称为精简指令系统计算机（RISC）。</p>
<p>RISC的中心思想是要求指令系统简化，尽量寄存器-寄存器操作指令，除去访存指令（Load和Store）外，其他指令的操作均在单周期内完成，指令格式力求一致，寻址方式尽可能减少，并提高编译的效率，最终达到加快机器处理速度的目的。</p>
<table>
<thead>
<tr>
<th>-</th>
<th style="text-align:right">CISC</th>
<th style="text-align:center">RISC</th>
</tr>
</thead>
<tbody>
<tr>
<td>指令数目</td>
<td style="text-align:right">一般大于200条</td>
<td style="text-align:center">一般小于100条</td>
</tr>
<tr>
<td>指令系统</td>
<td style="text-align:right">复杂，庞大</td>
<td style="text-align:center">简单，精简</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
<tr>
<td>指令字长</td>
<td style="text-align:right">不固定</td>
<td style="text-align:center">等长</td>
</tr>
<tr>
<td>寻址方式</td>
<td style="text-align:right">一般大于4</td>
<td style="text-align:center">一般小于4</td>
</tr>
<tr>
<td>可访存指令</td>
<td style="text-align:right">不加限制</td>
<td style="text-align:center">只有LOAD/STORE指令</td>
</tr>
<tr>
<td>各种指令执行时间</td>
<td style="text-align:right">相差较大</td>
<td style="text-align:center">绝大多数在一个周期内完成</td>
</tr>
<tr>
<td>通用寄存器数量</td>
<td style="text-align:right">较少</td>
<td style="text-align:center">多</td>
</tr>
<tr>
<td>控制方式</td>
<td style="text-align:right">绝大多数为微程序控制</td>
<td style="text-align:center">绝大多数为硬布线控制</td>
</tr>
</tbody>
</table>
<h3 id="6-题"><a href="#6-题" class="headerlink" title="6.题"></a>6.题</h3><pre><code>【例4.1】在关于一地址运算类指令的叙述中，正确的是（ B ）。
</code></pre><p>A.仅有一个操作数，其地址由指令的地址码提供<br>B.可能有一个操作数，也可能有两个操作数<br>C.一定有两个操作数，另一个是隐含的<br>D.指令的地址码字段存放的一定是操作码</p>
<p>试题分析：一地址运算类指令包括单操作指令（如加1、减1指令）和双操作数指令（如加、减指令）两类。对于单操作数指令只需要一个操作数，对于双操作数指令需要有两个操作数，其中一个操作数的地址是显地址，另一个操作数的地址隐含在累加寄存器中。</p>
<pre><code>【例4.3】一个计算机系统采用32位单字长指令，地址码为12位，如果定义了250条二地址指令，那么单地址指令的条数有（ D ）。
</code></pre><p>A. 4K<br>B. 8K<br>C.16K<br>D.24K</p>
<p>试题分析：二地址指令的操作码字段8位，现定义了250条二地址指令，采用扩展操作码技术，留下6个扩展口，每个扩展窗口可以扩展212=4K 条一地址指令，故共可扩展6×4K=24K条一地址指令。</p>
<pre><code>【例4.4】指令操作所需的数据不会来自（D  ）。
</code></pre><p>A.寄存器<br>B.指令本身<br>C.主存<br>D.控制存储器</p>
<p>试题分析：指令操作所需的数据可能来自于指令本身（立即寻址），可能来自于寄存器（寄存器寻址）或主存单元（多种寻址方式），但不会来自控制存储器。</p>
<pre><code>【例4.6】在寄存器间接寻址方式中，操作数存放在（  D）。
</code></pre><p>A.寄存器          B.堆栈栈顶    C.累加器    D.主存单元</p>
<p>试题分析：在寄存器间接寻址中，指定寄存器里存放着有效地址，而操作数在主存中。</p>
<pre><code>【例4.7】变址寻址和基址寻址的有效地址形成方式类似，但（ D ）。
</code></pre><p>A.变址寄存器的内容在程序执行过程中是不可能变的<br>B.基址寄存器的内容在程序执行过程中是不可能变的<br>C.在程序执行过程中，变址寄存器的内容不能改变而基址寄存器的内容可变<br>D.在程序执行过程中，基址寄存器的内容不能改变而变址寄存器的内容可变</p>
<p>试题分析：通常，变址寻址中变址寄存器提供修改量（可变的），而指令中提供基准值（固定的）；基址寻址中基址寄存器提供基准值（固定的），而指令中提供位移量（可变的）。</p>
<pre><code>【例4.8】为实现程序浮动提供了较好支持的建起方式是（B  ）。
</code></pre><p>A.变址寻址<br>B.相对寻址<br>C.间接寻址<br>D.寄存器间接寻址</p>
<p>试题分析：相对寻址的操作数地址随着PC值的变化而变化，并且与指令地址之间总是相差一个固定值。所以以相对寻址方式编写的程序可在主存中任意浮动。</p>
<pre><code>【例4.11】设变址寄存器为X，形式地址为D，某机具有先间址后变址的寻址方式，则这种寻址方式的有效地址为（ B ）。
</code></pre><p>A. EA=(X)+D<br>B. EA=(X)+(D)<br>C. EA=((X)+D)<br>D. EA=X+D</p>
<p>试题分析：A选项是变址寻址，C选项为先变址后间址，D选项的表达式不对。</p>
<pre><code>【例4.13】零地址的运算类指令在指令格式中不给出操作数地址，参加运算的两个操作数来自（ C ）。
</code></pre><p>A.累加器和寄存器<br>B.累加器和暂存器<br>C.堆栈的栈顶和次栈顶单元<br>D.暂存器和堆栈的栈顶单元</p>
<p>试题分析：零地址运算类指令的两个操作数均来自于堆栈，分别在栈顶和次栈顶单元。</p>
<pre><code>【例4.18】某机字长32位，指令单字长，指令系统中具有二地址指令、一地址指令和零地址指令若干条，已知每个地址长12位，采用扩展操作码方式，问该指令系统中的二地址指令、一地址指令、零地址指令各最多能有多少条？
</code></pre><p>解答：28－1，（28－1）×212－1，232－224－212</p>
<p>试题分析：设指令字长固定，为32位，每个地址字段为12位，因此，零地址指令的操作码占32位，一地址指令的操作码占20位，二地址指令的操作码占8位。<br>对于二地址指令，至少需要留出一个扩展口给一地址指令，显然最多可以有28—1条二地址指令。对于一地址指令，最多的情况是指令系统中只有一条二地址指令，并要为零地址指令留下一个扩展口，显然最多可以有（28－1）×212－1条一地址指令。对于零地址指令，最多的情况是指令系统中只有一条二地址指令和一条一地址指令，其余均为零地址指令。零地址指令的操作码为32位，共有232种编码，其中224种编码用作表示某条二地址指令，212种编码用作表示某条一地址指令，因此零地址指令最多可以有232－224－212条。</p>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lorem ipsum 乱数假文]]></title>
      <url>/2017/11/12/Lorem%20ipsum%20%E4%B9%B1%E6%95%B0%E5%81%87%E6%96%87/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Lorem ipsum是指一篇常用于排版设计领域的拉丁文文章，主要的目的为测试文章或文字在不同字型、版型下看起来的效果。中文的类似用法则称为乱数假文、随机假文。</p>
</blockquote>
<p><a href="https://zh.wikipedia.org/wiki/Lorem_ipsum" target="_blank" rel="external">起源</a></p>
<h3 id="1-Chinese-“Lorem-Ipsum”-Text-Generator"><a href="#1-Chinese-“Lorem-Ipsum”-Text-Generator" class="headerlink" title="1. Chinese “Lorem Ipsum” Text Generator"></a>1. <a href="http://technology.chtsai.org/pseudotext/" target="_blank" rel="external">Chinese “Lorem Ipsum” Text Generator</a></h3><p>每次产生5段，每段6-8句子组成的假文。</p>
<h3 id="2-Blind-Text-Generator"><a href="#2-Blind-Text-Generator" class="headerlink" title="2. Blind Text Generator"></a>2. <a href="http://www.blindtextgenerator.com/lorem-ipsum" target="_blank" rel="external">Blind Text Generator</a></h3><p>能产生10种风格文字并调整字距大小数量位置，生成css代码</p>
<h3 id="3-Lipsum"><a href="#3-Lipsum" class="headerlink" title="3. Lipsum"></a>3. <a href="https://www.lipsum.com/" target="_blank" rel="external">Lipsum</a></h3><p>能调整段落和单词数，生成多种国家语言。</p>
<h3 id="4-Lorem-Ipsum-Generator"><a href="#4-Lorem-Ipsum-Generator" class="headerlink" title="4. Lorem Ipsum Generator"></a>4. <a href="http://generator.lorem-ipsum.info/" target="_blank" rel="external">Lorem Ipsum Generator</a></h3><p>能生成摩斯密码假文，能复制和下载html代码。</p>
<h3 id="5-HTML-Ipsum"><a href="#5-HTML-Ipsum" class="headerlink" title="5. HTML-Ipsum"></a>5. <a href="https://www.webpagefx.com/web-design/html-ipsum/" target="_blank" rel="external">HTML-Ipsum</a></h3><p>产生随机html元素</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机组成原理笔记（二）——存储器]]></title>
      <url>/2017/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%AD%98%E5%82%A8%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>整理自<a href="http://jpkc.hdu.edu.cn/computer/zcyl/kcxx.asp?id=2" target="_blank" rel="noopener">学院网站</a></p>
<h3 id="1-存储器的分类"><a href="#1-存储器的分类" class="headerlink" title="1. 存储器的分类"></a>1. 存储器的分类</h3><ol>
<li><p><strong>按存储器在计算机系统中的作用分类</strong><br>① <strong>高速缓冲存储器（Cache）</strong>：位于主存和CPU之间，用来存放正在执行的程序段和数据，以便CPU能高速地使用它们。<br>② <strong>主存储器</strong>：用来存放计算机运行期间所需要的程序和数据，CPU可直接随机地进行读/写访问。<br>③ <strong>辅助存储器</strong>：用来存放当前暂不参与运行的程序和数据，以及一些需要永久性保存的信息。CPU不能直接访问辅存，辅存中的信息必须调入主存后，CPU才能使用。</p>
</li>
<li><p><strong>按存取方式分类</strong><br>① 随机存取存储器（<strong>RAM</strong>）：CPU可以对存储器中的内容进行随机存取，存取时间相同，与其所处的物理位置无关。<br>② 只读存储器（<strong>ROM</strong>）：ROM可以看做RAM的一种特殊形式，存储器的内容只能随机读出而不能写入。<br>③ 顺序存取存储器（<strong>SAM</strong>）：SAM的内容只能按某种顺序存取，存取时间的长短与信息在存储体上的物理位置有关。磁带机就是这样一类存储器。<br>④ 直接存取存储器（<strong>DAM</strong>）：介于RAM和SAM再者之间。第1步直接指向整个存储器中的某个小区域（如磁盘上的磁道）；第2步在小区域内顺序检索或等待，直至找到目的地后再进行读/写操作。磁盘机就属于这类存储器。</p>
</li>
<li><p><strong>按存储介质分类</strong><br>① 磁芯存储器：信息可以长期存储，不会因数断电而丢失；但磁芯存储器的读出是破坏性读出。<br>② 半导体存储器：主要是MOS型存储器和双极型（TTL电路或ECL电路）存储器两大类。半导体RAM存储的信息会因为断电而丢失。<br>③ 磁表面存储器：用磁层存储信息，常见的有磁盘、磁带等。由于它的容量大、价格低、存取速度慢，帮多用做辅助存储器。<br>④ 光存储器：采用激光技术控制访问的存储器，一般分为只读式、一次写入式、可改写式几种，它们的存储容量都很大，是目前使用非常广泛的辅助存储器。</p>
</li>
<li><p><strong>按信息的可保存性分类</strong><br>断电后，存储信息即消失的存储器，称易失性存储器；断电后信息仍然保存的存储器，称非易失性存储器。<br>如果读出时，原存信息被破坏，则称破坏性读出；如果读出时，被读单元原存信息不被破坏，则称非破坏性读出。</p>
</li>
</ol>
<a id="more"></a>
<h3 id="2-半导体随机存取存储器"><a href="#2-半导体随机存取存储器" class="headerlink" title="2. 半导体随机存取存储器"></a>2. 半导体随机存取存储器</h3><ol>
<li><p><strong>SRAM存储器的工作原理</strong><br>SRAM记忆单元是用双稳态触发器来记忆信息的。<br>SRAM的存取速度快，但集成度低，功耗也较高，一般用来组成高速缓冲存储器和小容量主存系统。</p>
</li>
<li><p><strong>DRAM存储器的工作原理</strong><br>DRAM是靠MOS电路中的栅极电容C1 和C2 来存储信息的。<br>DRAM集成度高、功耗低，但存取速度慢，一般用来组成大容量主存系统。<br>栅极电容上存储的信息随着时间的推移会逐渐丢失，因此，每隔一定的时间必须向栅极电容补充一次电荷，这个过程称为“刷新”。常见的刷新方式有集中式、分散式和异步式3种。</p>
</li>
</ol>
<h3 id="3-主存储器与CPU的连接"><a href="#3-主存储器与CPU的连接" class="headerlink" title="3. 主存储器与CPU的连接"></a>3. 主存储器与CPU的连接</h3><p>用多个存储芯片组合成存储器，常采用位扩展法、字扩展法、字和位同时扩展法。</p>
<p><strong>位扩展</strong><br>指只在位数方向扩展（加大字长），而芯片的字数和存储器的字数是一致的。<br>位扩展的连接方式是将各存储芯片的地址线、片选线和读写线相应地并联起来，而将各芯片的数据线单独列出。<br><strong>字扩展</strong><br>指仅在字数方向扩展，而倍数不变。<br>字扩展将芯片的地址线、数据线、读写线并联，由片选信号来区分各个芯片。<br><strong>字和位同时扩展</strong><br>是前两种扩展方法的组合，在字数方向和位数方向上同时扩展。</p>
<p>存储器与CPU的连接，特别要注意地址线、数据线和控制线的连接。</p>
<p><strong>地址线的连接</strong>：<br>通常CPU的地址的低位与存储芯片的地址线相连，CPU地址线的高位用做片选信号。<br><strong>数据线的连接</strong>：<br>如果CPU的数据线数与存储芯片的数据线数不相等，必须对存储芯片进行位扩展，使其数据位数与CPU的数据线数相等。<br><strong>读写命令线的连接</strong>：<br>CPU的读写命令线一般直接与存储芯片的读写控制端相连。<br><strong>片选线的连接</strong>：<br>那些未与存储芯片连接的高位地址必须和访存控制信号共同产生存储芯片的片选信号。通常还需要用到一些逻辑电路，如译码器及各种门电路，来产生片选有效信号。<br>片选信号的产生可细分为线选法、全译码法和部分译码法。</p>
<h3 id="4-Cache的基本工作原理"><a href="#4-Cache的基本工作原理" class="headerlink" title="4. Cache的基本工作原理"></a>4. Cache的基本工作原理</h3><p>利用程序的局部性原理，把程序中正在使用的部分存放在一个高速的容量较小的Cache中，使CPU的访存操作大多数针对Cache进行，从而使程序的执行速度大大提高。</p>
<p>Cache和主存都被分成若干个大小相等的块，每块由若干字节组成。</p>
<p>由于Cache的容量远小于主存的容量，所以Cache中的块数要远少于主存中的块数，它保存的信息只是主存中最需执行的若干块的副本。</p>
<p>当CPU发生主存地址后，首先判断该存储字是否在Cache中，若命中，则直接访问Cache；若不命中，则访问主存并将该字所在的主存块装入Cache。</p>
<h3 id="5-Cache和主存之间的映射方式"><a href="#5-Cache和主存之间的映射方式" class="headerlink" title="5. Cache和主存之间的映射方式"></a>5. Cache和主存之间的映射方式</h3><p>由于Cache的容量小，因此Cache中的内容会经常地被新的主存块替换掉，它们之间就有一个地址映射问题。常见的地址映射的方法有3种：全相联映射、直接映射和组相联映射。</p>
<p>（1）<strong>全相联映射</strong></p>
<p>全相联映射就是让主存中任何一个块均可以映射装入到Cache任何一个块的位置上。</p>
<p>全相联映射方式比较灵活，Cache的块冲突概率最低、空间利用率最高，但是地址变换速度慢，而且成本高，实现起来比较困难。</p>
<p>（2）<strong>直接映射</strong></p>
<p>直接映射是指主存中的每一个块只能被放置到Cache中唯一的一个指定位置，若这个位置已有内容，则产生块冲突，原来的块将无条件地被替换出去。</p>
<p>直接映射方式是最简单的地址映射方式，成本低，易实现，地址变换速度快，但这种方式不够灵活，Cache的块冲突概率最高、空间利用率最低。</p>
<p>（3）<strong>组相联映射</strong></p>
<p>组相联映射实际上是全相联映射和直接映射的折中方案，所以其优点和缺点介于全相联和直接映射方式之间。</p>
<h3 id="6-Cache中主存块的替换算法"><a href="#6-Cache中主存块的替换算法" class="headerlink" title="6. Cache中主存块的替换算法"></a>6. Cache中主存块的替换算法</h3><p>Cache在不命中的情况下，需要从主存中读入最新数据，必然要产生替换，常用的替换算法有以下几种。</p>
<p><strong>（1）随机算法</strong></p>
<p> 这是一种最简单的替换算法，完全不用管Cache块过去、现在及将来的使用情况，只需简单地根据一个随机数，选择一块替换竨。</p>
<p><strong>（2）先进先出（FIFO）算法</strong></p>
<p> FIFO算法是按调入Cache的先后决定淘汰的顺序，即在需要更新时，将最先进入Cache的块作为被替换的块。FIFO算法容易实现，而且系统开销小，但缺点是没有利用程序的局部性原理，可能会把一些需要经常使用的程序块（如循环程序）也作为最早进入Cache的块替换掉。</p>
<p><strong>（3）近期最少使用（LRU）算法</strong></p>
<p>LRU算法是把CPU近期最少使用的块作为被替换的块。该算法相对合理，但实现起来比较复杂，系统开销较大。</p>
<h3 id="7-Cache写策略"><a href="#7-Cache写策略" class="headerlink" title="7. Cache写策略"></a>7. Cache写策略</h3><p>为了保证Cache中的内容是主存活跃部分的副本，即Cache和主存的一致性，当CPU执行写操作且Cache命中时，有写直达法和写回法两种Cache写策略。</p>
<p><strong>写直达法</strong>是指必须把被写数据同时写入Cache和主存。这种方法实现简单，而且能随时保持主存数据的正确性，但可能增加多次不必要的主存写入，会降低存取速度。</p>
<p><strong>写回法</strong>是指被写数据只写入Cache，不写入主存，仅当需要替换时，才把已经修改过的Cache块写回到主存。这种方法操作速度快，但因主存中的字块未及时修改而有可能出错。</p>
<h3 id="8-题"><a href="#8-题" class="headerlink" title="8. 题"></a>8. 题</h3><pre><code>【例3.1】存储器进行一次完整的读/写操作所需的全部时间成为（  B   ）。
</code></pre><p> A．存取时间      B. 存取周期     C. CPU周期   D. 机器周期</p>
<p>试题分析：一次完成的读写操作所需要的全部时间也就是连续两次访问存储器错做的间隔时间。要注意存取周期与存取时间这两个概念的区别，存取时间是指从启动一次存储器操作到完成该错做所经历的时间，所以存取时间小于存取周期。</p>
<pre><code>【例3.2】下述说法中正确的是（ C     ）。
</code></pre><p>A.    半导体RAM信息可读可写，且断电后仍能保持记忆<br>B.    动态RAM时易失性RAM，而静态RAM中的存储信息是不易失的<br>C.    半导体RAM是易失性RAM，但只要电源不断电，所存信息室不丢失的<br>D.    半导体RAM是非易失性的RAM</p>
<p>试题分析：半导体RAM，无论静态RAM还是动态RAM都是易失性的，断电后信息将丢失。</p>
<pre><code>【例3.3】下面叙述错误的是（ C     ）。
</code></pre><p>A.    随机存储器可随时存取信息，掉电后信息丢失<br>B.    在访问随机存储器时，访问时间与单元的物理位置无关<br>C.    主存储器中存储的信息均是不可改变的<br>D.    随机存储器和只读存储器可以统一编址</p>
<p>试题分析：主存由RAM和ROM组成，其中ROM中的信息室不可改变的，RAM中的信息室可以改变的</p>
<pre><code>【例3.5】在对破坏性读出的存储器进行读写操作时，为维持原存信息不变，必须辅以的操作是（   B  ）。
</code></pre><p>A. 刷新           B. 再生         C. 写保护        D. 主存校验</p>
<p>试题分析：对于破坏性读出的存储器，每当一次读出操作之后，必须紧接一个重写（再生）的操作，一遍恢复被破坏的信息，保持原存信息不变。</p>
<pre><code>【例3.6】动态RAM的刷新单位是（    B   ）。
</code></pre><p>A. 存储单元          B. 行            C. 列         D. 存储位</p>
<p>试题分析：动态RAM芯片中的全部记忆单元排列成矩阵，刷新是以行尾单位进行的，一行中的各记忆单元同时被刷新。</p>
<pre><code>【3.7】某计算机字长是16位，它的存储容量是1MB，按字编址，它的寻址单元数是（  A    ）。
</code></pre><p>A. 512K<br>B. 1M<br>C. 512KB<br>D. 1MB</p>
<p>试题分析：由于字长为16位，一个字等于2个字节，所以1M字节等于512K字。</p>
<pre><code>【3.8】设机器字长为32位，一个容量为16MB的存储器，CPU按半字寻址，其寻址单元数是（     B  ）。
</code></pre><p>A. 224<br>B. 223<br>C. 222<br>D. 221</p>
<p>试题分析：16MB=224，由于字长为32位，现在按半字（16位）寻址，相当于有8M个存储单元，每个存储单元中存放16位。</p>
<pre><code>【3.9】设机器字长为32位，存储容量为16MB，若按双字编址，其寻址单元数是（ B   ）。
</code></pre><p>A. 8MB<br>B. 2M<br>C. 4M<br>D. 16M</p>
<p>试题分析：按双字编址，即一个存储单元存放64位（8个字节），16M字节=2M字，<br>共有24M个存储单元。</p>
<pre><code>【3.10】在1K*8的存储器芯片中，采用双译码方式，译码器的输出信号条数是（64）。
</code></pre><p>试题分析：双译码方式又称为重合法。1K*8的存储芯片共有10根地址线，分成相等的两段，一段用于水平方向作X地址线，供X地址译码器译码；一段用于垂直方向作Y地址线，供Y地址译码器译码。每个译码器的输出信号条数是32条，两个译码器的输出线数共64条。</p>
<pre><code>【例3.12】若数据在存储器中采用以低字节地址为字地址的存放方式，则十六进制数12345678H的存储字节顺序按地址由小到大一次为（   B   ）。
</code></pre><p>A. 12345678<br>B. 78563412<br>C. 87654321<br>D. 34127856</p>
<p>此存放方式是小端次序方案，将最低有效字节存储在最小地址位置。</p>
<pre><code>【例3.13】某一SRAM芯片，其容量为1024*8，除电源和接地端外，该芯片量最少引出线数为（  20    ）。
</code></pre><p>试题分析：地址线10根，数据线8根，控制线（读写和片选）2根。</p>
<pre><code>【例3.15】地址总线A0（高位）~A15（低位），用4K*4的存储芯片组成16KB存储器，则产生片信号的译码器的输入地址线应该是（  A ）。
</code></pre><p>A. A2A3<br>B. A0A1<br>C. A12A13<br>D. A14A15</p>
<p>试题分析: 由于A15为地址线的低位，接入各芯片地址端得是地址线的低12位，即A4~A15，共有8个芯片（分为4组）组成16KB的存储器，由高2位地址线A2A3作为译码器的输入。</p>
<pre><code>【例3.17】RAM芯片字扩张时可以使（B     ）。
</code></pre><p>A. 存储器宽度增加<br>B. 存储器地址范围增加<br>C. 存储器速度增加<br>D. 降低存储器的平均价格</p>
<p>试题分析：字扩张可以增加存储单元的数量，因此增加了存储器的地址范围。</p>
<pre><code>【3.19】如果一个存储单元被访问，则可能这个存储单元会很快地再次被访问，这称为（   A    ）。
</code></pre><p>A. 时间局部性<br>B. 空间局部性<br>C. 程序局部性<br>D. 数据局部性</p>
<p>试题分析：从时间上看，一个单元刚被访问又被再次访问，这是因为程序中存在着循环。</p>
<pre><code>【3.20】访问相连存储器时，（    A  ）
</code></pre><p>A. 根据内容，不需地址<br>B. 不根据内容，只需要地址<br>C. 既要内容，又要地址<br>D. 不要内容也不要地址</p>
<p>试题分析：相联存储器是一种按内容访问的存储器</p>
<pre><code>【例3.21】容量为64块的Cache采用组相联映射方式，字块大小为128个字，每4块为一组。若主存4096块，且以字编址，那么主存地址和主存标记的位数分别为（    D  ）。
</code></pre><p>A. 16，6<br>B. 17，6<br>C. 18，8<br>D. 19，8</p>
<p>试题分析：主存容量4K*128=512K字，故主存地址19位，由主存标记、组号和块内地址3部分组成。因为字块大小为128个字，故块内地址7位，Cache被分成64/4=16组，故组号4位，主存标记19-4-7=8位。</p>
<pre><code>【例3.25】设有一个1MB容量的存储器，字长为32位，问：
</code></pre><p>(1)    按字节编址，地址寄存器、数据寄存器各位几位？编址范围为多大？<br>(2)    按半字编址，地址寄存器、数据寄存器各位几位？编址范围为多大？<br>(3)    按字编址，地址寄存器、数据寄存器各位几位？编址范围为多大？</p>
<p>解答：<br>（1）20，8，00000H~FFFFFH。<br>（2）19，16，00000H~7FFFFH。<br>（3）18，32，00000H~3FFFFH。</p>
<p>试题分析：<br>（1）    按字节编址，1MB=220<em>8b，地址寄存器为20位，数据寄存器为8位，编址范围为00000H~FFFFFH。<br>（2）    按半字编址，1MB=220</em>8b=219<em>16b，地址寄存器为19位，数据寄存器为16位，编址范围为00000H~7FFFFH。<br>（3）    按字编址，1MB=220</em>8b=218*32b，地址寄存器为18位，数据存储器为32位，编址范围为00000H~3FFFFH。</p>
<pre><code>【例3.26】一台8位微机的地址总线为16条，其RAM存储器容量为32KB，首地址为4000H，且地址是连续的，可用的最高地址是多少？
</code></pre><p>解答：BFFFH。<br>试题分析：若32KB的存储地址起始单元为0000H，则可知32KB存储空间共占用15条地址线，其范围应为0000~7FFFH，但现在的首地址为4000H，即地址后移了，因此最高地址应为4000H+7FFFH=BFFFH。</p>
<pre><code>【例3.28】图2-3-2所示为用8片2114构成的4K*8的存储器，与8位的一个微处理器相连，2114为1024*4位的静态RAM芯片。试问：
</code></pre><p>（1）    每一组芯片组的地址范围和地址线数目是多少？<br>（2）    4KB的RAM寻址范围是多少？<br>（3）    存储器有没有地址重叠？</p>
<p>解答：<br>（1）000H~3FFH，10。<br>（2）0000H~03FFH，4000H~43FFH，8000H~83FFH，C00H~C3FFH。<br>（3）存在地址重叠现象。</p>
<p>试题分析：<br>（1）    芯片组的容量为1024B，地址范围为000H~3FFH，地址线数目10根（A9~A0）。<br>（2）    根据图2-3-2所示的连线，各芯片组的片选端由地址线A15、A14进行译码。芯片组内地址线为A9~A0，A13~A10空闲，即为任意态。假设A13~A10为全0，4KB RAM的寻址范围分别是：第0组为0000H~03FFH，第一组为4000H~43FFH，第二组为8000H~83FFH，第三组为C000H~C3FFH，可见这4KB存储器的地址空间是不连续的。<br>（3）    由于A13~A10没有参与译码（部分译码），所以存储器存在地址重现现象。</p>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机组成原理笔记（一）——计算机系统概述]]></title>
      <url>/2017/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>整理自<a href="http://jpkc.hdu.edu.cn/computer/zcyl/kcxx.asp?id=2" target="_blank" rel="noopener">学院网站</a></p>
<h3 id="1-计算机发展历程"><a href="#1-计算机发展历程" class="headerlink" title="1. 计算机发展历程"></a>1. 计算机发展历程</h3><p>计算机的发展史包括硬件和软件两方面。<strong>硬件</strong>的发展主要体现在组成计算机基本电路的电子元器件的性能上，<strong>软件</strong>的发展始终以如何提高计算机的效率和如何方便用户为目标。</p>
<p>通常，根据组成计算机的电子器件，把电子计算机分为4个发展阶段，习惯上称为四代：<strong>电子管、晶体管、中小规模集成电路、大规模超大规模集成电路</strong>。</p>
<h3 id="2-计算机硬件的基本组成"><a href="#2-计算机硬件的基本组成" class="headerlink" title="2. 计算机硬件的基本组成"></a>2. 计算机硬件的基本组成</h3><p>中央处理器（CPU）=运算器+控制器。<br>主机=CPU+主存储器。<br>除去主机以外的硬件装置（如输入设备﹑输出设备﹑辅助存储器等）称为外围设备或外部设备。</p>
<p>计算机的硬件系统由以下五大基本部件组成。</p>
<ul>
<li><strong>输入设备</strong>：把程序和原始数据送到计算机中去的设备。</li>
<li><strong>输出设</strong>备：把计算机的处理结果送到计算机的设备。</li>
<li><strong>存储器</strong>：用来存放程序和数据的部件，是计算机实现“存储程序控制“的基础。</li>
<li><strong>运算器</strong>：对信息进行处理和运算的部件，经常进行的运算是算术运算和逻辑运算。</li>
<li><strong>控制器</strong>：控制器是整个计算机的指挥中心，它的主要功能是按照人们预先确定的操作步骤，控制整个计算机的各部件有条不紊地自动工作。</li>
</ul>
<a id="more"></a>
<h3 id="3-计算机软件的分类"><a href="#3-计算机软件的分类" class="headerlink" title="3. 计算机软件的分类"></a>3. 计算机软件的分类</h3><p>计算机软件按其功能分，有应用软件和系统软件两大类。应用软件是用户为解决某种应用问题而编制的程序；系统软件用于实现计算机系统的管理﹑调度﹑监视﹑服务等功能。</p>
<p>通常将系统软件分为以下几类。</p>
<ul>
<li>操作系统：有批处理系统﹑分时操作系统﹑实时操作系统等。</li>
<li>语言处理程序：如编译程序﹑汇编程序﹑解释程序等。</li>
<li>标准程序库：如监控程序，用于监视计算机工作。</li>
<li>服务性程序：如链接程序﹑编辑程序﹑调试程序﹑诊断程序等。</li>
<li>数据库管理系统：包括数据库和数据库管理软件。</li>
<li>计算机网络软件：为计算机网络配置的系统软件。</li>
</ul>
<h3 id="4-计算机工作过程"><a href="#4-计算机工作过程" class="headerlink" title="4. 计算机工作过程"></a>4. 计算机工作过程</h3><p><strong>人们将事先编好的程序（指令序列）和数据送到计算机的存储器内，然后计算机按此指令序列逐条完成全部指令的功能，直至程序结束。</strong></p>
<h3 id="5-计算机性能指标"><a href="#5-计算机性能指标" class="headerlink" title="5. 计算机性能指标"></a>5. 计算机性能指标</h3><p><strong>吞吐量</strong>：吞吐量是指系统在单位时间内处理请求的数量。<br><strong>响应时间</strong>：响应时间是指系统对请求作出响应的时间。<br><strong>主频</strong>：主频是衡量CPU速度的重要参数。CPU的主频表示在CPU内数字脉冲信号振荡的速度，与CPU实际的运行能力并没有直接关系。<br><strong>CPU时钟周期</strong>：主频的倒数是时钟周期，这是CPU中最小的时间元素。每个动作至少需要一个时钟周期。<br><strong>CPI</strong>：每条指令执行所需的时钟周期数。<br><figure class="image-box">
                <img src="http://wx3.sinaimg.cn/large/789d050dgy1ff99ach9a8j20k6095t9l.jpg" alt="此处输入图片的描述" title="" class="">
                <p>此处输入图片的描述</p>
            </figure></p>
<h3 id="6-题"><a href="#6-题" class="headerlink" title="6. 题"></a>6. 题</h3><p>【例1.1】    下列叙述正确的是（D ）<br>A.    世界上第一台电子计算机ENIAC首次实现了“存储程序”方案<br>B.    按照计算机的规模，人们把计算机的发展过程分为4个时代<br>C.    微型计算机最早出现于第三代计算机中<br>D.    冯·诺依曼提出的计算机体系结构奠定了现代计算机的基础<br>试题分析：ENIAC的存储器容量极小，不属于存储器的计算机。通常划分计算机发展时代是以计算机所用的电子元器件为标准的。最早的微型计算机是由大规模集成电路实现的。</p>
<p>【例1.2】    电子计算机可分为数字计算机、模拟计算机和数模混合计算机，是按（C）。<br> A.计算机的用途分类                    B.计算机的使用方式分类<br> C.信息的形式和处理方式分类            D.计算机的系统规模分类<br>试题分析：根据计算机的用途可分为通用计算机和专用计算机；根据计算机系统的规模可分为巨型机、大型机、中型机、小型机、微型机等；根据信息的形式和处理方式可分为电子数字计算机、电子模拟计算机，也可以有数模混合计算机。</p>
<p>【例1.3】    由0、1代码组成的语言，称为（C ）<br> A.汇编语言         B.自然语言       C.机器语言         D.高级语言<br>试题分析：机器语言是计算机唯一可以直接识别和执行的语言，它是由二进制代码编写的。而汇编语言是一种助记符来表示计算机指令的语言，高级语言是与计算机硬件结构无关的程序设计语言。</p>
<p>【例1.4】    只有当程序执行时，它才会去将源程序翻译成机器语言，而且一次只能读取、翻译并执行源代码中的一行语句，此程序称为（C ）<br> A.目标程序         B.编译程序        C.解释程序        D.汇编程序<br>试题分析：将高级语言编写的源程序翻译成机器语言的语言处理程序包括编译程序和解释程序，前者是先将源程序转换为目标程序，然后在开始执行；而后者对源程序的处理采用一行一行语句地边解释边执行的方法。</p>
<p>【例1.5】    用于科学计算的计算机中，标志系统性能的主要参数是（ D）<br> A.主频              B.主存容量       C.MIPS            D.MFLOPS<br>试题分析：主频越高和主存容量越大越有利于提高计算机的性能，但它们并不是标志系统性能的主要参数，也就是说主频高和主存大的计算机并不一定就能获得好的性能。MIPS和MFLOPS都是标志系统性能的主要参数，MIPS表示每秒执行百万条指令条数，用来描述计算机定点运行速度，MFLOPS表示每秒钟执行百万次浮点运算，用来描述计算机的浮点运行速度，而科学计算的计算机更看重浮点运算速度。</p>
<p>【例1.6】    微机A和B采用了不同主频的CPU芯片，片内逻辑电路完全相同。<br>(1)    若A机的CPU主频为8MHz，B机为12MHz，则A机的CPU时钟周期为多少？<br>(2)    如A机的平均指令执行速度为0.4MIPS,那么A机的平均指令周期为多少？<br>(3)    B机的平均指令执行速度为多少？<br>试题分析：<br>（1）    A机的CPU主频为8MHz,所以A机的CPU时钟周期=1÷8MHz=0.125us。<br>（2）    A机的平均指令执行速度为0.4MIPS，所以A    机的平均指令周期=1÷0.4MIPS=2.5us。<br>（3）    A机平均每条指令的时钟周期数=2.5us÷0.125us=20。而微机A和B片内逻辑电路完全相同，所以B机平均每条指令的时钟周期数也为20.<br> 由于B机的CPU主频为12MHz，所以B机的CPU时钟周期=1÷12MHz= us。<br> B机的平均指令周期=20× us= us.<br> B机的平均指令执行速度= MIPS=0.6MIPS。</p>
<p>【例1.7】    设某机主频为8MHz，每个机器周期平均含2个时钟周期，每条指令平均有2.5个机器周期，试问该机的平均指令执行速度为多少MIPS?若机器主频不变，但每个机器周期平均含4个时钟周期，每条指令平均有5个机器周期，则该机的平均指令执行速度又是多少MIPS?<br>试题分析：根据主频为8MHz，时钟周期=1÷8MHz=0.125us，机器周期为0.125×2=0.25us,指令周期为0.25×2.5=0.625us。<br>（1）    平均指令执行速度为1÷0.625=1.6MIPS。<br>（2）    若机器主频不变，机器周期含4个时钟周期，每条指令平均含5个机器周期，则指令周期为0.125×4×5=2.5us，故平均指令执行速度为1÷2.5=0.4MIPS。</p>
<p>【题 1.1】 通常划分计算机发展时代的标准是（A ）<br>A.所用电子器件          B.运算速度             C.计算机结构      D.所用语言</p>
<p>【题 1.2】冯·诺依曼计算机结构的核心思想是（ D）<br>A.二进制运算                          B.有存储信息的功能<br>C.运算速度快                          D.存储程序控制</p>
<p>【题 1.3】中央处理器（CPU）是指（ C）<br>A.运算器          B.控制器       C.运算器和控制器      D.运算器、控制器和存储器</p>
<p>【题 1.4】计算机硬件能够直接执行的是（A ）<br>A.机器语言                            B.汇编语言<br>C.机器语言和汇编语言                  D.各种高级语言</p>
<p>【题 1.5】假设某机平均执行一条指令需要两次访存，平均需要2个机器周期，每个机器周期平均包含4个时钟周期。若机器主频为200MHz，请回答：<br>（1）    若主存零等待（即不需要插入等待周期），平均指令执行速度为多少MIPS?<br>（2）    若每次访问主存需要插入2个等待周期，平均指令执行速度为多少MIPS?<br>参考答案：<br>（1）时钟周期=1÷200=0.005us，机器周期=4×0.005=0.02us，指令周期=2×机器周期=0.04us，平均指令执行速度=1÷0.04=25MIPS。<br>（2）指令周期=2×机器周期+2×机器周期=0.05us， 平均指令执行速度=1÷0.05=20MIPS。</p>
]]></content>
      
        
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yeoman]]></title>
      <url>/2017/11/03/yeoman/</url>
      <content type="html"><![CDATA[<blockquote>
<p>THE WEB’S SCAFFOLDING TOOL FOR MODERN WEBAPPS</p>
</blockquote>
<p><a href="http://yeoman.io/" target="_blank" rel="external">yeoman官网</a><br>参考资料已注明出处，引用源在最后。</p>
<h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h3><h4 id="1-安装工具箱"><a href="#1-安装工具箱" class="headerlink" title="1. 安装工具箱"></a>1. 安装工具箱</h4><pre><code>$ npm install -g yo

$ yo --version
</code></pre><blockquote>
<p>YO：Yeoman核心工具，项目工程依赖目录和文件生成工具，项目生产环境和编译环境生成工具</p>
</blockquote>
<h4 id="2-安装bower"><a href="#2-安装bower" class="headerlink" title="2. 安装bower"></a>2. 安装bower</h4><p><a href="https://bower.io/" target="_blank" rel="external">bower官网</a></p>
<pre><code>npm install -g bower
</code></pre><blockquote>
<p>BOWER: Web开发的包管理器，概念上类似npm，npm专注于nodeJs模块，而bower专注于CSS、JavaScript、图像等前端相关内容的管理。<a href="http://ju.outofmemory.cn/entry/36120" target="_blank" rel="external">^foot2</a></p>
</blockquote>
<h4 id="3-安装生成器"><a href="#3-安装生成器" class="headerlink" title="3. 安装生成器"></a>3. 安装生成器</h4><pre><code>$ npm install -g generator-webapp
</code></pre><a id="more"></a>
<h4 id="4-本地安装项目"><a href="#4-本地安装项目" class="headerlink" title="4. 本地安装项目"></a>4. 本地安装项目</h4><pre><code>$ yo webapp test-gulp-webapp
</code></pre><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkrc8gv2c7j20kf0ce3yv.jpg" alt="本地安装"></p>
<h4 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5. 启动服务"></a>5. 启动服务</h4><pre><code>$ gulp serve
</code></pre><p>启动服务器，默认地址<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a></p>
<h4 id="6-启动测试"><a href="#6-启动测试" class="headerlink" title="6. 启动测试"></a>6. 启动测试</h4><pre><code>$ gulp test
</code></pre><p>默认使用mocha作为测试框架，在 PhantomJS环境下进行回归测试。</p>
<h4 id="7-引入其他库"><a href="#7-引入其他库" class="headerlink" title="7. 引入其他库"></a>7. 引入其他库</h4><pre><code>$ bower install xxx
$ gulp
</code></pre><h3 id="2-介绍-amp-特性"><a href="#2-介绍-amp-特性" class="headerlink" title="2. 介绍&amp;特性"></a>2. 介绍&amp;特性</h3><p>Yeoman旨在为开发者提供一系列健壮的工具、程序库和工作流，帮助他们快速构建出漂亮、引人注目的Web应用。<a href="http://www.infoq.com/cn/news/2012/09/yeoman" target="_blank" rel="external">^foot1</a></p>
<ul>
<li><p>快速创建骨架应用程序——使用可自定义的模板（例如：HTML5、Boilerplate、Twitter<br>Bootstrap等）、AMD（通过RequireJS）以及其他工具轻松地创建新项目的骨架。</p>
</li>
<li><p>自动编译CoffeeScrip和Compass——在做出变更的时候，Yeoman的LiveReload监视进程会自动编译源文件，并刷新浏览器，而不需要你手动执行。</p>
</li>
<li><p>自动完善你的脚本——所有脚本都会自动针对jshint（软件开发中的静态代码分析工具，用于检查JavaScript源代码是否符合编码规范）运行，从而确保它们遵循语言的最佳实践。</p>
</li>
<li><p>内建的预览服务器——你不需要启动自己的HTTP服务器。内建的服务器用一条命令就可以启动。</p>
</li>
<li><p>非常棒的图像优化——Yeoman使用OptPNG和JPEGTran对所有图像做了优化，从而你的用户可以花费更少时间下载资源，有更多时间来使用你的应用程序。</p>
</li>
<li><p>生成AppCache清单——Yeoman会为你生成应用程序缓存的清单，你只需要构建项目就好。</p>
</li>
</ul>
<ul>
<li><p>“杀手级”的构建过程——你所做的工作不仅被精简到最少，让你更加专注，而且Yeoman还会优化所有图像文件和HTML文件、编译你的CoffeeScript和Compass文件、生成应用程序的缓存清单，如果你使用AMD，那么它还会通过r.js来传递这些模块。这会为你节省大量工作。</p>
</li>
<li><p>集成的包管理——Yeoman让你可以通过命令行（例如，yeoman搜索查询）轻松地查找新的包，安装并保持更新，而不需要你打开浏览器。</p>
</li>
<li><p>对ES6模块语法的支持——你可以使用最新的ECMAScript<br>6模块语法来编写模块。这还是一种实验性的特性，它会被转换成ES5，从而你可以在所有流行的浏览器中使用编写的代码。</p>
</li>
<li><p>PhantomJS单元测试——你可以通过PhantomJS轻松地运行单元测试。当你创建新的应用程序的时候，它还会为你自动创建测试内容的骨架。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Surface3装ubuntu实现双系统]]></title>
      <url>/2017/11/02/Surface3%E8%A3%85ubuntu%E5%AE%9E%E7%8E%B0%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>15年首发买的surface3，用到现在基本打开5分钟内必蓝屏。检测过是硬件问题导致的过热蓝屏。美国买的没地方修。重装过各种版本win10，禁用windows update等，甚至装过win8，都没用，救不了。我想ubuntu对系统需求小，不妨试一试。</p>
<p><strong>安装参考：</strong><br><a href="http://tieba.baidu.com/p/4821863536?pn=1" target="_blank" rel="external">【技术攻略】surface3装ubuntu16.10</a><br><a href="http://www.cnblogs.com/Duane/p/5424218.html" target="_blank" rel="external">Windows下安装Ubuntu 16.04双系统</a><br><a href="https://www.reddit.com/r/SurfaceLinux/comments/2pbcwj/stepbystep_guide_for_install_ubuntu_on_the/" target="_blank" rel="external">Step-by-step guide for install Ubuntu on the Surface Pro 3</a><br><a href="https://www.reddit.com/r/SurfaceLinux/" target="_blank" rel="external">reddit社区讨论版</a></p>
<p><strong>安装版本：</strong><br>ubuntu-17.10-desktop-amd64.iso</p>
<p><strong>安装工具：</strong><br>HUB：连usb键盘，typecover安装的时候会出问题，要把typecover暂时取下。<br>U盘：一开始直接把ISO文件内的东西导进去安装不成功，用UltraISO制作了一下就没问题了。</p>
<p><strong>安装前要做的：</strong><br>在windows里搜索磁盘管理，选择C盘分区压缩一部分用来装linux。<br>备份重要文件，防止意外发生。<br>关闭security boot选项。</p>
<p><strong>开始安装：</strong><br>1.首先进入grub界面，按e编辑启动命令（try或直接安装都可以），找到 quiet splash 然后在这两个词前面加上nomodeset(别忘了空格)。</p>
<p>2.grub改分辨率，否则过会只会有600*800的分辨率点不到选项。这部分我找了很多资料后来改成功了，但不知道是哪个方法对的，都试下好了。</p>
<ul>
<li>在grub界面增加一行：gfxmode=1920*1280。</li>
<li>在进入ubuntu后<code>sudo gedit /etc/default/grub</code>把<code>#GRUB_GFXMODE=640×480</code><br>改成<code>GRUB_GFXMODE=1360x768</code><strong>注意，不要#号</strong></li>
</ul>
<a id="more"></a>
<p>3.进入ubuntu安装界面，选择分区安装。主分区是Ext4日志文件系统。安装过程断网。</p>
<p>4.设置密码后选择自动登录，输密码会导致黑屏就要重装了。怕自己忘记这里写下吧666。</p>
<p>5.等待几分钟就装好了。拔掉U盘重启后就会有grub引导界面，可以选择进入win还是ubuntu。</p>
<p>typecover，网络，触屏，TF卡都能用。蓝牙不测试了，笔下次测一下。</p>
<p>然而，装了ubuntu之后确实不可能蓝屏了，surface3直接重启。现在天气开始变冷了，希望明年找到实习前能再撑一会儿，拜托了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hyperledger Fabric 开发环境]]></title>
      <url>/2017/10/30/Hyperledger%20Fabric%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>所有参考资料贴在最后。</p>
<h3 id="1-Vagrant"><a href="#1-Vagrant" class="headerlink" title="1. Vagrant"></a>1. Vagrant</h3><p><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">官方下载</a></p>
<p>Vagrant是构建在虚拟化技术之上的虚拟机运行环境管理工具。通过Vagrant可以方便实现的对虚拟机的管理，包括建立和删除虚拟机、配置虚拟机运行参数、管理虚拟机运行状态、自动化配置和安装开发环境必须的各类软件、打包和分发虚拟机运行环境等。 <a href="http://www.ituring.com.cn/article/131600" target="_blank" rel="external">^foot1</a></p>
<p>简单地说，Vagrant让我们可以通过代码的方式快速地、可重复地创建针对不同虚拟环境的虚拟机，包括Virtualbox、AWS、Docker等。它使得我们可以一次性地、自动创建多个环境相同的虚拟机，对于软件开发和测试尤其有用。<a href="http://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html" target="_blank" rel="external">^foot2</a></p>
<p>使用Vagrant能尽可能避免”Work on my machine“错误，缩短搭建开发环境的时间。<a href="http://www.cnblogs.com/davenkin/p/vagrant-virtualbox.html" target="_blank" rel="external">^foot2</a></p>
<h3 id="2-go"><a href="#2-go" class="headerlink" title="2. go"></a>2. go</h3><p><a href="https://golang.org/dl/" target="_blank" rel="external">官方下载</a></p>
<p><a href="https://golang.org/doc/" target="_blank" rel="external">官方文档</a></p>
<p>Go语言需要配置<code>GOPATH</code>环境变量，指向代码目录。</p>
<p>管理员模式打开CMD输入<code>go env</code>验证。</p>
<h3 id="3-下载源码"><a href="#3-下载源码" class="headerlink" title="3. 下载源码"></a>3. 下载源码</h3><p><a href="https://github.com/hyperledger/fabric" target="_blank" rel="external">fabric</a><br><a href="https://github.com/hyperledger/fabric-ca" target="_blank" rel="external">fabric-ca</a></p>
<pre><code>git clone https://github.com/hyperledger/fabric.git                        
git clone https://github.com/hyperledger/fabric-ca.git    
</code></pre><a id="more"></a>    
<h3 id="4-启动vagrant"><a href="#4-启动vagrant" class="headerlink" title="4. 启动vagrant"></a>4. 启动vagrant</h3><pre><code>cd F:\hyperledger\1\fabric\devenv                
vagrant up    
vagrant ssh
</code></pre><ol>
<li><p>“No Usable default provider could be found for your system”</p>
<p> <code>vagrant up --provider=virtualbox</code>查询错误信息，发现vagrant对virtualbox的版本有要求。<a href="https://github.com/hashicorp/vagrant/issues/7411#issuecomment-232305067" target="_blank" rel="external">具体版本支持。</a><br> 重新安装virtualbox 5.1后成功。</p>
</li>
<li><p>“Couldn’t open file /Users/…/base”</p>
<pre><code>vagrant init hashicorp/fabric 
vagrant up
</code></pre><p> 具体参见 <a href="https://stackoverflow.com/questions/23874260/error-when-trying-vagrant-up" target="_blank" rel="external">1</a> <a href="https://github.com/hyperledger-archives/fabric/issues/2400" target="_blank" rel="external">2</a><br> 我的解决方法是重新Clone the fabric folder。不要用<code>vagrant init</code>修改原有的<code>Vagrantfile</code>配置文件。</p>
</li>
<li><p>“Can’t download boxes on Windows 10”</p>
<p> 问题：<a href="https://github.com/mitchellh/vagrant/issues/6754" target="_blank" rel="external">mitchellh/vagrant#6754</a>)<br> If the <code>vagrant up</code> command fails it may be because you do not have the Microsoft Visual C++ Redistributable package installed. <a href="http://www.microsoft.com/en-us/download/details.aspx?id=8328" target="_blank" rel="external">下载地址</a>。<a href="http://hyperledger-fabric.readthedocs.io/en/latest/dev-setup/devenv.html" target="_blank" rel="external">^foot3</a></p>
</li>
<li><p>“Vagrant box downloads extremely slow”</p>
<p>  <a href="https://github.com/hashicorp/vagrant/issues/5319" target="_blank" rel="external">#5319</a><br> take a walk or make yourself a sandwich. Get way from screen for a little bit.</p>
</li>
<li><p>“ubuntu xenial64 box password”</p>
<p> 在目录<code>~/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-xenial64/20161221.0.0/virtualbox/Vagrantfile</code>中有密码</p>
</li>
</ol>
<h3 id="5-使用本地二进制文件"><a href="#5-使用本地二进制文件" class="headerlink" title="5. 使用本地二进制文件"></a>5. 使用本地二进制文件</h3><p>在fabric目录下编译peer和orderer：</p>
<pre><code>make clean
make native
</code></pre><p>生成<code>ccenv</code>镜像：</p>
<pre><code>make peer-docker
</code></pre><p>然后打开两个终端都进入vagrant，至此有三个终端都在vagrant里。</p>
<p>前首先清空ledger文件夹·/var/hyperledger/·（每次运行后，为避免错误或重复，都要清空）:</p>
<pre><code>rm -rf /var/hyperledger/*
</code></pre><p>终端1<br>使用<code>configtxgen</code>工具创建orderer创世区块：</p>
<pre><code>configtxgen -profile SampleSingleMSPSolo -outputBlock orderer.block
</code></pre><p>终端2<br>用刚生成的创世区块启动orderer：</p>
<pre><code>ORDERER_GENERAL_GENESISMETHOD=file ORDERER_GENERAL_GENESISFILE=./orderer.block orderer
</code></pre><p>终端1<br>创建 channel configuration transaction：</p>
<pre><code>configtxgen -profile SampleSingleMSPSolo -outputCreateChannelTx channel.tx -channelID &lt;channel-ID&gt;
</code></pre><p>执行成功会在当前目录生成channel.tx</p>
<p>终端3<br>以<code>chainless</code>模式启动peer：</p>
<pre><code>peer node start --peer-defaultchain=false
</code></pre><p>Create channel<br>以<code>channel.tx</code>为参数创建channel：</p>
<pre><code>peer channel create -o 127.0.0.1:7050 -c mychannel -f channel.tx
</code></pre><p>执行后在当前目录生成一个channel的创世区块mychannel.block</p>
<p>Join channel<br>通过channel的创世区块<code>mychannel.block</code>加入channel：</p>
<pre><code>peer channel join -b mychannel.block
</code></pre><p>Install chaincode<br>在peer上安装chaincode：</p>
<pre><code>peer chaincode install -o 127.0.0.1:7050 -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02
</code></pre><p>执行成功后查看文件可以看到mycc.1.0:</p>
<pre><code>ls /var/hyperledger/production/chaincodes
</code></pre><p>Instantiate chaincode<br>实例化chaincode：</p>
<pre><code>peer chaincode instantiate -o 127.0.0.1:7050 -C mychannel -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -c &apos;{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;, &quot;100&quot;, &quot;b&quot;,&quot;200&quot;]}&apos;
</code></pre><p><code>docker ps</code>查看运行中的容器，如果chaincode启动成功，则显示：</p>
<pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
bd9c6bda7560        dev-jdoe-mycc-1.0   &quot;chaincode -peer.a...&quot;   5 seconds ago       Up 5 seconds                            dev-jdoe-mycc-1.0
</code></pre><p>Invoke chaincode<br>调用chaincode从“a”转移“10”给“b“：</p>
<pre><code>peer chaincode invoke -o 127.0.0.1:7050 -C mychannel -n mycc -c &apos;{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}&apos;
</code></pre><p>Query chaincode<br>查询”a“的值：<br>返回值应是 90</p>
<pre><code>peer chaincode query -o 127.0.0.1:7050 -C mychannel -n mycc -c &apos;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&apos;
</code></pre><p>运行完成后不要忘记清空ledger文件夹/var/hyperledger/：</p>
<pre><code>rm -rf /var/hyperledger/*
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GULP学习（三）插件&补充]]></title>
      <url>/2017/10/27/GULP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8F%92%E4%BB%B6&amp;%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>整理一些网上查到的资料(已注明出处、侵删)，再对gulp相关进行补充。</p>
<p><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="external">use-gulp</a><br><a href="https://gulpjs.com/plugins/" target="_blank" rel="external">gulp插件网</a><br><a href="https://github.com/alferov/awesome-gulp" target="_blank" rel="external">awesome-gulp</a><br><a href="http://www.tangshuang.net/3126.html" target="_blank" rel="external">gulp中文入门教程</a></p>
<h3 id="1-为静态文件添加-MD5-指纹-foot1"><a href="#1-为静态文件添加-MD5-指纹-foot1" class="headerlink" title="1. 为静态文件添加 MD5 指纹^foot1"></a>1. 为静态文件添加 MD5 指纹<a href="https://zhuanlan.zhihu.com/p/24975955" target="_blank" rel="external">^foot1</a></h3><p>使用 Gulp 自动对 HTML 中引用的静态文件添加<code>MD5 指纹戳</code>，有效解决旧文件缓存，新文件无法更新的问题。</p>
<p><code>MD5</code>的作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。</p>
<p><a href="https://www.npmjs.com/package/gulp-rev" target="_blank" rel="external">gulp-rev</a></p>
<blockquote>
<p> Static asset revisioning by appending content hash to filenames: unicorn.css → unicorn-d41d8cd98f.css</p>
</blockquote>
<p>完美规避更新时短时间内客户端请求结果不一致的问题，但易造成文件冗余。</p>
<p><a href="https://www.npmjs.com/package/gulp-rev-append" target="_blank" rel="external">gulp-rev-append</a></p>
<pre><code>转换后变为&lt;script src=&apos;BearD01001.min.js?rev=366dc531e1&apos;&gt;&lt;/script&gt;
</code></pre><p>每次更新不会产生新文件，有效避免文件冗余，但更新时短时间内，客户端请求到的静态文件可能不一致。</p>
<pre><code>$ npm install --save-dev gulp-rev --save-dev
$ npm install --save-dev gulp-rev-append --save-dev
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</div><div class="line"><span class="comment">// const revAppend = require('gulp-rev-append');</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, () =&gt;</div><div class="line">	gulp.src(<span class="string">'src/*.css'</span>)</div><div class="line">		.pipe(rev())</div><div class="line">		<span class="comment">// .pipe(revAppend())</span></div><div class="line">		.pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-JS-CSS-合并"><a href="#2-JS-CSS-合并" class="headerlink" title="2. JS / CSS 合并"></a>2. JS / CSS 合并</h3><p><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">gulp-concat</a></p>
<p>合并javascript文件，减少网络请求，减少冗余</p>
<pre><code>$ npm install gulp-concat --save-dev 
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//return gulp.src('./lib/*.js')</span></div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./lib/file3.js'</span>, <span class="string">'./lib/file1.js'</span>, <span class="string">'./lib/file2.js'</span>])</div><div class="line">    .pipe(concat(<span class="string">'all.js'</span>)) <span class="comment">//合并后的文件名</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-CSS小图标转码为-base64-编码"><a href="#3-CSS小图标转码为-base64-编码" class="headerlink" title="3. CSS小图标转码为 base64 编码"></a>3. CSS小图标转码为 base64 编码</h3><p><a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="external">Base64</a></p>
<blockquote>
<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。<br>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。例如迅雷的“专用地址”也是用 Base64 加密的。</p>
</blockquote>
<p>图片的 base64 编码就是可以将一副图片数据编码成一串字符串，使用该字符串代替图像地址。<br>如果图片足够小且因为用处的特殊性无法被制作成雪碧图（CssSprites），在整个网站的复用性很高且基本不会被更新，此时使用 base64 编码传输图片。（例如平铺图作为background-image）</p>
<p>图片的下载始终都要向服务器发出请求，将 CSS 中引用的小图标转码为 base64 编码的 data URI 字符串，减少额外的 http 请求数。</p>
<p><strong>显示图片的 base64 编码</strong><br>在 chrome 下新建一个窗口，然后把要转化的图片直接拖入浏览器，打开控制台，点 Source，如下图所示，点击图片，右侧就会显示该图片的 base64 编码。<a href="http://www.cnblogs.com/coco1s/p/4375774.html" target="_blank" rel="external">^foot2</a></p>
<p><strong>使用 Base64 不代表性能优化</strong><br>使用 Base64 的好处是能够减少一个图片的 HTTP 请求，代价则是 CSS 文件体积的增大，引起CRP 的阻塞。页面解析 CSS 生成的 CSSOM 时间增加。</p>
<blockquote>
<p><code>CRP（Critical Rendering Path，关键渲染路径）</code>：当浏览器从服务器接收到一个HTML页面的请求时，到屏幕上渲染出来要经过很多个步骤。浏览器完成这一系列的运行，或者说渲染出来我们常常称之为“关键渲染路径”。</p>
<p><code>CSS 对象模型 (CSSOM)</code>：CSSOM是一个建立在web页面上的 CSS 样式的映射，它和DOM类似，但是只针对CSS而不是HTML。</p>
</blockquote>
<p><a href="https://www.npmjs.com/package/gulp-base64" target="_blank" rel="external">gulp-base64</a></p>
<pre><code>$ npm install gulp-base64 --save-dev
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">var gulp = require('gulp');</div><div class="line">var base64 = require('./build/gulp-base64');</div><div class="line"></div><div class="line">//basic example</div><div class="line">gulp.task('build', function () &#123;</div><div class="line">    return gulp.src('./css/*.css')</div><div class="line">        .pipe(base64())</div><div class="line">        .pipe(concat('main.css'))</div><div class="line">        .pipe(gulp.dest('./public/css'));</div><div class="line">&#125;);</div><div class="line">...</div><div class="line">//example with options</div><div class="line">gulp.task('build', function () &#123;</div><div class="line">    return gulp.src('./css/*.css')</div><div class="line">        .pipe(base64(&#123;</div><div class="line">            baseDir: 'public',</div><div class="line">            extensions: ['svg', 'png', /\.jpg#datauri$/i],</div><div class="line">            exclude:    [/\.server\.(com|net)\/dynamic\//, '--live.jpg'],</div><div class="line">            maxImageSize: 8*1024, // bytes,</div><div class="line">            deleteAfterEncoding: false,</div><div class="line">            debug: true</div><div class="line">        &#125;))</div><div class="line">        .pipe(concat('main.css'))</div><div class="line">        .pipe(gulp.dest('./public/css'));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在 extensions 参数中可以使用正则（例如：<code>/\.jpg#datauri$/i</code>）匹配带有指定 hash 的引用文件，这样在开发过程中就可以通过在文件末尾加上对应的 hash （例如： <code>background-image: url(./images/icon.jpg#datauri);</code> ）手动指定哪些文件转码成 data URI。<a href="https://zhuanlan.zhihu.com/p/24984797?refer=web-learning" target="_blank" rel="external">^foot3</a></p>
<h3 id="4-gulp-plumber构建异常捕获-foot3"><a href="#4-gulp-plumber构建异常捕获-foot3" class="headerlink" title="4. gulp-plumber构建异常捕获^foot3"></a>4. gulp-plumber构建异常捕获<a href="https://zhuanlan.zhihu.com/p/24984797?refer=web-learning" target="_blank" rel="external">^foot3</a></h3><p><a href="https://www.npmjs.com/package/gulp-plumber" target="_blank" rel="external">gulp-plumber</a></p>
<pre><code>$ npm install gulp-plumber --save-dev
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp    = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    gutil   = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>),</div><div class="line">    babel   = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>),</div><div class="line">    concat  = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</div><div class="line">    plumber = <span class="built_in">require</span>(<span class="string">'gulp-plumber'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'build'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'./_src/js/*.js'</span>)</div><div class="line">        <span class="comment">// 最先 pipe 到 plumber 中，以便出现异常前准备捕获</span></div><div class="line">        .pipe(plumber(&#123; <span class="attr">errHandler</span>: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</div><div class="line">            gutil.beep(); <span class="comment">// 哔~ 的响一声</span></div><div class="line">            gutil.log(e); <span class="comment">// 抛出异常</span></div><div class="line">        &#125;&#125;))</div><div class="line">        .pipe(babel())</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="5-grunt-amp-gulp"><a href="#5-grunt-amp-gulp" class="headerlink" title="5. grunt&amp;gulp"></a>5. grunt&amp;gulp</h3><p>1.插件很难遵守单一责任原则。</p>
<p>2.用插件做一些本来不需要插件来做的事情。</p>
<p>3.试图用配置文件完成所有事，结果混乱不堪。</p>
<p>4.落后的流程控制产生临时文件(夹)，导致性能滞后。</p>
<p>相比之下gulp特点<br>1.构建脚本是代码而不是配置文件。</p>
<p>2.使用标准库（node.js standard library）来编写。</p>
<p>3.插件简单且只负责完成一件事</p>
<p>4.任务都以最大的并发数来执行。</p>
<p>5.输入/输出（I/O）基于“流式”。</p>
<h3 id="6-npm-scripts"><a href="#6-npm-scripts" class="headerlink" title="6. npm scripts"></a>6. npm scripts</h3><p><a href="http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part1" target="_blank" rel="external">我为何放弃Gulp与Grunt，转投npm scripts（上）</a><br><a href="http://www.infoq.com/cn/news/2016/02/gulp-grunt-npm-scripts-part3?utm_source=infoq&amp;utm_campaign=user_page&amp;utm_medium=link" target="_blank" rel="external">我为何放弃Gulp与Grunt，转投npm scripts（下）</a><br><a href="http://www.imooc.com/video/5800" target="_blank" rel="external">npm in action</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hyperledger Fabric 部署示例]]></title>
      <url>/2017/10/24/Hyperledger%20Fabric%20%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>所有参考资料贴在最后。</p>
<h3 id="1-virtualbox"><a href="#1-virtualbox" class="headerlink" title="1. virtualbox"></a>1. virtualbox</h3><p><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">下载</a></p>
<h3 id="2-ubuntu"><a href="#2-ubuntu" class="headerlink" title="2. ubuntu"></a>2. ubuntu</h3><p><a href="https://www.ubuntu.com/download/alternative-downloads" target="_blank" rel="external">下载</a></p>
<p>在虚拟机里安装ubuntu。</p>
<p><a href="http://wiki.ubuntu.org.cn/Ubuntu%E6%A1%8C%E9%9D%A2%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97#1.3.1..E2.80.83.E7.9B.AE.E5.BD.95.E5.92.8C.E6.96.87.E4.BB.B6.E7.B3.BB.E7.BB.9F" target="_blank" rel="external">Ubuntu桌面入门指南</a></p>
<p>su获取root权限。</p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocaheu2j20an05hq3c.jpg" alt="su"></p>
<h3 id="3-git"><a href="#3-git" class="headerlink" title="3. git"></a>3. git</h3><pre><code>$ apt-get update                                                            
$ apt-get install git   
</code></pre><blockquote>
<p>apt-get，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p>
</blockquote>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fktocax43nj20k70ayjtx.jpg" alt="安装git"></p>
<a id="more"></a>
<h3 id="4-go"><a href="#4-go" class="headerlink" title="4. go"></a>4. go</h3><pre><code>$ wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz   
</code></pre><blockquote>
<p><strong>wget命令</strong>用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。 <a href="http://man.linuxde.net/wget" target="_blank" rel="external">^foot1</a></p>
</blockquote>
<p> <img src="http://wx1.sinaimg.cn/large/789d050dgy1fktocbcbe8j20ka08h0u5.jpg" alt="安装go"></p>
<pre><code>$ tar -C /usr/local -xzf go1.8.linux-amd64.tar.gz 
</code></pre><blockquote>
<p><strong>tar命令</strong>是Unix/Linux系统中备份文件的可靠方法，几乎可以工作于任何环境中，它的使用权限是所有用户。<br>-c 创建新的档案文件。<br>-x 从档案文件中释放文件。<br>-z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压缩。<br>-f 使用档案文件或设备，这个选项通常是必选的。</p>
</blockquote>
<p>go环境变量配置    </p>
<pre><code>$ vi /etc/profile                                                   
</code></pre><p>追加内容   </p>
<pre><code>export GOROOT=/usr/local/go                                                
export PATH=$PATH:$GOROOT/bin                                            
$ source /etc/profile    
</code></pre><p><a href="http://blog.csdn.net/wanlixingzhe/article/details/27963379" target="_blank" rel="external">vi命令使用方法</a></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocbru3wj20cn0cbdga.jpg" alt="配置go环境变量"></p>
<h3 id="5-pipe"><a href="#5-pipe" class="headerlink" title="5. pipe"></a>5. pipe</h3><pre><code>$ apt-get install python-pip
</code></pre><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fktoccawauj20k609stao.jpg" alt="安装pipe"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocd89l4j20k50c90va.jpg" alt="更新pipe"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocdn84vj20k704swf2.jpg" alt="更新pipe2"></p>
<h3 id="6-Docker"><a href="#6-Docker" class="headerlink" title="6. Docker"></a>6. Docker</h3><p>Docker版本</p>
<ul>
<li><strong>Docker Enterprise Edition (Docker EE)</strong> 专为企业开发和IT团队设计，用于在大规模生产中构建，运送和运行关键业务应用程序。Docker EE集成，认证和支持，为企业提供业界最安全的容器平台，使所有应用程序现代化。</li>
<li><strong>Docker Community Edition (Docker CE)</strong> 是开发人员和小团队的理想选择，希望开始使用Docker并尝试基于容器的应用程序。Docker CE可在许多平台上使用，从桌面到云到服务器。</li>
</ul>
<p><a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-repository" target="_blank" rel="external">官方安装文档</a></p>
<ol>
<li><p>Update the apt package index:<br> 更新apt包索引</p>
<pre><code>$ apt-get update   
</code></pre></li>
<li><p>Install packages to allow apt to use a repository over HTTPS:<br>配置apt允许以 HTTPS方式拉取镜像安装</p>
<pre><code>$ apt-get install \                                                        
    apt-transport-https \                                                
    ca-certificates \                                                    
    curl \                                                                
    software-properties-common       
</code></pre></li>
<li><p>Add Docker’s official GPG key:<br> 添加Docker仓库的GPG密钥</p>
<pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -      
</code></pre></li>
<li><p>校验key<code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>.</p>
<pre><code>$ sudo apt-key fingerprint 0EBFCD88

pub   4096R/0EBFCD88 20xx-xx-xx
Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;
sub   4096R/F273FCD8 20xx-xx-xx
</code></pre></li>
<li><p>Use the following command to set up the stable repository.<br> 配置稳定镜像</p>
<pre><code>$ sudo add-apt-repository \
    &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable&quot;
</code></pre></li>
<li><p>安装DOCKER CE</p>
<pre><code>$ sudo apt-get update

$ apt-get install docker-ce  
</code></pre><p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktoch90ncj20hn01yglt.jpg" alt="docker version"></p>
</li>
<li><p>测试</p>
<pre><code>$ docker run hello-world
</code></pre><p> <img src="http://wx2.sinaimg.cn/large/789d050dgy1fktoccr4mjj20kc0b7gmz.jpg" alt="测试docker"></p>
</li>
</ol>
<h3 id="7-Docker-compose"><a href="#7-Docker-compose" class="headerlink" title="7. Docker-compose"></a>7. Docker-compose</h3><blockquote>
<p><strong>编排（orchestration）</strong>，指自动配置、协作和管理服务的过程，在 Docker 中，编排用来描述一组实践过程，这个过程会管理运行在多个 Docker 里的应用，这些 Docker 容器也可能运行在不同的宿主机上。</p>
<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. </p>
<p>Docker 编排工具 Docker Compose ，由 Python 编写。使用 Docker Compose ，可以用一个 YAML 文件定义一组要启动的容器，以及容器运行时的属性。Docker Compose 称这些容器为“服务”：容器通过某些方法并制定一些运行时的属性来和其他容器产生交互。</p>
</blockquote>
<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">官方安装文档</a></p>
<pre><code>$ pip install docker-compose
</code></pre><h3 id="8-部署fabric项目"><a href="#8-部署fabric项目" class="headerlink" title="8. 部署fabric项目"></a>8. 部署fabric项目</h3><p>选择的示例<a href="https://github.com/hyperledger/fabric/tree/v1.0.0-preview/examples/sfhackfest" target="_blank" rel="external">sfhackfest</a></p>
<ol>
<li><p>创建项目目录</p>
<pre><code>$ mkdir -p /opt/workspace/hackfest                                        
$ cd /opt/workspace/hackfest   
</code></pre><blockquote>
<p>参数：-p 确保目录名称存在，如果目录不存在的就新创建一个。</p>
</blockquote>
</li>
<li><p>下载示例</p>
<pre><code>$ curl -L https://github.com/hyperledger/fabric/raw/v1.0.0-preview/examples/sfhackfest/sfhackfest.tar.gz -o sfhackfest.tar.gz 2&gt; /dev/null; tar -xvf sfhackfest.tar.gz
</code></pre><p> 下载并解压缩部署Fabric网络的相关组件 ，包括Docker Compose 脚本, 通道创建/加入脚本, 认证使用的加密要素等</p>
<blockquote>
<p>ls 显示所有文件<br>ls -1 显示所有文件（按行显示）<br>ls -l 显示所有文件具体信息<br>树形结构apt-get install tree<br>tree 以树状图显示所有文件</p>
</blockquote>
<p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktocdzjtkj20k801o0su.jpg" alt="下载示例"></p>
<p> <img src="http://wx1.sinaimg.cn/large/789d050dgy1fktocee55aj20dt0erq3v.jpg" alt="文件结构"></p>
<p> <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktoceu593j20hw0gpab2.jpg" alt="文件结构"></p>
</li>
<li><p>使用Docker下载示例镜像</p>
<pre><code>$ docker-compose build
</code></pre><p> 通过执行docker-compose命令， fabric-peer, fabric-orderer, fabric-ca和 cli 都会自动下载、解压缩相关的镜像。</p>
<p> <img src="http://wx2.sinaimg.cn/large/789d050dgy1fktocforbmj20k505omy1.jpg" alt="docker images"></p>
</li>
<li><p>创建fabric网络</p>
<pre><code>$ docker-compose up
</code></pre><p> 通过Docker-compose构建Fabric网络,创建channel(账本), 将Peer节点加入channel</p>
</li>
</ol>
<ol>
<li><p>查看容器</p>
<pre><code>$ docker ps
</code></pre><p>6个Docker容器，3个peer、一个order、一个cli、一个ca。</p>
<p> 嵌入在docker-compose.yml里的channel_test.sh会在CLI容器里执行创建channel和加入channel命令。执行结束，应该只有一个Fabric网络和一个channel，channel包含三个节点peer0，Peer1，Peer2。</p>
</li>
<li><p>进入客户端</p>
<p> 确保channel已创建，并且peers都成功加入</p>
<pre><code>$ docker exec -it cli bash
</code></pre><p>$ more results.txt</p>
<p> 查看结果也可用 </p>
<pre><code>$ cat results.txt
</code></pre></li>
</ol>
<pre><code>&gt; cat主要有三大功能：
1.一次显示整个文件。`$ cat filename`
2.从键盘创建一个文件。`$ cat &gt; filename  `只能创建新文件,不能编辑已有文件.
3.将几个文件合并为一个文件：` $cat file1 file2 &gt; file`
</code></pre><ol>
<li><p>验证创世块</p>
<pre><code>$ ls -ltr myc1.block
</code></pre><p> <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktochvwfwj20sb0c040g.jpg" alt="查看容器内容"></p>
</li>
</ol>
<h3 id="9-资产转移测试"><a href="#9-资产转移测试" class="headerlink" title="9. 资产转移测试"></a>9. 资产转移测试</h3><ol>
<li><p>进入cli容器</p>
<pre><code>$ docker exec -it cli bash
</code></pre><p> <img src="http://wx2.sinaimg.cn/large/789d050dgy1fktocihtg9j20ke04gt9a.jpg" alt="进入cli容器"></p>
</li>
<li><p>发送createChannel API 给 Orderer</p>
<pre><code>$ CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050   
</code></pre></li>
</ol>
<ol>
<li><p>创建新myc2.block</p>
<pre><code>$ peer channel create -c myc2
</code></pre><p> <img src="http://wx1.sinaimg.cn/large/789d050dgy1fktocjg1u6j20kd09xq5g.jpg" alt="创建myc2.block"></p>
<p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktock5fqfj20kc0c70wq.jpg" alt="查看myc2.block"></p>
</li>
<li><p>将channel分别加入到3个peer</p>
<pre><code>$ CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 CORE_PEER_ADDRESS=peer0:7051 peer channel join -b myc2.block
$ CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 CORE_PEER_ADDRESS=peer1:7051 peer channel join -b myc2.block
$ CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 CORE_PEER_ADDRESS=peer2:7051 peer channel join -b myc2.block
</code></pre><p> 执行加入channel的指令，把创世块作为参数发送joinchannel API给 peer。</p>
<p> 全部Peer节点都加入通道，可以查询账本而无需在每个节点都部署智能合约。</p>
<p> <img src="http://wx2.sinaimg.cn/large/789d050dgy1fktockpv3qj20kh0c6gox.jpg" alt="将通道加入节点"></p>
</li>
</ol>
<ol>
<li><p>运行部署命令</p>
<p> 部署chaincode，初始化资产a，b的值分别为100，200</p>
<pre><code>$ CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 peer chaincode deploy -C myc2 -n mycc -p github.com/hyperledger/fabric/examples -c &apos;{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]}&apos;
</code></pre><p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktoclaghuj20ka0233yr.jpg" alt="初始化ab资产"></p>
</li>
<li><p>运行调用命令</p>
<p> 调用invoke命令，资产a向b转移10单位数据</p>
<pre><code>$ CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 peer chaincode invoke -C myc2 -n mycc -c &apos;{&quot;function&quot;:&quot;invoke&quot;,&quot;Args&quot;:[&quot;move&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}&apos;
</code></pre><p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktoclwopqj20k901qjrm.jpg" alt="资产转移"></p>
</li>
<li><p>运行查询命令</p>
<pre><code>$ CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 peer chaincode query -C myc2 -n mycc -c &apos;{&quot;function&quot;:&quot;invoke&quot;,&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&apos;
</code></pre><p> <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocml5jrj20kc0c4n0k.jpg" alt="查询a"></p>
<p>  <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocnjfxfj20kf0c8q5n.jpg" alt="资产转移结果a"></p>
<pre><code>$ CORE_PEER_ADDRESS=peer0:7051 CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer:7050 peer chaincode query -C myc2 -n mycc -c &apos;{&quot;function&quot;:&quot;invoke&quot;,&quot;Args&quot;:[&quot;query&quot;,&quot;b&quot;]}&apos;
</code></pre><p>  <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocnwpqbj20k901oweo.jpg" alt="查询b"></p>
<p>  <img src="http://wx3.sinaimg.cn/large/789d050dgy1fktocobjblj20k90bcjtv.jpg" alt="资产转移结果b"></p>
</li>
<li><p>清理容器</p>
<pre><code>$ docker-compose -f docker-compos.yml down
</code></pre><p> <img src="http://wx4.sinaimg.cn/large/789d050dgy1fktocot62zj20ju08k3zl.jpg" alt="清理容器"></p>
</li>
<li><p>退出容器</p>
<p> exit命令退出CLI容器。</p>
</li>
</ol>
<h3 id="10-参考资料"><a href="#10-参考资料" class="headerlink" title="10. 参考资料"></a>10. 参考资料</h3><p><a href="http://hyperledger-fabric.readthedocs.io/en/latest/getting_started.html" target="_blank" rel="external">官方文档</a><br><a href="https://www.ibm.com/developerworks/cn/cloud/library/cl-ibm-blockchain-101-quick-start-guide-for-developers-bluemix-trs/index.html" target="_blank" rel="external">IBM Blockchain 101：开发人员快速入门指南</a><br><a href="https://zhuanlan.zhihu.com/p/25070745" target="_blank" rel="external">Hyperledger Fabric V1.0– 开发者快速入门</a><br><a href="https://segmentfault.com/a/1190000009072224" target="_blank" rel="external">Hyperledger Fabric V1.0 环境搭建</a><br><a href="https://github.com/hyperledger/fabric/tree/v1.0.0-preview" target="_blank" rel="external">hyperledger fabric Read-only mirror</a><br><a href="https://www.kancloud.cn/runningday/fabric/257842" target="_blank" rel="external">Fabric底层开发环境搭建</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GULP学习（二）项目构建]]></title>
      <url>/2017/10/15/GULP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>内容基本整理于<a href="https://github.com/nimojs/gulp-book/blob/master/chapter7.md" target="_blank" rel="external">gulp-book chapter7</a>，我有一点增改。</p>
<h3 id="1-初始安装"><a href="#1-初始安装" class="headerlink" title="1. 初始安装"></a>1. 初始安装</h3><pre><code>npm init
</code></pre><p>创建<code>package.json</code>保存所有<code>npm install --save-dev gulp-xxx</code>模块依赖和模块版本。</p>
<pre><code>npm install gulp --save-dev
</code></pre><p>安装gulp到项目<br><code>package.json</code>中增加下列代码，声明此项目的开发依赖 gulp。</p>
<pre><code>&quot;devDependencies&quot;: {
&quot;gulp&quot;: &quot;^3.9.1&quot;
}
</code></pre><p>安装项目中用到的其他模块<br>例如</p>
<pre><code>npm install gulp-uglify  --save-dev
</code></pre><p><code>package.json</code>的”devDependencies”中继续增加依赖声明。</p>
<p>在<code>gulpfile.js</code>已配置情况下直接输入<code>npm install</code>命令即可检测<code>package.json</code>中的 “devDependencies”并安装所有依赖。</p>
<a id="more"></a>
<h3 id="2-设计目录结构"><a href="#2-设计目录结构" class="headerlink" title="2. 设计目录结构"></a>2. 设计目录结构</h3><p><code>src</code>源码存放目录<br><code>dist</code>编译压缩后的文件存放目录</p>
<p><code>dist</code>和<code>dest</code>区别<a href="https://www.zhihu.com/question/29199796/answer/82862432" target="_blank" rel="external">^foot</a>：<br>dist是指distribution——分配,分发——发布完成的文件夹一般命名dist<br>dest则是destination——目的地,终点——用于grunt文件路径相关的配置项，一般会和src配对出现。比如文件压缩插件：压缩源（src）文件，生成压缩包到（dest）。</p>
<h3 id="3-用gulp-util设置-CLI-输出文字的颜色"><a href="#3-用gulp-util设置-CLI-输出文字的颜色" class="headerlink" title="3. 用gulp-util设置 CLI 输出文字的颜色"></a>3. 用gulp-util设置 CLI 输出文字的颜色</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp 和 gulp-util 模块</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"></div><div class="line"><span class="comment">//使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">//colors Is an instance of chalk.The default gulp coloring using gutil.colors.</span></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//log 日志输出</span></div><div class="line">    gutil.log(<span class="string">'message'</span>)</div><div class="line">    <span class="comment">// Compose multiple styles using the chainable API</span></div><div class="line">    gutil.log(gutil.colors.red.bgBlue.bold(<span class="string">'error'</span>))</div><div class="line">    <span class="comment">// Combine styled and normal strings</span></div><div class="line">    gutil.log(gutil.colors.green(<span class="string">'message:'</span>) + <span class="string">"some"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>经过测试rgb颜色不支持。<br><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbilgnhsj20j008a74o.jpg" alt="cli输出颜色"></p>
<h3 id="4-配置-JS-任务"><a href="#4-配置-JS-任务" class="headerlink" title="4. 配置 JS 任务"></a>4. 配置 JS 任务</h3><ol>
<li><p>glob</p>
<p><strong>glob模式</strong>是指 shell 所使用的简化了的正则表达式。nodejs的glob模块是glob模式的javascript实现版本。</p>
<p><a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">node-glob</a></p>
<p>匹配规则 <a href="http://www.jianshu.com/p/ce7cf53274bb" target="_blank" rel="external">^foot2</a></p>
<blockquote>
<p><code>*</code>匹配任意 0 或多个任意字符<br><code>?</code>匹配任意一个字符<br><code>[...]</code>若字符在中括号中，则匹配。若以 <code>!</code> 或<code>^</code>开头，若字符不在中括号中，则匹配 <code>!(pattern|pattern|pattern)</code> 不满足括号中的所有模式则匹配<br><code>?(pattern|pattern|pattern)</code>满足 0 或 1 括号中的模式则匹配<br><code>+(pattern|pattern|pattern)</code> 满足 1 或 更多括号中的模式则匹配 <code>*(a|b|c)</code> 满足 0 或 更多括号中的模式则匹配<br><code>@(pattern|pat*|pat?erN)</code> 满足 1 个括号中的模式则匹配 <code>**</code> 跨路径匹配任意字符</p>
</blockquote>
</li>
<li><p>gulp-uglify 压缩js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//选则 src/js 目录下的所有 js 文件</span></div><div class="line">    gulp.src(<span class="string">'src/js/**/*.js'</span>)</div><div class="line">        <span class="comment">//压缩</span></div><div class="line">        .pipe(uglify())</div><div class="line">        <span class="comment">//将压缩后的文件输出到 dist/js 目录下</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//当 gulp.watch 检测到 src/js/ 目录下的js文件有修改时会将所有文件全部编译。</span></div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, [<span class="string">'uglifyjs'</span>])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>编辑 `src/js/log.js` 文件并保存，命令行更新，表示检测到 `src/js/**/*.js` 文件修改后重新编译所有 js。
![gulp-uglifyjs][4]
</code></pre><ol>
<li><p>gulp-watch-path</p>
<pre><code>gulp.watch(glob[, opts], tasks)
gulp.watch(glob[, opts, cb])
</code></pre><p>监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。详见<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">API</a>。</p>
<p><code>gulp.watch</code> 第二个参数为 <code>function</code> 时的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event);</div><div class="line">    <span class="comment">/*</span></div><div class="line">	当修改 src/js/log.js 文件时</div><div class="line">    event &#123;</div><div class="line">		// 发生改变的类型，不管是添加，改变或是删除</div><div class="line">        type: 'changed', </div><div class="line">		// 触发事件的文件路径</div><div class="line">        path: '/Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js'</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>[gulp-watch-path][6]
</code></pre><p>This is for the expansion of the gulp.watch(event)</p>
<pre><code>利用 `gulp-watch-path` 配合 `event`(检测当前修改的js文件) 获取编译路径和输出路径:

**`watchPath(event, search, replace, distExt)`**

| 参数 | 说明 |
|--------|--------|
|    event    |`gulp.watch` 回调函数的 `event`|
|    search   |需要被替换的起始字符串|
|    replace  |第三个参数是新的的字符串|
|   distExt   |扩展名(非必填)|

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        paths</div><div class="line">            &#123; srcPath: 'src/js/log.js',</div><div class="line">              srcDir: 'src/js/',</div><div class="line">              distPath: 'dist/js/log.js',</div><div class="line">              distDir: 'dist/js/',</div><div class="line">              srcFilename: 'log.js',</div><div class="line">              distFilename: 'log.js' &#125;</div><div class="line">        */</div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>])</div></pre></td></tr></table></figure>


![gulp watchjs][7]
</code></pre><ol>
<li><p>stream-combiner2 捕获错误信息</p>
<p><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md" target="_blank" rel="external">Combining streams to handle errors</a></p>
<p>By using stream-combiner2 you can turn a series of streams into a single stream, meaning you only need to listen to the error event in one place in your code.</p>
<p><a href="https://github.com/substack/stream-combiner2" target="_blank" rel="external">stream-combiner2</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">    gulp.src(<span class="string">'bootstrap/js/*.js'</span>),</div><div class="line">    uglify(),</div><div class="line">    gulp.dest(<span class="string">'public/bootstrap'</span>)</div><div class="line">  ]);</div><div class="line"></div><div class="line">  <span class="comment">// any errors in the above streams will get caught</span></div><div class="line">  <span class="comment">// by this listener, instead of being thrown:</span></div><div class="line">  combined.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</div><div class="line"></div><div class="line">  <span class="keyword">return</span> combined;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> handleError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> colors = gutil.colors;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</div><div class="line">    gutil.log(colors.red(<span class="string">'Error!'</span>))</div><div class="line">    gutil.log(<span class="string">'fileName: '</span> + colors.red(err.fileName))</div><div class="line">    gutil.log(<span class="string">'lineNumber: '</span> + colors.red(err.lineNumber))</div><div class="line">    gutil.log(<span class="string">'message: '</span> + err.message)</div><div class="line">    gutil.log(<span class="string">'plugin: '</span> + colors.yellow(err.plugin))</div><div class="line">&#125;</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            uglify(),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line"></div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>])</div></pre></td></tr></table></figure>

![捕获错误信息][10]
</code></pre><ol>
<li><p>使用 SourceMap 进行压缩代码调试</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>)</div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> handleError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> colors = gutil.colors;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</div><div class="line">    gutil.log(colors.red(<span class="string">'Error!'</span>))</div><div class="line">    gutil.log(<span class="string">'fileName: '</span> + colors.red(err.fileName))</div><div class="line">    gutil.log(<span class="string">'lineNumber: '</span> + colors.red(err.lineNumber))</div><div class="line">    gutil.log(<span class="string">'message: '</span> + err.message)</div><div class="line">    gutil.log(<span class="string">'plugin: '</span> + colors.yellow(err.plugin))</div><div class="line">&#125;</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        </div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            sourcemaps.init(),</div><div class="line">            uglify(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line"></div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>])</div></pre></td></tr></table></figure>
<p>生成对应的 .map 文件，可在浏览器中调试。</p>
<p><code>gulp-uglifyjs</code>压缩所有js文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">        gulp.src(<span class="string">'src/js/**/*.js'</span>),</div><div class="line">        sourcemaps.init(),</div><div class="line">        uglify(),</div><div class="line">        sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">        gulp.dest(<span class="string">'dist/js/'</span>)</div><div class="line">    ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-配置-CSS-任务"><a href="#5-配置-CSS-任务" class="headerlink" title="5. 配置 CSS 任务"></a>5. 配置 CSS 任务</h3><ol>
<li><p>gulp-clean-css<br>同js压缩。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(cleancss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>,<span class="string">'watchcss'</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>gulp-autoprefixer<br>autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里。<br><a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">    <span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</div><div class="line"></div><div class="line">    gulp.task(<span class="string">'default'</span>, () =&gt;</div><div class="line">	    gulp.src(<span class="string">'src/app.css'</span>)</div><div class="line">		.pipe(autoprefixer(&#123;</div><div class="line">			    <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>],</div><div class="line">			    <span class="attr">cascade</span>: <span class="literal">false</span></div><div class="line">	  	&#125;))</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(cleancss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>

![添加浏览器前缀][12]
</code></pre><ol>
<li><p><code>gulp-clean-css</code>压缩所有css文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'cleanCss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(cleancss())</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbinevlrj206p061745.jpg" alt="gulp sourcemaps"></p>
</li>
</ol>
<h3 id="6-配置-Less-任务"><a href="#6-配置-Less-任务" class="headerlink" title="6. 配置 Less 任务"></a>6. 配置 Less 任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchless'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/less/**/*.less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/less/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            cleancss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'lesscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(<span class="string">'src/less/**/*.less'</span>),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            cleancss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(<span class="string">'dist/css/'</span>)</div><div class="line">        ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>])</div></pre></td></tr></table></figure>
<h3 id="7-配置-Sass-任务"><a href="#7-配置-Sass-任务" class="headerlink" title="7. 配置 Sass 任务"></a>7. 配置 Sass 任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchsass'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/sass/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/sass/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        sass(paths.srcPath)</div><div class="line">            .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">            &#125;)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(cleancss())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'sasscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        sass(<span class="string">'src/sass/'</span>)</div><div class="line">        .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">        &#125;)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(cleancss())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchsass'</span>])</div></pre></td></tr></table></figure>
<h3 id="8-配置-image-任务"><a href="#8-配置-image-任务" class="headerlink" title="8. 配置 image 任务"></a>8. 配置 image 任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchimage'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/images/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(imagemin(&#123;</div><div class="line">                <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="9-配置文件复制任务"><a href="#9-配置文件复制任务" class="headerlink" title="9. 配置文件复制任务"></a>9. 配置文件复制任务</h3><p>复制 <code>src/fonts/</code> 文件到 <code>dist/</code> 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcopy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchimage'</span>, <span class="string">'watchcopy'</span>])</div></pre></td></tr></table></figure>
<h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// gutil.log gutil.colors</span></div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"><span class="comment">// 压缩js</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"><span class="comment">// 获取编译路径和输出路径</span></div><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"><span class="comment">// stream-combiner2 捕获错误信息</span></div><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>)</div><div class="line"><span class="comment">// 使用 SourceMap 进行压缩代码调试</span></div><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>)</div><div class="line"><span class="comment">// 获取 clean-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</div><div class="line"><span class="comment">// 获取 gulp-autoprefixer 模块</span></div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</div><div class="line"><span class="comment">// 获取 gulp-less 模块</span></div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"><span class="comment">// 获取 gulp-ruby-sass 模块</span></div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>)</div><div class="line"><span class="comment">// 获取 gulp-imagemin 模块</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line"><span class="comment">//cli错误信息输出颜色</span></div><div class="line"><span class="keyword">var</span> handleError = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> colors = gutil.colors;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</div><div class="line">  gutil.log(colors.red(<span class="string">'Error!'</span>))</div><div class="line">  gutil.log(<span class="string">'fileName: '</span>+ colors.red(err.fileName))</div><div class="line">  gutil.log(<span class="string">'lineNumber: '</span>+ colors.red(err.lineNumber))</div><div class="line">  gutil.log(<span class="string">'message: '</span>+ err.message)</div><div class="line">  gutil.log(<span class="string">'plugin: '</span>+ colors.yellow(err.plugin))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// gulp.watch('js/**/*.js', function(event) &#123;</span></div><div class="line"><span class="comment">// console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"><span class="comment">//watchjs压缩有修改的js文件</span></div><div class="line">gulp.task(<span class="string">'watchjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/js/**/*.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">    gutil.log(gutil.colors.green(event.type)+ <span class="string">' '</span>+ paths.srcPath)</div><div class="line">    gutil.log(<span class="string">'Dist '</span>+ paths.distPath)</div><div class="line"></div><div class="line">    <span class="comment">//   gulp.src('paths.srcPath')</span></div><div class="line">    <span class="comment">//     .pipe(uglify())</span></div><div class="line">    <span class="comment">//     .pipe(gulp.dest('paths.distDir'))</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">      gulp.src(<span class="string">'paths.srcPath'</span>),</div><div class="line">        sourcemaps.init(), <span class="comment">//sourcemaps第一句</span></div><div class="line">        uglify(),</div><div class="line">        sourcemaps.write(<span class="string">'./'</span>),<span class="comment">//sourcemaps第二句</span></div><div class="line">        gulp.dest(<span class="string">'paths.distDir'</span>)</div><div class="line">    ])</div><div class="line">    combined.on(<span class="string">'error'</span>,handleError)</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// gulp.task('uglifyjs', function() &#123;</span></div><div class="line"><span class="comment">//     gulp.src('src/js/**/*.js')</span></div><div class="line"><span class="comment">//         .pipe(uglify())</span></div><div class="line"><span class="comment">//         .pipe(gulp.dest('dist/js'))</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"><span class="comment">// gulp.task('auto',function()&#123;</span></div><div class="line"><span class="comment">//   gulp.watch('src/js/**/*.js',['uglifyjs'])</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"><span class="comment">// gulp.task('default',['uglifyjs','auto'])</span></div><div class="line"></div><div class="line"><span class="comment">//uglifyjs压缩所有js文件</span></div><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">    gulp.src(<span class="string">'src/js/**/*.js'</span>),</div><div class="line">      sourcemaps.init(), <span class="comment">//sourcemaps第一句</span></div><div class="line">      uglify(),</div><div class="line">      sourcemaps.write(<span class="string">'./'</span>),<span class="comment">//sourcemaps第二句</span></div><div class="line">      gulp.dest(<span class="string">'dist/js/'</span>)</div><div class="line">  ])</div><div class="line">  combined.on(<span class="string">'error'</span>,handleError)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//watchcss压缩有修改的css文件</span></div><div class="line">gulp.task(<span class="string">'watchcss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/css/**/*.css'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">    gutil.log(gutil.colors.green(event.type)+ <span class="string">' '</span>+ paths.srcPath)</div><div class="line">    gutil.log(<span class="string">'Dist '</span>+ paths.distPath)</div><div class="line"></div><div class="line">      gulp.src(<span class="string">'paths.srcPath'</span>)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        <span class="comment">// autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里</span></div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line"></div><div class="line">        .pipe(cleancss())</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'paths.distDir'</span>))</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//cleanCss压缩所有css文件</span></div><div class="line">gulp.task(<span class="string">'cleanCss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">    .pipe(sourcemaps.init())</div><div class="line">    <span class="comment">// autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里</span></div><div class="line">    .pipe(autoprefixer(&#123;</div><div class="line">      <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">    &#125;))</div><div class="line"></div><div class="line">    .pipe(cleancss())</div><div class="line">    .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//watchless压缩有修改的less文件</span></div><div class="line">gulp.task(<span class="string">'watchless'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/less/**/*.less'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/less/'</span>,<span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">    gutil.log(gutil.colors.green(event.type)+ <span class="string">' '</span>+ paths.srcPath)</div><div class="line">    gutil.log(<span class="string">'Dist '</span>+ paths.distPath)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">      gulp.src(<span class="string">'paths.srcPath'</span>),</div><div class="line">        sourcemaps.init(),</div><div class="line">        autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;),</div><div class="line">        less(),</div><div class="line">        cleancss(),</div><div class="line">        sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">        gulp.dest(<span class="string">'paths.distDir'</span>)</div><div class="line">    ])</div><div class="line">    combined.on(<span class="string">'error'</span>,handleError)</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//lesscss压缩所有less文件</span></div><div class="line">gulp.task(<span class="string">'lesscss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">    gulp.src(<span class="string">'src/less/**/*.less'</span>),</div><div class="line">      sourcemaps.init(),</div><div class="line">      autoprefixer(&#123;</div><div class="line">        <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">      &#125;),</div><div class="line">      less(),</div><div class="line">      cleancss(),</div><div class="line">      sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">      gulp.dest(<span class="string">'dist/css/'</span>)</div><div class="line">  ])</div><div class="line">  combined.on(<span class="string">'error'</span>,handleError)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//watchsass压缩有修改的css文件</span></div><div class="line"><span class="comment">// gulp.task('sass', function() &#123;</span></div><div class="line"><span class="comment">//     return sass('sass/')</span></div><div class="line"><span class="comment">//     .on('error', function (err) &#123;</span></div><div class="line"><span class="comment">//       console.error('Error!', err.message);</span></div><div class="line"><span class="comment">//    &#125;)</span></div><div class="line"><span class="comment">//     .pipe(gulp.dest('dist/css'))</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line">gulp.task(<span class="string">'watchsass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/sass/**/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/sass/'</span>,<span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">    gutil.log(gutil.colors.green(event.type)+ <span class="string">' '</span>+ paths.srcPath)</div><div class="line">    gutil.log(<span class="string">'Dist '</span>+ paths.distPath)</div><div class="line"></div><div class="line">      sass(<span class="string">'paths.srcPath'</span>)</div><div class="line">        .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(cleancss())</div><div class="line">        <span class="comment">// autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里</span></div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'paths.distDir'</span>))</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//sasscss压缩所有sass文件</span></div><div class="line">gulp.task(<span class="string">'sasscss'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  sass(<span class="string">'src/sass/'</span>)</div><div class="line">  .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">  &#125;)</div><div class="line">    .pipe(sourcemaps.init())</div><div class="line">    .pipe(cleancss())</div><div class="line">    <span class="comment">// autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里</span></div><div class="line">    .pipe(autoprefixer(&#123;</div><div class="line">      <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//watchimage压缩有修改的image文件</span></div><div class="line"><span class="comment">// gulp.task('images', function () &#123;</span></div><div class="line"><span class="comment">//     // 1. 找到图片</span></div><div class="line"><span class="comment">//     gulp.src('images/*.*')</span></div><div class="line"><span class="comment">//     // 2. 压缩图片</span></div><div class="line">        <span class="comment">// .pipe(imagemin(&#123;</span></div><div class="line">        <span class="comment">//     progressive: true</span></div><div class="line">        <span class="comment">//     //无损压缩jpg图片</span></div><div class="line">        <span class="comment">// &#125;))</span></div><div class="line"><span class="comment">//     // 3. 另存图片</span></div><div class="line"><span class="comment">//         .pipe(gulp.dest('dist/images'))</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line">gulp.task(<span class="string">'watchimage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">    gutil.log(gutil.colors.green(event.type)+ <span class="string">' '</span>+ paths.srcPath)</div><div class="line">    gutil.log(<span class="string">'Dist '</span>+ paths.distPath)</div><div class="line"></div><div class="line">      gulp.src(<span class="string">'paths.srcPath'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">            <span class="comment">//无损压缩jpg图片</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'paths.distDir'</span>))</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//image压缩所有image文件</span></div><div class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">  .pipe(imagemin(&#123;</div><div class="line">      <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">      <span class="comment">//无损压缩jpg图片</span></div><div class="line">  &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/images/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//watchcopy复制src/fonts/内有修改的文件</span></div><div class="line">gulp.task(<span class="string">'watchcopy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//copy复制src/fonts/内所有文件</span></div><div class="line">gulp.task(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [</div><div class="line">    <span class="string">'uglifyjs'</span>, <span class="string">'cleanCss'</span>, <span class="string">'lesscss'</span>, <span class="string">'sasscss'</span>, <span class="string">'image'</span>, <span class="string">'copy'</span>,</div><div class="line">    <span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchimage'</span>, <span class="string">'watchcopy'</span></div><div class="line">    ]</div><div class="line">)</div></pre></td></tr></table></figure>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbio7uifj20kp0h7wfm.jpg" alt="编译全部"></p>
<p>周末学习了gulp，最后把学习过的代码完整地打了一遍，调试了一会就全部编译成功了。也终于感觉到了gulp作为构建工具的方便快捷。楽しい！<br>今天再看看相关的扩展和别人的经验总结~</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GULP学习（一）安装&功能]]></title>
      <url>/2017/10/14/GULP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85&amp;%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>学习ES6的项目中用到了gulp-babel编译ES6代码，还有gulp-browserify等，所以学习一下gulp。 </p>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文官网</a>写着gulp是增强工作流程的自动化构建工具。<br>通过编写gulp配置代码，能让gulp自动执行前端开发中的重复工作。<br>Gulp通过流和代码优于配置策略来尽量简化任务编写的工作。</p>
<blockquote>
<p>根据gulp的文档，它努力实现的<strong>主要特性</strong>是：<a href="http://www.infoq.com/cn/news/2014/02/gulp" target="_blank" rel="external">^footnote</a><br><strong>易于使用</strong>：采用代码优于配置策略，gulp让简单的事情继续简单，复杂的任务变得可管理。<br><strong>高效</strong>：通过利用node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。<br><strong>高质量</strong>：gulp严格的插件指导方针，确保插件简单并且按你期望的方式工作。<br><strong>易于学习</strong>：通过把API降到最少，你能在很短的时间内学会gulp。构建工作就像你设想的一样：是一系列流管道。</p>
</blockquote>
<p>gulp相比于grunt，配置更简洁运行速度更快<a href="https://segmentfault.com/q/1010000003951849/a-1020000003952258" target="_blank" rel="external">^footnote2</a>。</p>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ol>
<li><p>gulp基于node实现，需要先安装node。我在装atom前已经装好啦。</p>
</li>
<li><p>使用管理员权限全局安装</p>
<pre><code>$ sudo npm install -g gulp
</code></pre><p> 检查一下</p>
<pre><code>$ gulp -v
</code></pre></li>
</ol>
<h3 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3.创建项目"></a>3.创建项目</h3><p>所有的 gulp 代码编写都可以看做是将规律转化为代码的过程。</p>
<pre><code>$ npm init

$ npm install gulp --save-dev
</code></pre><p><code>--save-dev</code>保存配置信息至 package.json 的 devDependencies 节点。<br><img src="http://wx1.sinaimg.cn/large/789d050dgy1fkjbiggti1j20km0cb0tg.jpg" alt="npm install gulp --save-dev"></p>
<a id="more"></a>
<h3 id="4-使用-gulp-压缩-JS"><a href="#4-使用-gulp-压缩-JS" class="headerlink" title="4.使用 gulp 压缩 JS"></a>4.使用 gulp 压缩 JS</h3><p>接下来的操作都根据参考中的gulp-book进行。</p>
<p><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">Minify files with UglifyJS</a></p>
<p>gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// require() 是 node （CommonJS）中获取模块的语法。在 gulp 中你只需要理解 require() 可以获取模块。</span></div><div class="line"></div><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//实现gulp 压缩 js 文件的自动化代码编写</span></div><div class="line"><span class="comment">//没有命令可以运行 gulp.watch()，需要将 gulp.watch() 包含在一个任务中。</span></div><div class="line"><span class="comment">//在命令行使用 gulp auto 启动此任务,自动监听 js/*.js 文件的修改后压缩js。</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'script'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbigwia7j20km0cbq3k.jpg" alt="gulp-script"><br><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbihan5zj20kj0cft9a.jpg" alt="gulp-uglify"><br><img src="http://wx3.sinaimg.cn/large/789d050dgy1fkjbihqhzgj20k202rjrd.jpg" alt="gulp-script"><br><img src="http://wx2.sinaimg.cn/large/789d050dgy1fkjbii7429j20ko036t8p.jpg" alt="gulp-auto"></p>
<p><a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">官方API文档</a></p>
<ul>
<li><p><code>gulp.task(name, fn)</code> - 定义任务，name是任务名，fn是任务内容。<br>fn该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：</p>
<pre><code>gulp.src().pipe(someplugin())。
</code></pre><p><code>gulp.task(name[, deps], fn)</code>一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   gulp.task(<span class="string">'mytask'</span>, [<span class="string">'array'</span>, <span class="string">'of'</span>, <span class="string">'task'</span>, <span class="string">'names'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 做一些事</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>gulp.src(path)</code> - 选择文件，传入参数是文件路径。</p>
</li>
<li><p><code>gulp.dest(path)</code> - 输出文件。</p>
</li>
<li><p><code>gulp.pipe()</code> - 管道，你可以暂时将 pipe 理解为将操作加入执行队列。</p>
</li>
<li><p><code>gulp.watch(src, fn)</code> - 检测指定目录下文件的修改后执行任务。</p>
</li>
<li><p><code>gulp.task(&#39;default&#39;, fn)</code> -  定义默认任务,在命令行直接输入 gulp +回车 运行</p>
</li>
</ul>
<h3 id="4-使用-gulp-压缩-CSS"><a href="#4-使用-gulp-压缩-CSS" class="headerlink" title="4.使用 gulp 压缩 CSS"></a>4.使用 gulp 压缩 CSS</h3><p><a href="https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-api" target="_blank" rel="external">clean-css</a><br><a href="https://github.com/scniro/gulp-clean-css" target="_blank" rel="external">gulp-clean-css</a></p>
<pre><code>$ npm install gulp-clean-css --save-dev
</code></pre><p>gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 clean-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 css 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp css 启动此任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'css/*.css'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(cleanCSS())</div><div class="line">    <span class="comment">// 3. 另存为压缩文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 css 任务</span></div><div class="line">    gulp.watch(<span class="string">'css/*.css'</span>, [<span class="string">'css'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 css 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'css'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbiiiblzj20ko0cd0t9.jpg" alt="gulp-clean-css"><br><img src="http://wx1.sinaimg.cn/large/789d050dgy1fkjbijena9j20vo04o74a.jpg" alt="css对比"><br><img src="http://wx1.sinaimg.cn/large/789d050dgy1fkjbij1dmoj20kl069gls.jpg" alt="编译css auto default"></p>
<h3 id="5-使用-gulp-压缩图片"><a href="#5-使用-gulp-压缩图片" class="headerlink" title="5.使用 gulp 压缩图片"></a>5.使用 gulp 压缩图片</h3><p><a href="https://github.com/imagemin/imagemin" target="_blank" rel="external">imagemin</a><br><a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a> </p>
<pre><code>$ npm install --save-dev gulp-imagemin
</code></pre><p>gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取 gulp-imagemin 模块</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩图片任务</span></div><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到图片</span></div><div class="line">    gulp.src(<span class="string">'images/*.*'</span>)</div><div class="line">    <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">            <span class="comment">//无损压缩jpg图片</span></div><div class="line">        &#125;))</div><div class="line">    <span class="comment">// 3. 另存图片</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class="line">    gulp.watch(<span class="string">'images/*.*'</span>, [<span class="string">'images'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 images 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'images'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p>其他参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.pipe(imagemin(&#123;</div><div class="line">           <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></div><div class="line">           progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></div><div class="line">           interlaced: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></div><div class="line">           multipass: <span class="literal">true</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></div><div class="line">       &#125;))</div></pre></td></tr></table></figure></p>
<p>深度压缩图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    <span class="comment">//确保本地已安装imagemin-pngquant [npm install imagemin-pngquant --save-dev]</span></div><div class="line">    pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'images/*.*'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">svgoPlugins</span>: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;],<span class="comment">//不要移除svg的viewbox属性</span></div><div class="line">            use: [pngquant()] <span class="comment">//使用pngquant深度压缩png图片的imagemin插件</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>只压缩修改的图片</p>
<p>使用”gulp-cache”只压缩修改的图片，没有修改的图片直接从缓存文件读取（C:\Users\Administrator\AppData\Local\Temp\gulp-cache）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>),</div><div class="line">    <span class="comment">//确保本地已安装gulp-cache [cnpm install gulp-cache --save-dev]</span></div><div class="line">    cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>);</div><div class="line">    </div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'images/*.*'</span>)</div><div class="line">        .pipe(cache(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">svgoPlugins</span>: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;],</div><div class="line">            <span class="attr">use</span>: [pngquant()]</div><div class="line">        &#125;)))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fkjbijq91gj20kk0ch0tf.jpg" alt="gulp-imagemin"><br><img src="http://wx1.sinaimg.cn/large/789d050dgy1fkjbik6qrej20k109z0t5.jpg" alt="执行images auto default"></p>
<h3 id="5-使用-gulp-编译-LESS"><a href="#5-使用-gulp-编译-LESS" class="headerlink" title="5.使用 gulp 编译 LESS"></a>5.使用 gulp 编译 LESS</h3><pre><code>$ npm install gulp-less --save-dev
</code></pre><p>gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-less 模块</span></div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译less</span></div><div class="line"><span class="comment">// 在命令行输入 gulp less 启动此任务</span></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到 less 文件</span></div><div class="line">    gulp.src(<span class="string">'less/**.less'</span>)</div><div class="line">    <span class="comment">// 2. 编译为css</span></div><div class="line">        .pipe(less())</div><div class="line">    <span class="comment">// 3. 另存文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 less 任务</span></div><div class="line">    gulp.watch(<span class="string">'less/**.less'</span>, [<span class="string">'less'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'less'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<h3 id="5-使用-gulp-编译-Sass"><a href="#5-使用-gulp-编译-Sass" class="headerlink" title="5.使用 gulp 编译 Sass"></a>5.使用 gulp 编译 Sass</h3><p><a href="https://www.npmjs.com/package/gulp-ruby-sass" target="_blank" rel="external">gulp-ruby-sass</a></p>
<pre><code>$ npm install gulp-ruby-sass --save-dev
</code></pre><p>gulpfile.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-ruby-sass 模块</span></div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译sass</span></div><div class="line"><span class="comment">// 在命令行输入 gulp sass 启动此任务</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sass(<span class="string">'sass/'</span>) </div><div class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">   &#125;)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 sass 任务</span></div><div class="line">    gulp.watch(<span class="string">'sass/**/*.scss'</span>, [<span class="string">'sass'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 sass 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'sass'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure></p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fkjbikt1yej20kq0ayt97.jpg" alt="编译 ctrl-c终止"></p>
<h3 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">gulp-book</a></li>
<li><a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">gulp详细入门教程by ydcss</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链-共识机制]]></title>
      <url>/2017/10/01/%E5%8C%BA%E5%9D%97%E9%93%BE-%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>区块链解决了在不可信信道上传输可信信息、价值转移的问题，而共识机制解决了区块链如何在分布式场景下达成一致性的问题，奠定了比特币系统的安全性。</p>
<h3 id="1-分布式一致性问题（共识算法）"><a href="#1-分布式一致性问题（共识算法）" class="headerlink" title="1.分布式一致性问题（共识算法）"></a>1.分布式一致性问题（共识算法）</h3><h4 id="1-一致性问题（Consensus-Problem）"><a href="#1-一致性问题（Consensus-Problem）" class="headerlink" title="1. 一致性问题（Consensus Problem）"></a>1. 一致性问题（Consensus Problem）</h4><p>一致（Agreement） :每个正确的执行过程应该在相同的值上达成一致；<br>完整（Integrity） :每个正确的执行过程最多只能决定一个值。如果它决定了某个值的话，这个值一定是被某个执行过程提出的；<br>终止（Termination） :所有的执行过程最终会做出一个决定；<br>正确（Validity） :如果所有正确的执行过程提出了相同的值V，那么所有正确的执行过程都会决定值V。</p>
<h4 id="2-FLP不可能性（FLP-impossibility）"><a href="#2-FLP不可能性（FLP-impossibility）" class="headerlink" title="2. FLP不可能性（FLP impossibility）"></a>2. <strong>FLP不可能性（FLP impossibility）</strong></h4><p>实际的计算机集群中，可能会存在以下问题:<br>1.节点处理事务的能力不同，网络节点数据的吞吐量有差异<br>2.节点间通讯的信道可能不安全<br>3.可能会有作恶节点出现<br>4.当异步处理能力达到高度一致时，系统的可扩展性就会变差（容不下新节点的加入）。</p>
<p>FLP不可能性定理证明了在分布式情景下，无论任何算法，即使是只有一个进程挂掉，对于其他非失败进程，都存在着无法达成一致的可能。<strong>在假设网络可靠、计算节点只会因崩溃而失效的最小化异步模型系统中，仍然不存在一个可以解决一致性问题的确定性算法。</strong><br>FLP是Fischer, Lynch，Patterson三位作者名字组合的简写，表明这定理是由它们三位发明的。<br><a href="http://loopjump.com/flp_proof_note/" target="_blank" rel="external">证明</a><br><a href="http://blog.csdn.net/chen77716/article/details/27963079" target="_blank" rel="external">更多参考</a></p>
<h4 id="3-CAP定理"><a href="#3-CAP定理" class="headerlink" title="3. CAP定理"></a>3. <strong>CAP定理</strong></h4><p><strong>分布式计算系统不可能同时确保一致性、可用性和分区容忍性。</strong><br>一致性（Consistency） :所有节点在同一时刻能够看到同样的数据，也即“强一致性”；<br>可用性（Availability） ：确保每个请求都可以收到确定其是否成功的响应；<br>分区容忍性（Partition tolerance） :因为网络故障导致的系统分区不影响系统正常运行。</p>
<p>这也就意味着，我们虽然不能使某个分布式场景同时满足三个性质，但可以使之同时满足三个中的两个。更进一步说，对于包含多个分布式场景的分布式系统，我们甚至可以在三个性质的程度上进行适当的权衡<a href="http://www.cnblogs.com/firstdream/p/6585923.html" target="_blank" rel="external">^footnote</a>。</p>
<a id="more"></a>
<h4 id="4-拜占庭将军问题"><a href="#4-拜占庭将军问题" class="headerlink" title="4. 拜占庭将军问题"></a>4. 拜占庭将军问题</h4><p>（1）<strong>Byzantine Fault Tolerant 算法</strong><br>面向拜占庭问题的容错算法，<strong>解决的是网络通信可靠，但节点可能故障情况下的一致性达成</strong>。<br>最早由 Castro 和 Liskov 在 1999 年提出的 Practical Byzantine Fault Tolerant（<strong>PBFT</strong>）是第一个得到广泛应用的 BFT 算法。<strong>只要系统中有三分之二的节点是正常工作的，则可以保证一致性。</strong><br>PBFT 算法包括三个阶段来达成共识：Pre-Prepare、Prepare 和 Commit。<br><a href="http://8btc.com/article-3756-1.html" target="_blank" rel="external">具体参考</a></p>
<p>PBFT优点：脱离了币的存在，币的存在及它的奖励机制会让区块链这一单一的世界穷者更穷，富者更富。<br>共识效率高，可实现高频交易。<br>缺点：当系统只剩下33%的节点运行时，系统会停止运行。</p>
<p>（2）<strong>PoW（Proof of Work）算法</strong><br>一个是限制一段时间内整个网络中出现提案的个数（增加提案成本），另外一个是放宽对最终一致性确认的需求，约定好大家都确认并沿着已知最长的链进行拓宽。系统的最终确认是概率意义上的存在。这样，即便有人试图恶意破坏，也会付出很大的经济代价（付出超过系统一半的算力）。<br>后来的各种 PoX 系列算法，也都是沿着这个思路进行改进，采用经济上的惩罚来制约破坏者。</p>
<p>优点：<br>完全去中心化<br>节点自由进出，容易实现。<br>破坏系统花费的成本巨大<br>缺点：<br>对节点的性能网络环境要求高<br>无法达成最终一致性<br>浪费能源</p>
<p>（3）<strong>Paxos共识算法</strong><br>1990 年由 Leslie Lamport 提出，是第一个被证明的共识算法，在工程角度实现了一<strong>种最大化保障分布式系统一致性</strong>（存在极小的概率无法实现一致）的机制。</p>
<p>算法中将节点分为三种类型：<br><strong>proposer</strong>：提出一个提案，等待大家批准为结案。往往是客户端担任该角色<br><strong>acceptor</strong>：负责对提案进行投票。往往是服务端担任该角色<br><strong>learner</strong>：被告知结案结果，并与之统一，不参与投票过程。</p>
<p>算法需要满足 safety 和 liveness 两方面的约束要求（实际上这两个基础属性是大部分分布式算法都该考虑的）：<br><strong>safety</strong>：保证决议结果是对的，无歧义的，不会出现错误情况。<br><strong>liveness</strong>：保证决议过程能在有限时间内完成。</p>
<p>基本过程包括 proposer 提出提案，先争取大多数 acceptor 的支持，超过一半支持时，则发送结案结果给所有人进行确认。一个潜在的问题是 proposer 在此过程中出现故障，可以通过超时机制来解决。极为凑巧的情况下，每次新的一轮提案的 proposer 都恰好故障，系统则永远无法达成一致（概率很小）。<br><strong>Paxos 能保证在超过50%的正常节点存在时，系统能达成共识。</strong></p>
<p>（4）<strong>Raft算法</strong></p>
<p>Raft 是对 Paxos 的重新设计和简化实现。<br>包括三种角色：leader、candiate 和 follower，其基本过程为：<br>Leader 选举：每个 candidate 随机经过一定时间都会提出选举方案，最近阶段中得票最多者被选为 leader；<br>同步 log：leader 会找到系统中 log 最新的记录，并强制所有的 follower 来刷新到这个记录；<br><a href="http://blog.csdn.net/cszhouwei/article/details/38374603" target="_blank" rel="external">具体参考</a></p>
<h3 id="2-共识模型"><a href="#2-共识模型" class="headerlink" title="2. 共识模型"></a>2. 共识模型</h3><h4 id="1-POW"><a href="#1-POW" class="headerlink" title="1. POW"></a>1. POW</h4><p><strong>工作量证明，Proof of Work</strong>，通过计算来猜测一个数值（nonce），得以解决规定的 hash 问题。</p>
<p>保证在一段时间内，系统中只能出现少数合法提案。<br>同时，这些少量的合法提案会在网络中进行广播，收到的用户进行验证后会基于它认为的<strong>最长链</strong>上继续难题的计算。<br>因此，系统中可能出现链的分叉（Fork），但最终会有一条链成为最长的链。</p>
<p>hash 问题具有不可逆的特点，因此，目前除了暴力计算外，还没有有效的算法进行解决。反之，如果获得符合要求的 nonce，则说明在概率上是付出了对应的算力。<strong>谁的算力多，谁最先解决问题的概率就越大</strong>。当掌握超过全网一半算力时，从概率上就能控制网络中链的走向。这也是所谓 <strong>51% 攻击</strong> 的由来。</p>
<p>参与 PoW 计算比赛的人，将付出不小的<strong>经济成本</strong>（硬件、电力、维护等）。当没有成为首个算出的“幸运儿”时，这些成本都将被沉没掉。这也保障了，如果有人恶意破坏，需要付出大量的经济成本。也有设计试图将后算出结果者的算力按照一定比例折合进下一轮比赛考虑。</p>
<p>有一个很直观的例子可以说明为何这种经济博弈模式会确保系统中最长链的唯一。<br>超市付款需要排成一队，可能有人不守规矩要插队。超市管理员会检查队伍，认为最长的一条队伍是合法的，并让不合法的分叉队伍重新排队。只要大部分人不傻，就会自觉在最长的队伍上排队。</p>
<h4 id="2-PoS"><a href="#2-PoS" class="headerlink" title="2. PoS"></a>2. PoS</h4><p><strong>权益证明，Proof of Stake</strong>，2013 年被提出，最早在 Peercoin 系统中被实现。<br>类似现实生活中的<strong>股东机制，拥有股份越多的人越容易获取记账权</strong>。</p>
<p>典型的过程是<strong>通过保证金</strong>（代币、资产、名声等具备价值属性的物品即可）<strong>来对赌一个合法的块成为新的区块，收益为抵押资本的利息和交易服务费</strong>。提供证明的保证金（例如通过转账货币记录）越多，则获得记账权的概率就越大。合法记账者可以获得收益。</p>
<p>PoS 是试图解决在 PoW 中大量资源被浪费的缺点。恶意参与者将存在保证金被罚没的风险，即损失经济利益。<br>一般的，对于 PoS 来说，需要<strong>掌握超过全网三分之一的资源，才有可能左右最终的结果</strong>。这个也很容易理解，三个人投票，前两人分别支持一方，这时候，第三方的投票将决定最终结果。</p>
<p>PoS 也有一些改进的算法，包括授权股权证明机制（DPOS），即股东们投票选出一个董事会，董事会中成员才有权进行代理记账。</p>
<p>优点: 对节点性能要求低，达成共识时间短（网络环境好的话可实现毫秒级）<br>缺点：没有最终一致性</p>
<h4 id="3-DPOS"><a href="#3-DPOS" class="headerlink" title="3. DPOS"></a>3. DPOS</h4><p><strong>Delegated Proof-Of-Stake（DPOS），即股份授权股权证明。</strong>与PoS的主要区别在于节点选举若干代理人，由代理人验证和记账。其合规监管、性能、资源消耗和容错性与PoS相似。类似于<strong>董事会投票</strong>，持币者投出一定数量的节点，代理他们进行验证和记账。<br>工作原理：去中心化表示每个股东按其持股比例拥有影响力，51%股东投票的结果将是不可逆且有约束力的。其挑战是通过及时而高效的方法<strong>达到51%批准</strong>。为达到这个目标，<strong>每个股东可以将其投票权授予一名代表。获票数最多的前100位代表按既定时间表轮流产生区块。每名代表分配到一个时间段来生产区块。</strong>所有的代表将收到等同于<strong>一个平均水平的区块所含交易费的10%作为报酬</strong>。如果一个平均水平的区块含有100股作为交易费，一名代表将获得1股作为报酬。</p>
<p>优点：减少记账节点规模，属于弱中心化，效率提高。<br>缺点：牺牲了去中心化的概念，不适合公有链。</p>
<h4 id="4-Casper（投注共识）"><a href="#4-Casper（投注共识）" class="headerlink" title="4. Casper（投注共识）"></a>4. Casper（投注共识）</h4><p>这是一种以太坊下一代的共识机制，<strong>属于PoS</strong>。Casper的共识是<strong>按块达成</strong>的而不是像PoS那样按链达成的。<br>为了防止验证人在不同的世界中提供不同的投注，还有一个简单严格的条款：<strong>如果你有两次投注序号一样，或者说你提交了一个无法让Casper合约处理的投注，你将失去所有保证金。</strong>从这一点我们可以看出，Casper与传统的PoS不同的是Casper有<strong>惩罚机制</strong>，这样非法节点通过恶意攻击网络不仅得不到交易费，而且还面临着保证金被没收的风险。<br>Casper协议下的验证人需要完成出块和投注两个活动。<br><a href="http://blog.csdn.net/aaa123524457/article/details/52837307" target="_blank" rel="external">具体参考</a></p>
<h4 id="5-Pool验证池"><a href="#5-Pool验证池" class="headerlink" title="5. Pool验证池"></a>5. Pool验证池</h4><p>基于传统的分布式一致性技术，加上数据验证机制。</p>
<p>优点：不需要代币也可以工作，在成熟的分布式一致性算法（Pasox、Raft）基础上，实现秒级共识验证。<br>缺点：去中心化程度不如bictoin；更适合多方参与的多中心商业模式。</p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ATOM&NPM]]></title>
      <url>/2017/06/29/ATOM&amp;NPM/</url>
      <content type="html"><![CDATA[<h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h4><pre><code>https://nodejs.org
</code></pre><h4 id="2-安装cnpm"><a href="#2-安装cnpm" class="headerlink" title="2.安装cnpm"></a>2.安装<a href="https://cnpmjs.org/" target="_blank" rel="external">cnpm</a></h4><p>管理员模式开cmd</p>
<pre><code>npm install -g cnpm –registry=https://registry.npm.taobao.org
</code></pre><p>安装完后<code>npm config list</code>显示淘宝源</p>
<h4 id="3-npm使用"><a href="#3-npm使用" class="headerlink" title="3.npm使用"></a>3.npm使用</h4><p>npm（node package manager）：<br>nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）。</p>
<ul>
<li><p>使用npm安装插件</p>
<pre><code>npm install &lt;name&gt; [-g] [--save-dev]
</code></pre><p>例：npm install gulp-less –save-dev</p>
</li>
</ul>
<ul>
<li><p><code>-g</code><br>全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；<br>非全局安装：将会安装在当前定位目录；<br>全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；</p>
</li>
<li><p><code>--save</code><br>将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>
</li>
<li><p><code>-dev</code><br>保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；<br>一般保存在dependencies的像这些express/ejs/body-parser等等。</p>
</li>
<li><p>为什么要保存至package.json<br>因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包，npm install –production只下载dependencies节点的包）。</p>
<ul>
<li><p>使用npm卸载插件</p>
<pre><code>npm uninstall &lt;name&gt; [-g] [--save-dev] 
</code></pre><p>不要直接删除本地插件包</p>
<p>删除全部插件<br>使用rimraf：</p>
<pre><code>npm install rimraf -g
</code></pre><p>用法：rimraf node_modules</p>
</li>
<li><p>使用npm更新插件</p>
<pre><code>npm update &lt;name&gt; [-g] [--save-dev]
</code></pre><p>更新全部插件</p>
<pre><code>npm update [--save-dev]
</code></pre></li>
<li><p>查看npm帮助</p>
<pre><code>npm help
</code></pre></li>
<li><p>当前目录已安装插件</p>
<pre><code>npm list
</code></pre></li>
</ul>
</li>
</ul>
<h4 id="4-atom安装"><a href="#4-atom安装" class="headerlink" title="4.atom安装"></a>4.atom安装</h4><p><a href="https://atom.io/" target="_blank" rel="external">Atom</a> <a href="https://npm.taobao.org/mirrors/atom/" target="_blank" rel="external">下载镜像</a></p>
<p>便携安装参考了<a href="http://mazhuang.org/atom-flight-manual/chapter-1-getting-started/installing-atom.html" target="_blank" rel="external">http://mazhuang.org/atom-flight-manual/chapter-1-getting-started/installing-atom.html</a></p>
<p>然后在系统环境变量<code>path</code>中添加路径<code>C:\Users\~\AppData\Local\atom\bin</code></p>
<h4 id="5-插件安装"><a href="#5-插件安装" class="headerlink" title="5.插件安装"></a>5.插件安装</h4><p>离线安装：<br>先cmd输入<code>apm -version</code>检查环境配置，然后从github上下载插件，<code>npm install</code>命令安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$export ATOM_ELECTRON_URL=https://npm.taobao.org/mirrors/atom-shell</div><div class="line">$ apm install --check</div></pre></td></tr></table></figure></p>
<p>在线安装：<br><a href="https://www.sockscap64.com/sstap/" target="_blank" rel="external">ss-tap</a>不仅可以代理游戏，还可以……<br>总之强烈推荐。</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[krpano实践]]></title>
      <url>/2017/06/24/krpano%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>基于<a href="http://www.krpano360.com/" target="_blank" rel="noopener">krpano中文网</a>整理</p>
<h3 id="1-官网"><a href="#1-官网" class="headerlink" title="1.官网"></a>1.官网</h3><p><a href="http://www.krpano.com/download/" target="_blank" rel="noopener">下载地址</a></p>
<h3 id="2-krpano-Droplet"><a href="#2-krpano-Droplet" class="headerlink" title="2.krpano Droplet"></a>2.krpano Droplet</h3><p>krpano Droplet 基本上就是krpano命令行工具加上特定配置文件config的一个快捷方式。krpano droplet 的使用方式非常简单，将文件直接拖放在droplet图标上松开即可。</p>
<p>一般用<code>MAKE VTOUR (VR-OPT) droplet.bat</code>生成VR漫游</p>
<p><a href="http://www.krpano360.com/krpano-dropletzhongwenwendang/" target="_blank" rel="noopener">droplet详细</a></p>
<p><a href="http://www.krpano360.com/解决make-vtour可生成场景数的限制/" target="_blank" rel="noopener">场景限制</a></p>
<h3 id="3-标题修改、热点设置、起始视角"><a href="#3-标题修改、热点设置、起始视角" class="headerlink" title="3.标题修改、热点设置、起始视角"></a>3.标题修改、热点设置、起始视角</h3><p><a href="http://www.krpano360.com/xunxujianjin8-weimorenmanyoujiaruzhongwenxinxi/" target="_blank" rel="noopener">教程</a></p>
<p><a href="http://www.macromedia.com/support/documentation/cn/flashplayer/help/settings_manager04.html#117502" target="_blank" rel="noopener">flash“全局安全设置”面板</a></p>
<h3 id="4-tour-xml解析"><a href="#4-tour-xml解析" class="headerlink" title="4.tour.xml解析"></a>4.tour.xml解析</h3><p>(教程)[<a href="http://www.krpano360.com/xunxujianjin11-tour-xmldejingtaidaimadouyoushenmezuoyong/]" target="_blank" rel="noopener">http://www.krpano360.com/xunxujianjin11-tour-xmldejingtaidaimadouyoushenmezuoyong/]</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[solidity编程（一）开发环境搭建]]></title>
      <url>/2017/06/08/solidity%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h3 id="1-Visual-Studio-2015（坑）"><a href="#1-Visual-Studio-2015（坑）" class="headerlink" title="1.Visual Studio 2015（坑）"></a>1.Visual Studio 2015（坑）</h3><p><a href="https://blogs.msdn.microsoft.com/caleteet/2016/04/01/solidity-integration-with-visual-studio/" target="_blank" rel="external">微软官网参考</a></p>
<p>(1) 下载<a href="https://marketplace.visualstudio.com/items?itemName=ConsenSys.Solidity" target="_blank" rel="external">solidity扩展</a><br>目前不支持高亮显示，下载了<a href="https://marketplace.visualstudio.com/items?itemName=MadsKristensen.SyntaxHighlightingPack" target="_blank" rel="external">Syntax Highlighting Pack</a>没用==<br>node.js必须装，<a href="https://nodejs.org/en/" target="_blank" rel="external">下载</a></p>
<p>(2) 建立solidity项目<br><a href="https://www.youtube.com/watch?v=yoffoNRk-Xg" target="_blank" rel="external">视频参考</a><br><figure class="image-box">
                <img src="http://wx3.sinaimg.cn/large/789d050dgy1ff1l7r9vbfj20wy0mtacb.jpg" alt="新建" title="" class="">
                <p>新建</p>
            </figure><br>错误是因为没装bloc<br><figure class="image-box">
                <img src="http://wx2.sinaimg.cn/large/789d050dgy1ff1l7rtdm4j20ry0lgwgc.jpg" alt="错误" title="" class="">
                <p>错误</p>
            </figure></p>
<a id="more"></a>
<p>(3) 安装bloc<br><a href="https://github.com/blockapps/bloc" target="_blank" rel="external">bloc</a>（Minimal commandline build and deploy tool for the BlockApps API）</p>
<pre><code>npm install blockapps-bloc -g
bloc init
cd app_name &amp;&amp; npm install
bloc genkey
bloc start
</code></pre><p><img src="http://wx1.sinaimg.cn/large/789d050dgy1ff1l7sgbf1j20ko09gabf.jpg" alt="init"></p>
<figure class="image-box">
                <img src="http://wx3.sinaimg.cn/large/789d050dgy1ff1l7ssa69j20jb0a3tbd.jpg" alt="cd" title="" class="">
                <p>cd</p>
            </figure>
<figure class="image-box">
                <img src="http://wx2.sinaimg.cn/large/789d050dgy1ff1l7t87ktj20kc0a875w.jpg" alt="genkey" title="" class="">
                <p>genkey</p>
            </figure>
<p>然而出现了一个问题：bloc genkey后无限<code>waiting for transaction to be mined</code><br><a href="https://github.com/blockapps/bloc/issues/188" target="_blank" rel="external">https://github.com/blockapps/bloc/issues/188</a><br><a href="http://stackoverflow.com/questions/40844350/solidity-stuck-at-mining-transaction" target="_blank" rel="external">http://stackoverflow.com/questions/40844350/solidity-stuck-at-mining-transaction</a><br>反正目前无解(┬＿┬)</p>
<h3 id="2-intellij-solidity"><a href="#2-intellij-solidity" class="headerlink" title="2.intellij-solidity"></a>2.intellij-solidity</h3><p><a href="https://github.com/intellij-solidity/intellij-solidity" target="_blank" rel="external">插件源码</a></p>
<ol>
<li><p>安装插件<br><img src="http://wx3.sinaimg.cn/large/789d050dgy1fgdzhl8skrj214b0rdadc.jpg" alt="安装插件"></p>
</li>
<li><p>插件应用<br><img src="http://wx4.sinaimg.cn/large/789d050dgy1fgdzhlrdijj20x10ox3zu.jpg" alt="插件应用"></p>
</li>
</ol>
<p>发现功能只有Syntax highlighting，Code completion等</p>
<h3 id="3-geth"><a href="#3-geth" class="headerlink" title="3.geth"></a>3.geth</h3><p>geth全称Go-ethereum,是一个用go语言编写的以太坊客户端，也是目前最常用的客户端。</p>
<p>从<a href="https://geth.ethereum.org/downloads/" target="_blank" rel="external">官网</a>下载适配系统的压缩包</p>
<ol>
<li><p>geth是一个命令行工具，只能cmd中运行，windows下不可直接双击geth.exe。<br><img src="http://wx2.sinaimg.cn/large/789d050dgy1fgdyzrsflqj20n70f2q4u.jpg" alt="geth help"></p>
</li>
<li><p>直接运行geth会自动连接到以太坊公网，此时会开始同步区块<br><img src="http://wx2.sinaimg.cn/large/789d050dgy1fgdyzs91sdj20n60ezwi3.jpg" alt="区块同步"></p>
</li>
</ol>
<h3 id="4-Atom和插件"><a href="#4-Atom和插件" class="headerlink" title="4.Atom和插件"></a>4.Atom和插件</h3><h4 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h4><pre><code>https://nodejs.org
</code></pre><h4 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h4><p>管理员模式开cmd</p>
<p>(1) npm的全局模块的存放路径</p>
<pre><code>npm config set prefix &quot;C:\Program Files\nodejs\node_global&quot;
</code></pre><p>(2) npm的cache的路径</p>
<pre><code>npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;
</code></pre><h4 id="3-安装cnpm"><a href="#3-安装cnpm" class="headerlink" title="3.安装cnpm"></a>3.安装<a href="https://cnpmjs.org/" target="_blank" rel="external">cnpm</a></h4><p>管理员模式开cmd</p>
<pre><code>npm install -g cnpm –registry=https://registry.npm.taobao.org
</code></pre><p><code>fetchMetadata: sill mapToRegistry</code>会很慢，耐心……</p>
<p>安装完后<code>npm config list</code>会显示淘宝源</p>
<h4 id="4-atom安装"><a href="#4-atom安装" class="headerlink" title="4.atom安装"></a>4.atom安装</h4><p><a href="https://atom.io/" target="_blank" rel="external">Atom</a> <a href="https://npm.taobao.org/mirrors/atom/" target="_blank" rel="external">下载镜像</a></p>
<p>安装参考了<a href="http://mazhuang.org/atom-flight-manual/chapter-1-getting-started/installing-atom.html" target="_blank" rel="external">http://mazhuang.org/atom-flight-manual/chapter-1-getting-started/installing-atom.html</a></p>
<p>然后在系统环境变量<code>path</code>中添加路径<code>C:\Users\~\AppData\Local\atom\bin</code></p>
<p>装solidity插件<code>atom-ethereum-interface</code>和<code>linter-solidity</code></p>
<pre><code>$ apm install atom-ethereum-interface

$ apm install linter #(if you don&apos;t have AtomLinter/Linter installed). 

$ apm install linter-solidity
</code></pre><p>网不好，本地安装吧。 先cmd输入<code>apm -version</code>检查环境配置，然后从github上下载插件，<code>npm install</code>命令安装。</p>
<h4 id="5-atom使用"><a href="#5-atom使用" class="headerlink" title="5.atom使用"></a>5.atom使用</h4><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fgdyi6spcej20cn03ft9k.jpg" alt="Atom Ethereum Interface"></p>
<p>  Compile code 编译合约<br>  Build compiled 部署合约<br>  Create 创建实例。</p>
<ol>
<li><p>编译部署<br><img src="https://i.github-camo.com/1b30a007d32e9d6826308cc9c46e45625601bd2a/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31333236313337322f32303139393636332f32643030303034382d613764322d313165362d396562362d3232323230303434326635632e706e67" alt="此处输入图片的描述"></p>
<p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fgdyi7lcjqj20p40940uc.jpg" alt="编译部署"></p>
</li>
</ol>
<ol>
<li>语法错误提示<br><img src="http://wx4.sinaimg.cn/large/789d050dgy1fgdyi83vcej20fd0h8q47.jpg" alt="语法错误提示"></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后台学习(三)——框架测试]]></title>
      <url>/2017/04/20/%E5%90%8E%E5%8F%B0%E5%AD%A6%E4%B9%A0(%E4%B8%89)%E2%80%94%E2%80%94%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<hr>
<p>跟着教程<a href="http://blog.csdn.net/lxfhahaha/article/details/57078994" target="_blank" rel="external">http://blog.csdn.net/lxfhahaha/article/details/57078994</a></p>
<h3 id="1-tomcat测试启动"><a href="#1-tomcat测试启动" class="headerlink" title="1. tomcat测试启动"></a>1. tomcat测试启动</h3><p><img src="http://wx3.sinaimg.cn/large/789d050dgy1fetg8yh5hfj219u0rs0y8.jpg" alt="tomcat"></p>
<h3 id="2-mybatis-generator"><a href="#2-mybatis-generator" class="headerlink" title="2. mybatis-generator"></a>2. mybatis-generator</h3><p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fetgany37kj212h0qcae3.jpg" alt="tomcat"></p>
<h3 id="3-junit测试"><a href="#3-junit测试" class="headerlink" title="3. junit测试"></a>3. junit测试</h3><p><img src="http://wx2.sinaimg.cn/large/789d050dgy1fetg8wthvrj212l0segph.jpg" alt="tomcat"></p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后台学习(二)——MySql绿色版配置&Navicat for MySQL]]></title>
      <url>/2017/04/20/%E5%90%8E%E5%8F%B0%E5%AD%A6%E4%B9%A0(%E4%BA%8C)%E2%80%94%E2%80%94MySql%E7%BB%BF%E8%89%B2%E7%89%88%E9%85%8D%E7%BD%AE&amp;Navicat%20for%20MySQL/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">Windows (x86, 64-bit), ZIP Archive</a><br>No thanks, just start my download.</p>
<h3 id="2-添加系统环境变量"><a href="#2-添加系统环境变量" class="headerlink" title="2. 添加系统环境变量"></a>2. 添加系统环境变量</h3><pre><code>变量名： Path    变量值：E:\mysql\mysql-5.7.18-winx64\bin；
</code></pre><h3 id="3-配置my-ini文件"><a href="#3-配置my-ini文件" class="headerlink" title="3. 配置my.ini文件"></a>3. 配置my.ini文件</h3><p>解压目录下新建<code>my.ini</code>文件，编辑为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[mysqld]  </div><div class="line">basedir=E:\mysql\mysql-5.7.18-winx64    # 设置mysql的安装目录  </div><div class="line">datadir=E:\mysql\mysqldbms\data   # 设置mysql数据库的数据的存放目录，必须是data，或者是//xxx/data  </div><div class="line">  </div><div class="line">*************************分割线*******************  </div><div class="line"></div><div class="line">&lt;!--more--&gt;</div><div class="line"></div><div class="line">port = 3306  </div><div class="line">socket = /tmp/mysql.sock  </div><div class="line">default-character-set=gbk   # 设置mysql服务器的字符集  </div><div class="line">skip-locking  </div><div class="line">key_buffer = 16K  </div><div class="line">max_allowed_packet = 1M  </div><div class="line">table_cache = 4  </div><div class="line">sort_buffer_size = 64K  </div><div class="line">read_buffer_size = 256K  </div><div class="line">read_rnd_buffer_size = 256K  </div><div class="line">net_buffer_length = 2K  </div><div class="line">thread_stack = 64K  </div><div class="line">  </div><div class="line">[client]   </div><div class="line">#password = your_password  </div><div class="line">port = 3306  </div><div class="line">socket = /tmp/mysql.sock  </div><div class="line">default-character-set=gbk   </div><div class="line">*************************分割线*******************</div></pre></td></tr></table></figure></p>
<h3 id="4-安装服务"><a href="#4-安装服务" class="headerlink" title="4. 安装服务"></a>4. 安装服务</h3><p><strong>管理员模式</strong>下cmd输入<code>mysqld --install MySQL --defaults-file=&quot;E:\mysql\mysql-5.7.18-winx64\my.ini&quot;</code><br>显示Service successfully installed</p>
<p>同理删除服务<code>mysqld --remove MySQL</code></p>
<h3 id="5-启动MySQL服务"><a href="#5-启动MySQL服务" class="headerlink" title="5. 启动MySQL服务"></a>5. 启动MySQL服务</h3><p><code>mysqld  --initialize</code>自动生成带随机密码的root用户<br><code>mysqld --initialize-insecure</code>自动生成无密码的root用户（我先执行了这个命令）<br>data文件夹不为空是不能执行这个命令的。可以先删除data目录下的所有文件或者移走。</p>
<p>cmd管理员模式在bin目录下<code>net start mysql</code>即可启动服务。<br>同理，停止服务器命令<code>net stop MySQL</code></p>
<ul>
<li><p>服务无法启动-“NET HELPMSG 3534”问题解决<br>参考<a href="http://bbs.csdn.net/topics/391851148" target="_blank" rel="external">http://bbs.csdn.net/topics/391851148</a><br>先<code>mysqld  --initialize</code>初始化data目录。<br>5.7版本还可以把5.6的data目录拷过去解决。</p>
</li>
<li><p>服务无法启动-1067错误问题解决<br>参考<a href="http://www.cnblogs.com/mr-hero/p/5817142.html" target="_blank" rel="external">http://www.cnblogs.com/mr-hero/p/5817142.html</a></p>
</li>
</ul>
<h3 id="6-设置密码"><a href="#6-设置密码" class="headerlink" title="6. 设置密码"></a>6. 设置密码</h3><p><code>mysql -uroot -p password 123456</code> </p>
<p><img src="http://wx4.sinaimg.cn/large/789d050dgy1fet9ibojlsj20es02kmxe.jpg" alt="密码设置"></p>
<h3 id="7-本地连接"><a href="#7-本地连接" class="headerlink" title="7. 本地连接"></a>7. 本地连接</h3><p>cmd输入<code>mysql -u root -p</code>再输密码连接<br>退出<code>exit</code>（bye真的好萌(*ﾟ∇ﾟ)）<br><figure class="image-box">
                <img src="http://wx1.sinaimg.cn/large/789d050dgy1fet9p2fskqj20m8095jsi.jpg" alt="连接操作" title="" class="">
                <p>连接操作</p>
            </figure></p>
<h3 id="8-Navicat-for-MySQL"><a href="#8-Navicat-for-MySQL" class="headerlink" title="8. Navicat for MySQL"></a>8. Navicat for MySQL</h3><p>图形化数据库管理工具，<a href="https://navicatformysql.en.softonic.com/" target="_blank" rel="external">官网下载</a>。<br>安装后<code>新建连接</code>连接数据库就行。</p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后台学习(一)——Apache Tomcat&Maven配置]]></title>
      <url>/2017/04/20/%E5%90%8E%E5%8F%B0%E5%AD%A6%E4%B9%A0(%E4%B8%80)%E2%80%94%E2%80%94Apache%20Tomcat&amp;Maven%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="1-Apache-Tomcat"><a href="#1-Apache-Tomcat" class="headerlink" title="1. Apache Tomcat"></a>1. Apache Tomcat</h3><blockquote>
<p>The Apache Tomcat® software is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.<br>Web 应用服务器</p>
</blockquote>
<p><a href="http://tomcat.apache.org/" target="_blank" rel="external">官网下载</a></p>
<h4 id="1-添加系统环境变量"><a href="#1-添加系统环境变量" class="headerlink" title="1. 添加系统环境变量"></a>1. 添加系统环境变量</h4><pre><code>（1）变量名： CATALINA_BASE 变量值： F:\apache-tomcat-7.0.77
（2）变量名： CATALINA_HOME     变量值： F:\apache-tomcat-7.0.77
（3）变量名： CATALINA_TMPDIR     变量值： F:\apache-tomcat-7.0.77\temp
（4）变量名： Path    变量值：F:\apache-tomcat-7.0.77\bin
</code></pre><h4 id="2-检查配置"><a href="#2-检查配置" class="headerlink" title="2. 检查配置"></a>2. 检查配置</h4><p>cmd输入<code>startup.bat</code>,再访问<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
<figure class="image-box">
                <img src="http://wx1.sinaimg.cn/large/789d050dgy1felf0gnhc3j20mw0i20wo.jpg" alt="tomcat运行" title="" class="">
                <p>tomcat运行</p>
            </figure> 
<h4 id="3-中文乱码问题解决"><a href="#3-中文乱码问题解决" class="headerlink" title="3. 中文乱码问题解决"></a>3. 中文乱码问题解决</h4><p>修改在<code>apache-tomcat-7.0.77\conf</code>路径下的<code>server.xml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               connectionTimeout=&quot;20000&quot;</div><div class="line">               redirectPort=&quot;8443&quot; </div><div class="line">			   URIEncoding=&quot;UTF-8&quot;/&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-Apache-Maven"><a href="#2-Apache-Maven" class="headerlink" title="2. Apache Maven"></a>2. Apache Maven</h3><blockquote>
<p>Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.<br>Apache Maven是一个软件项目管理和综合工具。基于项目对象模型（POM）的概念，Maven可以从一个中心资料片管理项目构建，报告和文件。</p>
</blockquote>
<p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">官网下载</a></p>
<h4 id="1-添加系统环境变量-1"><a href="#1-添加系统环境变量-1" class="headerlink" title="1. 添加系统环境变量"></a>1. 添加系统环境变量</h4><pre><code>（1）变量名： M2_HOME 变量值： F:\apache-maven-3.5.0
（2）变量名： MAVEN_HOME     变量值： F:\apache-maven-3.5.0
（3）变量名： Path    变量值：%M2_HOME%\bin
</code></pre><h4 id="2-检查配置-1"><a href="#2-检查配置-1" class="headerlink" title="2. 检查配置"></a>2. 检查配置</h4><p>cmd输入<code>mvn –version</code></p>
<figure class="image-box">
                <img src="http://wx2.sinaimg.cn/large/789d050dgy1felf9oqb4uj20mv0cjack.jpg" alt="mvn检查" title="" class="">
                <p>mvn检查</p>
            </figure> 
<h4 id="3-修改本地仓库存放位置"><a href="#3-修改本地仓库存放位置" class="headerlink" title="3. 修改本地仓库存放位置"></a>3. 修改本地仓库存放位置</h4><p>修改在<code>apache-maven-3.5.0\conf</code>路径下的<code>settings.xml</code>文件</p>
<p><localrepository>对应的是maven的放置目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;localRepository&gt;F:\mavenrepository&lt;/localRepository&gt;</div></pre></td></tr></table></figure></localrepository></p>
]]></content>
      
        
        <tags>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础学习笔记]]></title>
      <url>/2017/04/01/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-python基础"><a href="#1-python基础" class="headerlink" title="1. python基础"></a>1. python基础</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="external">python下载</a><br><a href="https://docs.python.org/2/library/" target="_blank" rel="external">python文档</a><br><a href="http://www.tutorialspoint.com/python/python_exceptions.htm" target="_blank" rel="external">python异常</a></p>
<h3 id="2-Anaconda"><a href="#2-Anaconda" class="headerlink" title="2. Anaconda"></a>2. Anaconda</h3><p>(1)基本</p>
<blockquote>
<p>Anaconda is a completely free Python distribution (including for commercial use and redistribution). It includes more than 300 of the most popular Python packages for science, math, engineering, and data analysis.</p>
</blockquote>
<p><a href="https://www.continuum.io/downloads" target="_blank" rel="external">下载</a><br><a href="https://docs.continuum.io/" target="_blank" rel="external">文档</a><br><a href="https://conda.io/docs/index.html" target="_blank" rel="external">CONDA文档</a></p>
<a id="more"></a>
<p>(2)安装错误</p>
<p>安装时最后一步弹出<code>Traceback (most recent call last):</code>等error<br>解决：</p>
<ol>
<li>安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=15336" target="_blank" rel="external">Microsoft Visual C++ 2008 Redistributable Package (x64)</a> </li>
<li><p>cmd运行    </p>
<p> “C:\Anaconda\pythonw.exe” -E -s “C:\Anaconda\Lib_nsis.py” mkmenus </p>
<p> “C:\Anaconda\pythonw.exe” -E -s “C:\Anaconda\Lib_nsis.py” mkdirs </p>
<p> “C:\Anaconda\pythonw.exe” -E -s “C:\Anaconda\Lib_nsis.py” addpath </p>
</li>
<li>执行<a href="https://stackoverflow.com/questions/34780267/anaconda-python-installation-error中步骤" target="_blank" rel="external">https://stackoverflow.com/questions/34780267/anaconda-python-installation-error中步骤</a></li>
</ol>
<p>encoding error<br><a href="http://www.cnblogs.com/CasonChan/p/4669799.html" target="_blank" rel="external">解决</a></p>
<pre><code>import sys
sys.setdefaultencoding(&apos;utf-8&apos;)
</code></pre><p>(3)部分指令<br>See what packages are installed by running</p>
<pre><code>$ conda list
</code></pre><p>Search for packages with ‘scikit’ in the name:</p>
<pre><code>$ conda search scikit
</code></pre><p>To install a package, use</p>
<pre><code>$ conda install &lt;package-name&gt;
</code></pre><p>To remove a package, use</p>
<pre><code>$ conda remove &lt;package-name&gt;
</code></pre><p>(4)环境管理</p>
<ul>
<li><p>创建环境</p>
<p> conda create -n env_name list of packages</p>
</li>
</ul>
<p><code>-n env_name</code> 设置环境的名称（-n 是指名称）<br><code>list of packages</code> 是要安装在环境中的包的列表。<br>例如，要创建名为 my_env 的环境并在其中安装 numpy，请键入 <code>conda create -n my_env numpy</code>。</p>
<ul>
<li><p>进入环境</p>
<p> activate my_env</p>
</li>
<li><p>离开环境</p>
<p> deactivate</p>
</li>
<li><p>共享环境</p>
</li>
</ul>
<p><code>conda env export &gt; environment.yaml</code> 将包保存为 YAML。第一部分 <code>conda env export</code> 输出环境中的所有包的名称（包括 Python 版本）。</p>
<ul>
<li><p>列出环境</p>
<p> conda env list </p>
</li>
</ul>
<p>当前所在环境的旁边会有一个星号。<br>默认的环境（即当你不在环境中时使用的环境）名为 root。</p>
<ul>
<li><p>删除环境</p>
<p> conda env remove -n env_name </p>
</li>
</ul>
<h3 id="3-PIP"><a href="#3-PIP" class="headerlink" title="3.PIP"></a>3.PIP</h3><ol>
<li>基本</li>
</ol>
<p><a href="https://pypi.python.org/pypi/pip#downloads" target="_blank" rel="external">下载</a><br>解压<br>cmd进入目录运行</p>
<pre><code>python setup.py install
</code></pre><p><a href="https://pip.pypa.io/en/latest/" target="_blank" rel="external">文档</a></p>
<p>2.部分指令</p>
<p>安装PyPI软件</p>
<pre><code>$ pip install [Package]
</code></pre><p>查看安装文件</p>
<pre><code>$ pip show --files
</code></pre><p>查看包更新</p>
<pre><code>$ pip list --outdated
</code></pre><p>升级包</p>
<pre><code>$ pip install --upgrade [Package]
</code></pre><p>卸载包</p>
<pre><code>$ pip uninstall SomePackage
</code></pre><h3 id="4-Jupyter-notebook"><a href="#4-Jupyter-notebook" class="headerlink" title="4.Jupyter notebook"></a>4.Jupyter notebook</h3><p>(1)安装</p>
<pre><code>pip install jupyter notebook
或 conda install jupyter notebook
</code></pre><p>(2)使用</p>
<p>cmd输入<code>jupyter notebook</code><br>浏览器打开<code>http://localhost:8888/tree</code></p>
<p>关闭服务器则在cmd中按两次 <code>Ctrl + C</code></p>
<p>(3)Magic 关键字<br>Magic 关键字是可以在单元格中运行的特殊命令，能让你控制 notebook 本身或执行系统调用（例如更改目录）。</p>
<p>代码计时<br>使用 Magic 命令 timeit 测算函数的运行时间。<br>测算整个单元格的运行时间: <code>%%timeit</code></p>
<p>创建可视化内容<br>使用 <code>%matplotlib</code> 将 matplotlib 设置为以交互方式在 notebook 中工作。<br>Magic 命令的前面带有一个或两个百分号（% 或 %%），分别对应行 Magic 命令和单元格 Magic 命令。<br>行 Magic 命令仅应用于编写 Magic 命令时所在的行，而单元格 Magic 命令应用于整个单元格。<br>要直接在 notebook 中呈现图形，应将内联后端与命令 <code>%matplotlib inline</code> 一起使用。<br>高分屏：在 %matplotlib inline 之后使用 <code>%config InlineBackend.figure_format = &#39;retina&#39;</code> 来呈现分辨率较高的图像。</p>
<p>调试<br>使用 Magic 命令 <code>%pdb</code> 开启交互式调试器<a href="https://docs.python.org/3/library/pdb.html" target="_blank" rel="external">文档</a></p>
<p><a href="http://ipython.readthedocs.io/en/stable/interactive/magics.htmlipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="external">其他magic命令</a></p>
<p>nbconvert将 notebook 转换为 HTML、Markdown、幻灯片等格式。<a href="https://nbconvert.readthedocs.io/en/latest/usage.html" target="_blank" rel="external">文档</a></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VR控件]]></title>
      <url>/2017/03/13/VR%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="1-OrbitControls-js"><a href="#1-OrbitControls-js" class="headerlink" title="1 . OrbitControls.js"></a>1 . OrbitControls.js</h4><p>控制视口（相机）的平移、缩放、旋转。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*OrbitControls轨道控制视口（相机）的平移、缩放、旋转*/</span></div><div class="line">       <span class="comment">/*如果 alpha 值不存在，我们也就不可以访问设备的定位事件，这替代了通过摄像头拖拽鼠标的技术*/</span></div><div class="line">       controls = <span class="keyword">new</span> THREE.OrbitControls(camera, renderer.domElement);</div><div class="line">       <span class="comment">//controls.target.set(0,0,0);</span></div><div class="line">       controls.target.set(</div><div class="line">           camera.position.x,</div><div class="line">           camera.position.y,</div><div class="line">           camera.position.z - <span class="number">0.15</span></div><div class="line">       );</div><div class="line">       controls.noPan = <span class="literal">true</span>;</div><div class="line">       controls.noZoom = <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="2-DeviceOrientationControls-js"><a href="#2-DeviceOrientationControls-js" class="headerlink" title="2 . DeviceOrientationControls.js"></a>2 . DeviceOrientationControls.js</h4><p>监视设备朝向<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDeviceOrientationControls</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">           controls = <span class="keyword">new</span> THREE.DeviceOrientationControls(camera, <span class="literal">true</span>);</div><div class="line">           controls.connect();</div><div class="line">           controls.update();</div><div class="line">           <span class="built_in">window</span>.removeEventListener(<span class="string">'deviceorientation'</span>, setDeviceOrientationControls, <span class="literal">true</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">window</span>.addEventListener(<span class="string">'deviceorientation'</span>, setDeviceOrientationControls, <span class="literal">true</span>);</div><div class="line"></div><div class="line">       <span class="comment">/*在可用设备上，设备朝向事件监听器提供一组 alpha，beta 和 gamma 值。如果没有 alpha 值就不能通过设备朝向进行控制，转而替代的是轨道控制。</span></div><div class="line">        有 alpha 值则使用设备朝向控制摄像头*/</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">setOrientationControls</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (!e.alpha) &#123;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           controls = <span class="keyword">new</span> THREE.DeviceOrientationControls(camera, <span class="literal">true</span>);</div><div class="line">           controls.connect();</div><div class="line">           controls.update();</div><div class="line">           element.addEventListener(<span class="string">'click'</span>, fullscreen, <span class="literal">false</span>);</div><div class="line">           <span class="built_in">window</span>.removeEventListener(<span class="string">'deviceorientation'</span>, setOrientationControls, <span class="literal">true</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="built_in">window</span>.addEventListener(<span class="string">'deviceorientation'</span>, setOrientationControls, <span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
<h4 id="3-StereoEffect-js插件"><a href="#3-StereoEffect-js插件" class="headerlink" title="3 . StereoEffect.js插件"></a>3 . StereoEffect.js插件</h4><p>分屏<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">effect = <span class="keyword">new</span> THREE.StereoEffect(renderer);</div></pre></td></tr></table></figure></p>
<h4 id="4-画布调整和渲染"><a href="#4-画布调整和渲染" class="headerlink" title="4 . 画布调整和渲染"></a>4 . 画布调整和渲染</h4><p>添加至动画函数中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">camera.aspect = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight;</div><div class="line">camera.updateProjectionMatrix();</div><div class="line">renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</div><div class="line">effect.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</div><div class="line"></div><div class="line"><span class="comment">//……</span></div><div class="line"></div><div class="line">controls.update();</div><div class="line"></div><div class="line">effect.render(scene, camera);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FPS记录控件stat.js]]></title>
      <url>/2017/03/12/FPS%E8%AE%B0%E5%BD%95%E6%8E%A7%E4%BB%B6stat.js/</url>
      <content type="html"><![CDATA[<p>1 . 在init()函数中添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stat = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">stat = <span class="keyword">new</span> Stats();</div><div class="line">stat.domElement.style.position = <span class="string">'absolute'</span>;</div><div class="line">stat.domElement.style.right = <span class="string">'0px'</span>;</div><div class="line">stat.domElement.style.top = <span class="string">'0px'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(stat.domElement);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2 . 设置开始帧和结束帧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">stat.begin();</div><div class="line"></div><div class="line"><span class="comment">//动画函数</span></div><div class="line"><span class="comment">//renderer.render(scene, camera);</span></div><div class="line"></div><div class="line">stat.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以直接添加</p>
<pre><code>stat.update();
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Koch曲线实现]]></title>
      <url>/2017/03/11/Koch%E6%9B%B2%E7%BA%BF%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<hr>
<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><a href="https://en.wikipedia.org/wiki/Koch_snowflake" target="_blank" rel="noopener">摘自维基</a>：<br>科赫曲线是一种分形，是de Rham曲线的特例。<br>给定线段AB，科赫曲线可以由以下步骤生成：<br>1.将线段分成三等份（AC,CD,DB）<br>2.以CD为底，向外（内外随意）画一个等边三角形DMC<br>3.将线段CD移去<br>4.分别对AC,CM,MD,DB重复1~3。<br>科赫雪花是以等边三角形三边生成的科赫曲线组成的。每条科赫曲线的长度是无限大，它是连续而无处可微的曲线。</p>
<a id="more"></a>
<h3 id="2-数学原理与Matlab实现"><a href="#2-数学原理与Matlab实现" class="headerlink" title="2. 数学原理与Matlab实现"></a>2. 数学原理与Matlab实现</h3><p>摘自<a href="http://www.weibo.com/p/230418e9a1554a0102vpll" target="_blank" rel="noopener">分形系列之matlab绘制koch曲线</a><br> 1 . 算法分析：<br><figure class="image-box">
                <img src="http://ww1.sinaimg.cn/large/789d050dly1fv6v8hsm15j20810363yg.jpg" alt="描述" title="" class="">
                <p>描述</p>
            </figure><br>在直线段的中间依次插入三个点P2，P3，P4。P2,P4三等分点。P3是P2,P4中点，旋转60°由正交矩阵实现。<br> <figure class="image-box">
                <img src="http://s6.sinaimg.cn/large/004hgvMuzy6SNVJ9Mpf85" alt="旋转矩阵" title="" class="">
                <p>旋转矩阵</p>
            </figure><br>根据初始数据（P1和P5点的坐标），产生图中5个结点的坐标。结点的坐标数组形成一个矩阵，矩阵的第一行为P1的坐标，第二行为P2的坐标……，第五行为P5的坐标。矩阵的第一列元素分别为5个结点的x坐标，第二列元素分别为5个结点的y坐标。<br>进一步考虑Koch曲线形成过程中结点数目的变化规律。设第k次迭代产生的结点数为n(k)，第k+1次迭代产生的结点数为n(k+1)，则n(k)和n(k+1)中间的递推关系为n(k+1)=4n(k)-3。</p>
<p>2 . 代码</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Koch</span><span class="params">(num)</span></span></span><br><span class="line">p = [<span class="number">0</span> <span class="number">0</span>;<span class="number">10</span> <span class="number">0</span>];<span class="comment">%p初始线段两端点</span></span><br><span class="line">n=<span class="number">2</span>;  <span class="comment">%n结点数</span></span><br><span class="line">A=[cos(pi/<span class="number">3</span>) -sin(pi/<span class="number">3</span>);sin(pi/<span class="number">3</span>) cos(pi/<span class="number">3</span>)]; <span class="comment">%旋转矩阵</span></span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:num   <span class="comment">%k为分形次数</span></span><br><span class="line"> d=diff(p)/<span class="number">3</span>;<span class="comment">%diff计算相邻两个点的坐标之差 d得三等分点</span></span><br><span class="line"> m=<span class="number">4</span>*n<span class="number">-3</span>;<span class="comment">%迭代公式</span></span><br><span class="line"> q=p(<span class="number">1</span>:n<span class="number">-1</span>,:); <span class="comment">%以原点为起点,前n-1个点的坐标为终点形成向量</span></span><br><span class="line"> p(<span class="number">5</span>:<span class="number">4</span>:m,:)=p(<span class="number">2</span>:n,:); <span class="comment">%迭代后处于4k+1位置上的点的坐标为迭代前的相应坐标</span></span><br><span class="line"> p(<span class="number">2</span>:<span class="number">4</span>:m,:)=q+d;     <span class="comment">%用向量方法计算迭代后处于4k+2位置上的点的坐标    </span></span><br><span class="line"> p(<span class="number">3</span>:<span class="number">4</span>:m,:)=q+d+d*A';  <span class="comment">%用向量方法计算迭代后处于4k+3位置上的点的坐标   </span></span><br><span class="line"> p(<span class="number">4</span>:<span class="number">4</span>:m,:)=q+<span class="number">2</span>*d;   <span class="comment">%用向量方法计算迭代后处于4k位置上的点的坐标</span></span><br><span class="line"> n=m; <span class="comment">%迭代后新的结点数目</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">plot(p(:,<span class="number">1</span>),p(:,<span class="number">2</span>));</span><br><span class="line">axis([<span class="number">0</span> <span class="number">10</span> <span class="number">0</span> <span class="number">10</span>]);</span><br></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://wx4.sinaimg.cn/mw690/789d050dgy1fdgve4cpq4j20ta0hudib.jpg" alt="matlab演示" title="" class="">
                <p>matlab演示</p>
            </figure>
<h3 id="3-Javascript实现"><a href="#3-Javascript实现" class="headerlink" title="3. Javascript实现"></a>3. Javascript实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;KochCurve&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body onload=<span class="string">"Draw()"</span>&gt;</span><br><span class="line">&lt;form &gt;</span><br><span class="line">    &lt;label&gt;请选择分形次数&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="range" name="points" min="1" max="9" onchange="change()" id="range"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" id="show"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="button" value="Draw" onclick="Draw()"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;br/</span>&gt;</span><br><span class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"600"</span> height=<span class="string">"600"</span></span><br><span class="line">        style=<span class="string">"border: 1px solid #c3c3c3;background-color: antiquewhite"</span>&gt;</span><br><span class="line">    Your browser does not support the canvas element.</span><br><span class="line">&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var c = document.getElementById("</span>myCanvas<span class="string">");</span></span><br><span class="line"><span class="string">    var cxt  = c.getContext("</span><span class="number">2</span>d<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*科赫曲线函数*/</span></span><br><span class="line"><span class="string">    function Koch(p1,p2,n)&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if(n==0)&#123;</span></span><br><span class="line"><span class="string">            drawLine(p1.x,p1.y,p2.x,p2.y);</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var p3 = &#123;&#125;, p4=&#123;&#125;, p5 = &#123;&#125;;</span></span><br><span class="line"><span class="string">        var d53x,d53y;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        p3.x = (2*p1.x + p2.x) / 3;</span></span><br><span class="line"><span class="string">        p3.y = (2*p1.y + p2.y) / 3;</span></span><br><span class="line"><span class="string">        p5.x = (p1.x + 2*p2.x) / 3;</span></span><br><span class="line"><span class="string">        p5.y = (p1.y + 2*p2.y) / 3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        d53x = (p2.x - p1.x)/3;</span></span><br><span class="line"><span class="string">        d53y = (p2.y - p1.y)/3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        p4.x = p3.x+ d53x* Math.cos(Math.PI/3) +d53y*Math.sin(Math.PI/3);</span></span><br><span class="line"><span class="string">        p4.y = p3.y- d53x* Math.sin(Math.PI/3) +d53y*Math.cos(Math.PI/3);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Koch(p1,p3,n-1);</span></span><br><span class="line"><span class="string">        Koch(p3,p4,n-1);</span></span><br><span class="line"><span class="string">        Koch(p4,p5,n-1);</span></span><br><span class="line"><span class="string">        Koch(p5,p2,n-1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function Draw()&#123;</span></span><br><span class="line"><span class="string">        clearCanvas();</span></span><br><span class="line"><span class="string">        var n=parseInt(document.getElementById("</span>range<span class="string">").value);  //传入分形次数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //返回元素的高度和宽度，以像素为单位。</span></span><br><span class="line"><span class="string">        var osa=&#123;x:0,y:c.offsetHeight / 2&#125;;</span></span><br><span class="line"><span class="string">        var osb=&#123;x:c.offsetWidth,y:c.offsetHeight / 2&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Koch(osa, osb, n);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*canvas连线*/</span></span><br><span class="line"><span class="string">    function drawLine(x0,y0,x1,y1)&#123;</span></span><br><span class="line"><span class="string">        cxt.beginPath();</span></span><br><span class="line"><span class="string">        cxt.strokeStyle ="</span><span class="number">00</span>ff00<span class="string">";</span></span><br><span class="line"><span class="string">        //cxt.lineWidth = 2;</span></span><br><span class="line"><span class="string">        cxt.moveTo(x0,y0);</span></span><br><span class="line"><span class="string">        cxt.lineTo(x1,y1);</span></span><br><span class="line"><span class="string">        cxt.stroke();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*清空画布*/</span></span><br><span class="line"><span class="string">    function clearCanvas() &#123;</span></span><br><span class="line"><span class="string">        cxt.clearRect(0,0,c.width,c.height);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*滑块数字显示*/</span></span><br><span class="line"><span class="string">    function change()&#123;</span></span><br><span class="line"><span class="string">        var num = document.getElementById("</span>range<span class="string">");</span></span><br><span class="line"><span class="string">        var location = document.getElementById("</span>show<span class="string">");</span></span><br><span class="line"><span class="string">        location.value = num.value;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一人称视角(FPV)Three.js相机控件]]></title>
      <url>/2017/03/01/%E7%AC%AC%E4%B8%80%E4%BA%BA%E7%A7%B0%E8%A7%86%E8%A7%92(FPV)Three.js%E7%9B%B8%E6%9C%BA%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/mrdoob/three.js/blob/master/examples/js/controls/FirstPersonControls.js" target="_blank" rel="external">FirstPersonControls.js</a></p>
<p><a href="https://github.com/josdirksen/learning-threejs/blob/master/chapter-09/07-first-person-camera.html" target="_blank" rel="external">https://github.com/josdirksen/learning-threejs/blob/master/chapter-09/07-first-person-camera.html</a></p>
<p>代码参考了<br>知乎作者：AanYip So  <a href="https://zhuanlan.zhihu.com/p/20796329" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/20796329</a></p>
<h4 id="1-先定义相机控件和间隔时间"><a href="#1-先定义相机控件和间隔时间" class="headerlink" title="1 . 先定义相机控件和间隔时间"></a>1 . 先定义相机控件和间隔时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> control;</div><div class="line"><span class="keyword">const</span> clock = <span class="keyword">new</span> THREE.Clock(); <span class="comment">//用于计算两次animationFrame之间间隔时间</span></div></pre></td></tr></table></figure>
<h4 id="2-在init（）函数里添加"><a href="#2-在init（）函数里添加" class="headerlink" title="2 . 在init（）函数里添加"></a>2 . 在init（）函数里添加</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*第一人称视觉*/</span></div><div class="line">        control = <span class="keyword">new</span> THREE.FirstPersonControls( camera, canvas);</div><div class="line">        control.movementSpeed = <span class="number">100</span>;   <span class="comment">//镜头移速</span></div><div class="line">        control.lookSpeed = <span class="number">0.125</span>;  <span class="comment">//视觉改变速度</span></div><div class="line">        control.lookVertical = <span class="literal">true</span>;  <span class="comment">//是否允许视觉上下改变</span></div><div class="line"></div><div class="line">        camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">       <span class="comment">// window.addEventListener('mousemove', this.onMouseMove, false);</span></div><div class="line">       <span class="comment">//根据官方源码写的话如下</span></div><div class="line">        <span class="keyword">var</span> _onMouseMove = bind( control, control.onMouseMove );</div><div class="line">        control.domElement.addEventListener( <span class="string">'mousemove'</span>, _onMouseMove, <span class="literal">false</span> );</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"> scope, fn </span>) </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                fn.apply( scope, <span class="built_in">arguments</span> );</div><div class="line"></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h4 id="3-添加到动画中再渲染"><a href="#3-添加到动画中再渲染" class="headerlink" title="3 . 添加到动画中再渲染"></a>3 . 添加到动画中再渲染</h4><pre><code>firstPersoncontrols.update(clock.getDelta());  //此处传入的delta是两次animationFrame的间隔时间，用于计算速度 
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">move() &#123;</div><div class="line">  control.update( clock.getDelta() );   </div><div class="line"></div><div class="line">  renderer.render(scene,camera);</div><div class="line">  requestAnimationFrame(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.move());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Three.js入门指南》学习记录（五）]]></title>
      <url>/2017/02/28/%E3%80%8AThree-js%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="1-每秒帧数-FPS（Frames-Per-Second）"><a href="#1-每秒帧数-FPS（Frames-Per-Second）" class="headerlink" title="1.每秒帧数 FPS（Frames Per Second）"></a>1.每秒帧数 FPS（Frames Per Second）</h4><p>对于Three.js 动画而言，一般 FPS 在 30 到 60 之间都是可取的。</p>
<h4 id="2-setInterval-方法"><a href="#2-setInterval-方法" class="headerlink" title="2.setInterval 方法"></a>2.setInterval 方法</h4><pre><code>setInterval(func, msec)
</code></pre><p>其中， <code>func</code> 是每过 <code>msec</code> 毫秒执行的函数，如果将 <code>func</code>定义为重绘画面的函数，就能实<br>现动画效果。 <code>setInterval</code> 函数返回一个 <code>id</code> ，如果需要停止重绘，需要使用<br><code>clearInterval</code> 方法，并传入该 <code>id</code></p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> scene = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> camera = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> renderer = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> mesh = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> stat = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        stat = <span class="keyword">new</span> Stats();</div><div class="line">        stat.domElement.style.position = <span class="string">'absolute'</span>;</div><div class="line">        stat.domElement.style.right = <span class="string">'0px'</span>;</div><div class="line">        stat.domElement.style.top = <span class="string">'0px'</span>;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(stat.domElement);</div><div class="line"></div><div class="line">        renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">            <span class="attr">canvas</span>: <span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">        &#125;);</div><div class="line">        renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">        scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line"></div><div class="line">        camera = <span class="keyword">new</span> THREE.OrthographicCamera(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">3.75</span>, <span class="number">-3.75</span>, <span class="number">0.1</span>, <span class="number">100</span>);</div><div class="line">        camera.position.set(<span class="number">5</span>, <span class="number">5</span>, <span class="number">20</span>);</div><div class="line">        camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">        scene.add(camera);</div><div class="line"></div><div class="line">        mesh = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</div><div class="line">                <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</div><div class="line">                    <span class="attr">color</span>: <span class="number">0xffff00</span></div><div class="line">                &#125;));</div><div class="line">        scene.add(mesh);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> light = <span class="keyword">new</span> THREE.DirectionalLight(<span class="number">0xffffff</span>);</div><div class="line">        light.position.set(<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>);</div><div class="line">        scene.add(light);</div><div class="line"></div><div class="line">        id = setInterval(draw, <span class="number">20</span>);  <span class="comment">//每 20 毫秒执行 draw 函数</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        stat.begin();</div><div class="line"></div><div class="line">        mesh.rotation.y = (mesh.rotation.y + <span class="number">0.01</span>) % (<span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">        renderer.render(scene, camera);</div><div class="line"></div><div class="line">        stat.end();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (id !== <span class="literal">null</span>) &#123;</div><div class="line">            clearInterval(id);</div><div class="line">            id = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Three.js入门指南》学习记录（四）]]></title>
      <url>/2017/02/28/%E3%80%8AThree-js%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="1-基本材质（BasicMaterial）"><a href="#1-基本材质（BasicMaterial）" class="headerlink" title="1.基本材质（BasicMaterial）"></a>1.基本材质（BasicMaterial）</h4><pre><code>THREE.MeshLambertMaterial(opt)
</code></pre><p>渲染后物体的颜色始终为该材质的颜色，而不会由于光照产生明暗、阴影效果。如果没有指定材质的颜色，则颜色是随机的。</p>
<h4 id="2-Lambert-材质（MeshLambertMaterial）"><a href="#2-Lambert-材质（MeshLambertMaterial）" class="headerlink" title="2.Lambert 材质（MeshLambertMaterial）"></a>2.Lambert 材质（MeshLambertMaterial）</h4><p>只考虑漫反射而不考虑镜面反射</p>
<pre><code>Idiffuse = Kd * Id * cos(theta)
</code></pre><p>其中， <code>Idiffuse</code> 是漫反射光强， <code>Kd</code> 是物体表面的漫反射属性， <code>Id</code> 是光强， <code>theta</code> 是光的入射角弧度</p>
<p><code>color</code>  表现材质对散射光的反射能力，也是最常用来设置材质颜色的属性<br><code>ambient</code> 表示对环境光的反射能力，只有当设置了 AmbientLight后，该值才是有效的，<br>材质对环境光的反射能力与环境光强相乘后得到材质实际表现的颜色。<br><code>emissive</code> 是材质的自发光颜色，可以用来表现光源的颜色。</p>
<h4 id="3-Phong-材质（MeshPhongMaterial）"><a href="#3-Phong-材质（MeshPhongMaterial）" class="headerlink" title="3.Phong 材质（MeshPhongMaterial）"></a>3.Phong 材质（MeshPhongMaterial）</h4><p>考虑了镜面反射的效果</p>
<pre><code>Ispecular = Ks * Is * (cos(alpha)) ^ n
</code></pre><p> <code>Ispecular</code> 是镜面反射的光强，<code>Ks</code> 是材质表面镜面反射系数， <code>Is</code> 是光源强度，<br><code>alpha</code> 是反射光与视线的夹角，<code>n</code> 是高光指数，越大则高光光斑越小。</p>
<p><code>specular</code> 值指定镜面反射系数</p>
<h4 id="4-法向材质"><a href="#4-法向材质" class="headerlink" title="4.法向材质"></a>4.法向材质</h4><p>将材质的颜色设置为其法向量的方向</p>
<pre><code>new THREE.MeshNormalMaterial()
</code></pre><h4 id="5-纹理贴图"><a href="#5-纹理贴图" class="headerlink" title="5.纹理贴图"></a>5.纹理贴图</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//渲染器</span></div><div class="line">            <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">                <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">            &#125;);</div><div class="line">            renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">            <span class="comment">//场景</span></div><div class="line">            <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line">            <span class="comment">//照相机</span></div><div class="line">            <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">7.5</span>, <span class="number">-7.5</span>, <span class="number">0.1</span>, <span class="number">100</span>);</div><div class="line">            camera.position.set(<span class="number">-5</span>, <span class="number">25</span>, <span class="number">25</span>);</div><div class="line">            camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">            scene.add(camera);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//光照</span></div><div class="line">            <span class="keyword">var</span> light = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>, <span class="number">1</span>, <span class="number">1000</span>);</div><div class="line">            light.position.set(<span class="number">15</span>,<span class="number">25</span>,<span class="number">20</span>);</div><div class="line">            scene.add(light);</div><div class="line"></div><div class="line">            <span class="comment">//材质</span></div><div class="line"><span class="comment">//            var texture = THREE.ImageUtils.loadTexture('img',&#123;&#125;,function()&#123;</span></div><div class="line"><span class="comment">//                renderer.render(scene,camera);</span></div><div class="line"><span class="comment">//            &#125;);</span></div><div class="line"></div><div class="line">            <span class="keyword">var</span> materials = [];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;++i)&#123;</div><div class="line">                materials.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</div><div class="line">                    <span class="attr">map</span>: THREE.ImageUtils.loadTexture(<span class="string">'img/'</span>+i+<span class="string">'.png'</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    renderer.render(scene,camera);</div><div class="line">                &#125;),</div><div class="line">                    <span class="attr">overdraw</span>: <span class="literal">true</span></div><div class="line"></div><div class="line">                &#125;));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.CubeGeometry(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>),</div><div class="line">                <span class="keyword">new</span> THREE.MeshFaceMaterial(materials));</div><div class="line">            scene.add(cube);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//渲染</span></div><div class="line">            renderer.render(scene,camera);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="6-棋盘格（重复贴图）"><a href="#6-棋盘格（重复贴图）" class="headerlink" title="6.棋盘格（重复贴图）"></a>6.棋盘格（重复贴图）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//渲染器</span></div><div class="line">            <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">                <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">            &#125;);</div><div class="line">            renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">            <span class="comment">//场景</span></div><div class="line">            <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line">            <span class="comment">//照相机</span></div><div class="line">            <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">7.5</span>, <span class="number">-7.5</span>, <span class="number">0.1</span>, <span class="number">100</span>);</div><div class="line">            camera.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">25</span>);</div><div class="line">            camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">            scene.add(camera);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//光照</span></div><div class="line">            <span class="keyword">var</span> light = <span class="keyword">new</span> THREE.PointLight(<span class="number">0xffffff</span>, <span class="number">1</span>, <span class="number">1000</span>);</div><div class="line">            light.position.set(<span class="number">15</span>,<span class="number">25</span>,<span class="number">20</span>);</div><div class="line">            scene.add(light);</div><div class="line"></div><div class="line">            <span class="comment">//材质</span></div><div class="line">            <span class="keyword">var</span> texture = THREE.ImageUtils.loadTexture(<span class="string">'img/chess.png'</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                renderer.render(scene,camera);</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//重复4次为8行8列</span></div><div class="line">            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;</div><div class="line">            texture.repeat.set(<span class="number">4</span>,<span class="number">4</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</div><div class="line">                <span class="attr">map</span>: texture</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">var</span> plane = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.PlaneGeometry(<span class="number">12</span>, <span class="number">12</span>), material);</div><div class="line">            scene.add(plane);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//渲染</span></div><div class="line">            renderer.render(scene,camera);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Three.js入门指南》学习记录（三）]]></title>
      <url>/2017/02/28/%E3%80%8AThree-js%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="1-立方体（CubeGeometry）"><a href="#1-立方体（CubeGeometry）" class="headerlink" title="1.立方体（CubeGeometry）"></a>1.立方体（CubeGeometry）</h4><pre><code>THREE.CubeGeometry(width, height,depth,widthSegments,heightSegments,depthSegments)
</code></pre><p><code>width</code> : x 方向上的长度<br><code>height</code>: y 方向上的长度<br><code>depth</code>: z 方向上的长度<br>后三个参数分别是在三个方向上的分段数，如 widthSegments为3的话，代表x方向上水平分为三份。后三个参数的缺省值为 1。<br>（对六个面进行分段，而不是对立方体的体素分段）</p>
<h4 id="2-平面（PlaneGeometry）"><a href="#2-平面（PlaneGeometry）" class="headerlink" title="2.平面（PlaneGeometry）"></a>2.平面（PlaneGeometry）</h4><pre><code>THREE.PlaneGeometry(width, height, widthSegments, heightSegments)
</code></pre><h4 id="3-球体（SphereGeometry）"><a href="#3-球体（SphereGeometry）" class="headerlink" title="3.球体（SphereGeometry）"></a>3.球体（SphereGeometry）</h4><pre><code>THREE.SphereGeometry(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength)
</code></pre><p><code>radius</code>: 半径<br><code>segmentsWidth</code>: 表示经度上的切片<br><code>segmentsHeight</code>: 表示纬度上的切片数<br><code>phiStart</code>: 表示经度开始的弧度<br><code>phiLength</code>: 表示经度跨过的弧度<br><code>thetaStart</code>: 表示纬度开始的弧度<br><code>thetaLength</code>: 表示纬度跨过的弧度</p>
<h4 id="4-圆形（CircleGeometry）"><a href="#4-圆形（CircleGeometry）" class="headerlink" title="4.圆形（CircleGeometry）"></a>4.圆形（CircleGeometry）</h4><pre><code>THREE.CircleGeometry(radius, segments, thetaStart, thetaLength)
</code></pre><h4 id="5-圆柱体（CylinderGeometry）"><a href="#5-圆柱体（CylinderGeometry）" class="headerlink" title="5.圆柱体（CylinderGeometry）"></a>5.圆柱体（CylinderGeometry）</h4><pre><code>THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)
</code></pre><p><code>radiusTop</code> 顶面半径<br><code>radiusBottom</code> 底面半径<br><code>height</code> 圆柱体的高度；<br><code>radiusSegments</code> 与 <code>heightSegments</code> 可类比球体中的分段<br><code>openEnded</code> 是一个布尔值，表示是否没有顶面和底面，缺省值为 false ，表示有顶面和底面。</p>
<h4 id="6-正四面体（TetrahedronGeometry）、正八面体（OctahedronGeometry）、正二十面体（IcosahedronGeometry）"><a href="#6-正四面体（TetrahedronGeometry）、正八面体（OctahedronGeometry）、正二十面体（IcosahedronGeometry）" class="headerlink" title="6.正四面体（TetrahedronGeometry）、正八面体（OctahedronGeometry）、正二十面体（IcosahedronGeometry）"></a>6.正四面体（TetrahedronGeometry）、正八面体（OctahedronGeometry）、正二十面体（IcosahedronGeometry）</h4><pre><code>THREE.TetrahedronGeometry(radius, detail)
THREE.OctahedronGeometry(radius, detail)
THREE.IcosahedronGeometry(radius, detail)
</code></pre><p><code>radius</code> 半径<br><code>detail</code> 细节层次（Level of Detail）的层数，一般可以对这个值缺省   </p>
<h4 id="7-圆环面（TorusGeometry）"><a href="#7-圆环面（TorusGeometry）" class="headerlink" title="7.圆环面（TorusGeometry）"></a>7.圆环面（TorusGeometry）</h4><pre><code>THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)
</code></pre><p> <code>radius</code> 圆环半径<br> <code>tube</code> 管道半径<br> <code>radialSegments</code> 与 <code>tubularSegments</code> 分别是两个分段数<br> <code>arc</code> 圆环面的弧度，缺省值为 Math.PI * 2     </p>
<h4 id="8-文字形状（TextGeometry）"><a href="#8-文字形状（TextGeometry）" class="headerlink" title="8.文字形状（TextGeometry）"></a>8.文字形状（TextGeometry）</h4><pre><code>THREE.TextGeometry(text, parameters)
</code></pre><p><code>text</code> 文字字符串<br><code>parameters</code> 是以下参数组成的对象：</p>
<ul>
<li>size ：字号大小，一般为大写字母的高度</li>
<li>height ：文字的厚度</li>
<li>curveSegments ：弧线分段数，使得文字的曲线更加光滑</li>
<li>font ：字体，默认是 ‘helvetiker’ ，需对应引用的字体文件</li>
<li>weight ：值为 ‘normal’ 或 ‘bold’ ，表示是否加粗</li>
<li>style ：值为 ‘normal’ 或 ‘italics’ ，表示是否斜体</li>
<li>bevelEnabled ：布尔值，是否使用倒角，意为在边缘处斜切</li>
<li>bevelThickness ：倒角厚度</li>
<li>bevelSize ：倒角宽度</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//渲染器</span></div><div class="line">            <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">                <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">            &#125;);</div><div class="line">            renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">            <span class="comment">//场景</span></div><div class="line">            <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line">            <span class="comment">//照相机</span></div><div class="line">            <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(<span class="number">-2.5</span>, <span class="number">2.5</span>, <span class="number">1.875</span>, <span class="number">-1.875</span>, <span class="number">0.1</span>, <span class="number">100</span>);</div><div class="line">            camera.position.set(<span class="number">5</span>, <span class="number">5</span>, <span class="number">20</span>);</div><div class="line">            camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">            scene.add(camera);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</div><div class="line">                <span class="attr">color</span>: <span class="number">0xffff00</span></div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> loader = <span class="keyword">new</span> THREE.FontLoader();</div><div class="line">            loader.load(<span class="string">'gothical_Regular.json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">font</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.TextGeometry(<span class="string">'Hello'</span>, &#123;</div><div class="line">                    <span class="attr">font</span>: font,</div><div class="line">                    <span class="attr">size</span>: <span class="number">1</span>,</div><div class="line">                    <span class="attr">height</span>: <span class="number">1</span></div><div class="line">                &#125;), material);</div><div class="line">                scene.add(mesh);</div><div class="line">            <span class="comment">//渲染</span></div><div class="line">            renderer.render(scene,camera);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="9-自定义形状"><a href="#9-自定义形状" class="headerlink" title="9.自定义形状"></a>9.自定义形状</h4><pre><code>THREE.Geometry()
</code></pre><p><a href="https://threejs.org/docs/index.html?q=ge#Reference/Core/Geometry" target="_blank" rel="external">https://threejs.org/docs/index.html?q=ge#Reference/Core/Geometry</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Three.js入门指南》学习记录（二）]]></title>
      <url>/2017/02/28/%E3%80%8AThree-js%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="1-照相机"><a href="#1-照相机" class="headerlink" title="1.照相机"></a>1.照相机</h4><p>定义了三维空间到二维屏幕的投影方式</p>
<h4 id="2-正交投影照相机（Orthographic-Camera）"><a href="#2-正交投影照相机（Orthographic-Camera）" class="headerlink" title="2.正交投影照相机（Orthographic Camera）"></a>2.正交投影照相机（Orthographic Camera）</h4><figure class="image-box">
                <img src="http://techbrood.com/threejs/docs/images/ortho.jpg" alt="正交投影相机" title="" class="">
                <p>正交投影相机</p>
            </figure>
<h4 id="3-视体（viewing-frustum）"><a href="#3-视体（viewing-frustum）" class="headerlink" title="3.视体（viewing frustum）"></a>3.视体（viewing frustum）</h4><p>又称视景体、视锥，是三维世界中在屏幕上可见的区域，即虚拟摄像机的视野。</p>
<pre><code>THREE.OrthographicCamera(left, right, top, bottom, near, far)
</code></pre><p>为了保持照相机的横竖比例，需要保证 (right - left) 与 (top - bottom) 的比例与 Canvas宽度与高度的比例一致。<br>near 与 far 都是指到照相机位置在深度平面的位置，而照相机不应该拍摄到其后方的物<br>体，因此这两个值应该均为正值。为了保证场景中的物体不会因为太近或太远而被照相机<br>忽略，一般 near 的值设置得较小， far 的值设置得较大，具体值视场景中物体的位置等<br>决定。</p>
<h4 id="4-观察方向"><a href="#4-观察方向" class="headerlink" title="4.观察方向"></a>4.观察方向</h4><p>照相机沿 z 轴负方向观察</p>
<pre><code>.lookAt ( vector )
</code></pre><p>vector — 观察点</p>
<p>该函数设定相机在全局空间中的位置。</p>
<pre><code>camera.lookAt(new THREE.Vector3(0, 0, 0));  //看着原点方向
</code></pre><h4 id="5-正交照相机总结"><a href="#5-正交照相机总结" class="headerlink" title="5.正交照相机总结"></a>5.正交照相机总结</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//渲染器</span></div><div class="line">            <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">                <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">            &#125;);</div><div class="line">            renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">            <span class="comment">//场景</span></div><div class="line">            <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line">            <span class="comment">//照相机</span></div><div class="line">            <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">1.5</span>, <span class="number">-1.5</span>, <span class="number">1</span>, <span class="number">10</span>);</div><div class="line">            camera.position.set(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">5</span>);</div><div class="line">            camera.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">            scene.add(camera);</div><div class="line">            <span class="comment">//创建边长为1的红色正方体，wireframe（线框）材质，以便看到正方体后方的边</span></div><div class="line">            <span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</div><div class="line">                    <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</div><div class="line">                        <span class="attr">color</span>:<span class="number">0xff0000</span>,</div><div class="line">                        <span class="attr">wireframe</span>:<span class="literal">true</span></div><div class="line">                    &#125;)</div><div class="line">            );</div><div class="line">            scene.add(cube);</div><div class="line">            <span class="comment">//渲染</span></div><div class="line">            renderer.render(scene,camera);</div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="6-透视投影照相机（Perspective-Camera）"><a href="#6-透视投影照相机（Perspective-Camera）" class="headerlink" title="6.透视投影照相机（Perspective Camera）"></a>6.透视投影照相机（Perspective Camera）</h4><figure class="image-box">
                <img src="http://techbrood.com/ueditor/php/upload/image/20160525/1464141326848754.png" alt="透视投影照相机" title="" class="">
                <p>透视投影照相机</p>
            </figure>
<pre><code>THREE.PerspectiveCamera(fov, aspect, near, far)
</code></pre><p>fov — 相机视锥体竖直方向上的张角（是角度制而非弧度制）<br>aspect — 相机视锥体宽高比width / height，通常设为Canvas 的横纵比例<br>near — 相机视锥体近裁剪面<br>far — 相机视锥体远裁剪面</p>
<p>near 和 far 分别是照相机到视景体最近、最远的距离，均为正值，且 far 应大于near。</p>
<p>fov增大时视景体变大，物体相对于整个视景体的大小变小，看起来就显得变小了。</p>
<h4 id="7-透视照相机总结"><a href="#7-透视照相机总结" class="headerlink" title="7.透视照相机总结"></a>7.透视照相机总结</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="comment">//渲染器</span></div><div class="line">          <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">              <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">          &#125;);</div><div class="line">          renderer.setClearColor(<span class="number">0x000000</span>);</div><div class="line">          <span class="comment">//场景</span></div><div class="line">          <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div><div class="line">          <span class="comment">//照相机</span></div><div class="line">          <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">60</span>, <span class="number">400</span> / <span class="number">300</span>, <span class="number">1</span>, <span class="number">10</span>);</div><div class="line">          camera.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</div><div class="line">          scene.add(camera);</div><div class="line">          <span class="comment">//创建边长为1的红色正方体，wireframe（线框）材质，以便看到正方体后方的边</span></div><div class="line">          <span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(<span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>),</div><div class="line">                  <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</div><div class="line">                      <span class="attr">color</span>:<span class="number">0xff0000</span>,</div><div class="line">                      <span class="attr">wireframe</span>:<span class="literal">true</span></div><div class="line">                  &#125;)</div><div class="line">          );</div><div class="line">          scene.add(cube);</div><div class="line">          <span class="comment">//渲染</span></div><div class="line">          renderer.render(scene,camera);</div><div class="line">      &#125;</div><div class="line">  &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo重装]]></title>
      <url>/2017/02/28/hexo%E9%87%8D%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>寒假回来准备更新，发现博客的css文件出问题了，折腾一晚上还是没有结果，无奈重装。<br>记录一下重装时出的问题。<strong>论备份的重要性</strong></p>
<h4 id="1-config-yml文件务必保存，hexo-source-posts目录下的文章也要备份。"><a href="#1-config-yml文件务必保存，hexo-source-posts目录下的文章也要备份。" class="headerlink" title="1. _config.yml文件务必保存，hexo\source\_posts目录下的文章也要备份。"></a>1. <code>_config.yml</code>文件务必保存，<code>hexo\source\_posts</code>目录下的文章也要备份。</h4><h4 id="2-找个文件夹放hexo基本文件"><a href="#2-找个文件夹放hexo基本文件" class="headerlink" title="2. 找个文件夹放hexo基本文件"></a>2. 找个文件夹放hexo基本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>然后把原来保存的文件clone过去，有域名的别忘了<code>CNAME</code>文件</p>
<h4 id="3-ERROR-Deployer-not-found-git问题解决"><a href="#3-ERROR-Deployer-not-found-git问题解决" class="headerlink" title="3. ERROR Deployer not found: git问题解决"></a>3. ERROR Deployer not found: git问题解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h4 id="4-本地测试"><a href="#4-本地测试" class="headerlink" title="4. 本地测试"></a>4. 本地测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p><a href="http://localhost:4000显示" target="_blank" rel="external">http://localhost:4000显示</a></p>
<h4 id="5-编译和部署"><a href="#5-编译和部署" class="headerlink" title="5. 编译和部署"></a>5. 编译和部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Three.js入门指南》学习记录（一）]]></title>
      <url>/2017/02/27/%E3%80%8AThree.js%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="1-定义Canvas-元素"><a href="#1-定义Canvas-元素" class="headerlink" title="1.定义Canvas 元素"></a>1.定义Canvas 元素</h4><p>WebGL 的渲染是需要 HTML5 Canvas 元素的。</p>
<pre><code>&lt;canvas id=&quot;mainCanvas&quot; width=&quot;400px&quot; height=&quot;300px&quot;&gt;&lt;/canvas&gt;
</code></pre><h4 id="2-渲染器（Renderer）"><a href="#2-渲染器（Renderer）" class="headerlink" title="2.渲染器（Renderer）"></a>2.渲染器（Renderer）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</div><div class="line">            <span class="attr">canvas</span>:<span class="built_in">document</span>.getElementById(<span class="string">'mainCanvas'</span>)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>若未定义canvas元素则</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</div><div class="line">renderer.setSize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(renderer.domElement);</div></pre></td></tr></table></figure>
<p>设置背景色<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">renderer.setClearColor(<span class="number">0x000000</span>);</div></pre></td></tr></table></figure></p>
<h4 id="3-场景（Scene）"><a href="#3-场景（Scene）" class="headerlink" title="3.场景（Scene）"></a>3.场景（Scene）</h4><p>场景相当于容器，物体都添加进场景中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="4-照相机（Camera）"><a href="#4-照相机（Camera）" class="headerlink" title="4.照相机（Camera）"></a>4.照相机（Camera）</h4><p>WebGL 和 Three.js 使用右手坐标系。<br><strong>照相机也要被添加到场景中。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, <span class="number">4</span> / <span class="number">3</span>, <span class="number">1</span>, <span class="number">1000</span>);</div><div class="line">camera.position.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</div><div class="line">scene.add(camera);</div></pre></td></tr></table></figure></p>
<h4 id="5-渲染"><a href="#5-渲染" class="headerlink" title="5.渲染"></a>5.渲染</h4><p>调用渲染器的渲染函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">renderer.render(scene,camera);</div></pre></td></tr></table></figure></p>
<h4 id="6-第一节总结"><a href="#6-第一节总结" class="headerlink" title="6.第一节总结"></a>6.第一节总结</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;body onload="init()"&gt;</div><div class="line">    &lt;canvas id="mainCanvas" width="400px" height="300px"&gt;&lt;/canvas&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    function init()&#123;</div><div class="line">        //渲染器</div><div class="line">        var renderer = new THREE.WebGLRenderer(&#123;</div><div class="line">            canvas:document.getElementById('mainCanvas')</div><div class="line">        &#125;);</div><div class="line">        renderer.setClearColor(0x000000);</div><div class="line">        //场景</div><div class="line">        var scene = new THREE.Scene();</div><div class="line">        //照相机</div><div class="line">        var camera = new THREE.PerspectiveCamera(45, 4 / 3, 1, 1000);</div><div class="line">        camera.position.set(0, 0, 5);</div><div class="line">        scene.add(camera);</div><div class="line">        //创建x、y、z 方向长度1、2、 3的红色长方体</div><div class="line">        var cube = new THREE.Mesh(new THREE.CubeGeometry(1,2,3),</div><div class="line">                new THREE.MeshBasicMaterial(&#123;</div><div class="line">                    color:0xff0000</div><div class="line">                &#125;)</div><div class="line">        );</div><div class="line">        scene.add(cube);</div><div class="line">        //渲染</div><div class="line">        renderer.render(scene,camera);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Three.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[酸酸乳]]></title>
      <url>/2017/01/01/%E9%85%B8%E9%85%B8%E4%B9%B3/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>摘抄自<a href="https://www.letxxt.com" target="_blank" rel="noopener">https://www.letxxt.com</a></p>
<pre><code>wget letxxt.com/download/shadowsocksr.zip;unzip shadowsocksr.zip
</code></pre><p>进入shadowsocksr 目录</p>
<pre><code>cd shadowsocksr
</code></pre><p>初始化shadowsocksr</p>
<pre><code>bash initcfg.sh
</code></pre><p>进入shadowsocksr子目录运行</p>
<pre><code>cd shadowsocks

python server.py -p 8888 -k password -m aes-256-cfb -O auth_aes128_md5 -otls1.2_ticket_auth -d start
</code></pre><p>显示 started ,此时，shadowsocks服务端已经在你的服务器运行了</p>
<p>此时，我们用ssr客户端连接却发现并不能上网，这里是因为防火墙还没有关闭</p>
<p>执行</p>
<pre><code>service iptables stop
</code></pre><p>此时就算搭建完成了</p>
<p>修改ss防火墙代码</p>
<pre><code>vi /etc/sysconfig/iptables
</code></pre><p>在文件的中间插入下面2行代码</p>
<pre><code>-A INPUT -p udp -m state --state NEW -m udp --dport 8888 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 8888 -j ACCEPT
</code></pre><p>之后</p>
<pre><code>service iptables restart
</code></pre><p>配置完成 ~</p>
<p>关闭</p>
<pre><code>./server.py -d stop
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git版本控制]]></title>
      <url>/2016/12/01/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="1-版本控制类型"><a href="#1-版本控制类型" class="headerlink" title="1. 版本控制类型"></a>1. 版本控制类型</h3><p>版本控制系统模型包括两大主要类型：</p>
<ul>
<li>集中式模型 - 所有用户都连接到一个中央的主仓库（master repository）</li>
<li>分布式模型 - 每个用户都在自己的计算机上拥有完整的仓库</li>
</ul>
<p><a href="https://www.atlassian.com/blog/software-teams/version-control-centralized-dvcs" target="_blank" rel="external">What is version control: centralized vs. DVCS</a><br><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external">分散式版本控制</a></p>
<h3 id="2-术语"><a href="#2-术语" class="headerlink" title="2. 术语"></a>2. 术语</h3><p><strong>版本控制系统 / 源代码管理器</strong><br><code>版本控制系统</code>（简称<code>VCS</code>）是一个管理源代码不同版本的工具。<code>源代码管理器</code>（简称 <code>SCM</code>）是版本控制系统的另一个名称。</p>
<p>Git 是一个 SCM（因此也是 VCS！）。Git 网站的 URL 是 <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a> （注意它的域名中直接包含“SCM”！）。</p>
<p><strong>提交（Commit）</strong><br>Git 将数据看做微型文件系统的一组快照。每次 <code>commit</code>（在 Git 中保持项目状态），它都对文件当时的状况拍照，并存储对该快照的引用。你可以将其看做游戏中的保存点，它会保存项目的文件和关于文件的所有信息。</p>
<p>你在 Git 中的所有操作都是帮助你进行 commit，因此 commit 是 Git 中的基本单位。</p>
<p><strong>仓库（Repository / repo）</strong><br>仓库是一个包含项目内容以及几个文件（在 Mac OS X 上默认地处于隐藏状态）的目录，用来与 Git 进行通信。仓库可以存储在本地，或作为远程副本存储在其他计算机上。仓库是由 commit 构成的。</p>
<p><strong>工作目录 / 工作区（Working Directory）</strong><br>工作目录是你在计算机的文件系统中看到的文件。当你在代码编辑器中打开项目文件时，你是在工作目录中处理文件。</p>
<p>与这些文件形成对比的是保持在仓库中（在 commit 中！）的文件。</p>
<p>在使用 Git 时，工作目录与命令行工具的 <code>current working directory</code> （当前工作目录）不一样，后者是 shell 当前正在查看的目录。</p>
<p><strong>检出（Checkout）</strong><br>检出是指将仓库中的内容复制到工作目录下。</p>
<p><strong>暂存区 / 暂存索引 / 索引（Staging Area / Staging Index / Index）</strong><br>Git 目录下的一个文件，存储的是即将进入下个 commit 内容的信息。可以将暂存区看做准备工作台，Git 将在此区域获取下个 commit。暂存索引中的文件是准备添加到仓库中的文件。</p>
<p><strong>SHA</strong><br>SHA 是每个 commit 的 ID 编号。以下是 commit 的 SHA 示例：e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6。</p>
<p>它是一个长 40 个字符的字符串（由 0–9 和 a–f 组成），并根据 Git 中的文件或目录结构的内容计算得出。SHA 的全称是”Secure Hash Algorithm”（安全哈希算法）。</p>
<p><strong>分支（Branch）</strong><br>分支是从主开发流程中分支出来的新的开发流程。这种分支开发流程可以在不更改主流程的情况下继续延伸下去。</p>
<p>回到之前关于游戏保存点的示例，你可以将分支看做在游戏中设立保存点后，尝试一个有风险的招式。如果有风险的招式不奏效，则回到保存的位置。令分支非常强大的关键之处是你可以在一个分支上设定保存点，然后切换到另一个分支并继续设定保存点。</p>
<h3 id="3-git设置"><a href="#3-git设置" class="headerlink" title="3. git设置"></a>3. git设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 设置你的 Git 用户名</div><div class="line">git config --global user.name &quot;&lt;Your-Full-Name&gt;&quot;</div><div class="line"></div><div class="line"># 设置你的 Git 邮箱</div><div class="line">git config --global user.email &quot;&lt;your-email-address&gt;&quot;</div><div class="line"></div><div class="line"># 确保 Git 输出内容带有颜色标记</div><div class="line">git config --global color.ui auto</div><div class="line"></div><div class="line"># 对比显示原始状态</div><div class="line">git config --global merge.conflictstyle diff3</div><div class="line"></div><div class="line">git config --list</div></pre></td></tr></table></figure>
<p>Atom Editor 设置</p>
<pre><code>git config --global core.editor &quot;atom --wait&quot;
</code></pre><h3 id="3-git-init"><a href="#3-git-init" class="headerlink" title="3. git init"></a>3. git init</h3><p>运行 <code>git init</code> 命令会初始化 Git 跟踪所有内容会用到的所有必要文件和目录。所有这些文件都存储在叫做 <code>.git</code>（隐藏目录）的目录下。这个<code>.git</code> 目录是一个库！Git 会将所有 <code>commit</code> 记录在这里，并跟踪所有内容！</p>
<p><strong>.git 目录内容</strong></p>
<ul>
<li>配置文件 - 存储了所有与项目有关的配置设置。</li>
<li>description 文件 - 此文件仅用于 GitWeb 程序，因此可以忽略</li>
<li>hooks 目录 - 我们会在此处放置客户端或服务器端脚本，以便用来连接到 Git 的不同生命周期事件</li>
<li>info 目录 - 包含全局排除文件</li>
<li>objects 目录 - 此目录将存储我们提交的所有 commit</li>
<li>refs 目录 - 此目录存储了指向 commit 的指针（通常是“分支”和“标签”）</li>
</ul>
<p><a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain" target="_blank" rel="external">Git 内部原理 - 底层命令和高层命令</a></p>
<p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="external">自定义 Git - Git Hooks</a></p>
<p><a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository" target="_blank" rel="external">在现有目录中初始化仓库</a><br><a href="https://git-scm.com/docs/git-init" target="_blank" rel="external">git init 文档</a><br><a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#Initializing-a-Repository-in-an-Existing-Directory" target="_blank" rel="external">git init 教程</a></p>
<h3 id="4-git-clone"><a href="#4-git-clone" class="headerlink" title="4. git clone"></a>4. git clone</h3><p><strong>验证终端位置</strong><br>提示：在克隆任何内容之前，确保命令行工具已定位于正确的目录下。克隆项目会新建一个目录，并将克隆的 Git 仓库放在其中。问题是无法创建嵌套的 Git 仓库。因此，确保终端的当前工作目录没有位于 Git 仓库中。如果当前工作目录没有在 shell 的提示符中显示，输入 pwd 输出工作目录。</p>
<p>git clone 命令用于创建一个与现有仓库完全相同的副本。</p>
<pre><code>$ git clone &lt;path-to-repository-to-clone&gt;
</code></pre><p>该命令：</p>
<ul>
<li>会获取现有仓库的路径</li>
<li>默认地将创建一个与被克隆的仓库名称相同的目录</li>
<li>可以提供第二个参数，作为该目录的名称</li>
<li>将在现有工作目录下创建一个新的仓库</li>
</ul>
<p><a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository" target="_blank" rel="external">克隆现有仓库</a><br><a href="https://git-scm.com/docs/git-clone" target="_blank" rel="external">git 克隆文档</a><br><a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository" target="_blank" rel="external">git 克隆教程</a></p>
<a id="more"></a> 
<h3 id="5-git-status"><a href="#5-git-status" class="headerlink" title="5. git status"></a>5. git status</h3><p>git status 是了解 Git 的核心所在。它将告诉我们 Git 正在考虑什么，以及 Git 所看到的我们仓库的状态。</p>
<pre><code>$ git status
</code></pre><p>证明此仓库尚无任何 commit,此处fatal为git程序正在退出</p>
<pre><code>$ git log
fatal: your current branch &apos;master&apos; does not have any commits yet
</code></pre><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Checking-the-Status-of-Your-Files" target="_blank" rel="external">查看文件的状态</a><br><a href="https://git-scm.com/docs/git-status" target="_blank" rel="external">git status 文档</a><br><a href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-status" target="_blank" rel="external">git status 教程</a></p>
<h3 id="6-git-log"><a href="#6-git-log" class="headerlink" title="6. git log"></a>6. git log</h3><p>git log 命令用于显示仓库中所有 commit 的信息。<br>默认情况下，该命令会显示仓库中每个 commit 的：<strong><em>SHA、作者、日期、消息</em></strong>。</p>
<pre><code>$ git log
</code></pre><p>在命令行上使用分页器了解日志内容：</p>
<ul>
<li>要向下滚动，按下</li>
</ul>
<ol>
<li><code>j</code> 或 <code>↓</code> 一次向下移动一行</li>
<li><code>d</code>按照一半的屏幕幅面移动</li>
<li><code>f</code> 按照整个屏幕幅面移动</li>
</ol>
<ul>
<li>要 向上滚动，按下</li>
</ul>
<ol>
<li>k 或 ↑ 一次向上移动一行</li>
<li>u 按照一半的屏幕幅面移动</li>
<li>b 按照整个屏幕幅面移动</li>
</ol>
<ul>
<li>按下 q 可以退出日志（返回普通的命令提示符）</li>
</ul>
<p><code>ls</code>命令将列出当前目录下的所有文件。<code>ls -l</code>会显示 long 格式的信息（-l 表示 long）。</p>
<p>只显示7位SHA和commit消息：</p>
<pre><code>$ git log --oneline
</code></pre><p>显示 commit 中更改的文件以及添加或删除的行数：</p>
<pre><code>$ git log --stat
</code></pre><p>显示对文件作出实际更改的选项。该选项是 –patch，可以简写为 -p：</p>
<pre><code>$ git log -p
</code></pre><p><img src="https://s3.cn-north-1.amazonaws.com.cn/u-img/aa74d1b2-bb34-474c-9417-483de85e389b" alt="git log -p"></p>
<p>🔵 - 正在显示的文件<br>🔶 - 文件第一版的哈希值和第二版的哈希值<br>通常不重要，因此可以忽略<br>❤️ - 文件的旧版本和当前版本<br>🔍 - 添加的行所在的位置以及添加了多少行</p>
<ul>
<li>-15,83 表示旧版本（用 - 表示）从第 15 行开始，文件有 83 行</li>
<li>+15,85 表示当前版本（用 + 表示）从第 15 行开始，现在有 85 行…这 85 行显示在下方</li>
</ul>
<p>✏️ - 在 commit 中实际进行的更改</p>
<ul>
<li>用红色标示并以减号 (-) 开头的行是位于文件原始版本中，但是被 commit 删除的行</li>
<li>用绿色标示并以加号 (+) 开头的行是 commit 新加的行</li>
</ul>
<p><a href="https://git-scm.com/docs/git-diff#_generating_patches_with_p" target="_blank" rel="external">使用 -p 生成补丁</a> </p>
<p>统计信息显示在补丁上方</p>
<pre><code>git log -p --stat 
</code></pre><p><a href="https://git-scm.com/docs/git-diff" target="_blank" rel="external">git-diff文档</a></p>
<h3 id="7-git-show"><a href="#7-git-show" class="headerlink" title="7.git show"></a>7.git show</h3><p>提供 commit 的 SHA 作为最后一个参数，例如：</p>
<pre><code>$ git log -p fdf5493
</code></pre><p>通过提供 SHA，<code>git log -p</code> 命令将从这条 commit 开始！无需滚动并逐条查阅！注意，它还会显示在所提供的 SHA 之前提交的所有 commit 信息。</p>
<p>显示特定的<strong><em>一个</em></strong> commit 的命令是 git show：</p>
<pre><code>$ git show
</code></pre><p>运行上述示例命令将仅显示最近的 commit。通常，将 SHA 作为最后一个参数提供给命令：</p>
<pre><code>$ git show fdf5493
</code></pre><p>默认情况下，git show 会显示：<br><strong><em>commit、作者、日期、commit 消息、补丁信息</em></strong></p>
<p>但是，git show 可以与我们了解过的大部分其他选项一起使用：</p>
<ul>
<li><p><code>--stat</code>  显示更改了多少文件，以及添加/删除的行数</p>
</li>
<li><p><code>-p</code> 或 <code>--patch</code>  显示默认补丁信息，但是如果使用了 </p>
</li>
<li><p><code>--stat</code>将不显示补丁信息，因此传入 <code>-p</code> 以再次添加该信息</p>
</li>
<li><p><code>-w</code> 忽略空格变化</p>
</li>
</ul>
<h3 id="8-git-add"><a href="#8-git-add" class="headerlink" title="8. git add"></a>8. git add</h3><p>git add 命令用于将文件从工作目录移到暂存区。</p>
<pre><code>$ git add &lt;file1&gt; &lt;file2&gt; … &lt;fileN&gt;
</code></pre><p><code>Changes to be committed</code>下方的帮助文本提示<code>git rm --cached</code>， 不会破坏任何属于你的文件，它只是从暂存区删掉了文件。</p>
<p>句点<code>.</code>指代当前目录，可以用来表示所有文件和目录（包括所有嵌套文件和目录</p>
<pre><code>$ git add .
</code></pre><h3 id="9-git-commit"><a href="#9-git-commit" class="headerlink" title="9. git commit"></a>9. git commit</h3><p>git commit 命令会取出暂存区的文件并保存到仓库中：</p>
<pre><code>$ git commit
</code></pre><p>直接在命令行中使用 -m 选项传入信息：</p>
<pre><code>$ git commit -m &quot;Initial commit&quot;
</code></pre><p>在上述示例中，文本”Initial commit”被作为提交说明信息。但是注意，不能为 commit 提供信息的描述（description），只能提供信息部分（message）。</p>
<p><a href="https://help.github.com/articles/associating-text-editors-with-git/" target="_blank" rel="external">将文本编辑器与 git 相关联</a> GitHub 帮助文档<br><a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup" target="_blank" rel="external">使用入门 - 第一次设置 git</a> git 图书</p>
<h3 id="10-git-diff"><a href="#10-git-diff" class="headerlink" title="10. git diff"></a>10. git diff</h3><p>查看已经执行但是尚未 commit 的更改：</p>
<pre><code>$ git diff
</code></pre><p>运行结果和<code>git log -p</code>一样</p>
<p><a href="https://git-scm.com/docs/git-diff" target="_blank" rel="external">git diff文档</a></p>
<h3 id="11-gitignore"><a href="#11-gitignore" class="headerlink" title="11.  .gitignore"></a>11.  .gitignore</h3><p>将某个文件保留在项目的目录结构中，确保它不会意外地提交到项目中。<br>可以使用名称特殊的文件 <code>.gitignore</code>（注意文件名开头的点，很重要！）。将此文件添加到项目中隐藏的 <code>.git</code> 目录。你只需列出希望 git ignore（忽略，不跟踪）的文件名，git 将忽略这些文件。</p>
<p><a href="https://en.wikipedia.org/wiki/Glob_%28programming%29" target="_blank" rel="external">通配符glob</a><br>通配符允许你使用特殊的字符来表示某些格式/字符。在 .gitignore 文件中，你可以使用：</p>
<ul>
<li>空白行作为空格</li>
<li><code>#</code> 将行标记为注释</li>
<li><code>*</code> 与 0 个或多个字符匹配</li>
<li><code>?</code> 与 1 个字符匹配</li>
<li><code>[abc]</code> 与 a、b 或 c 匹配</li>
<li><code>**</code> 与嵌套目录匹配 <code>a/**/z</code> 与以下项匹配<br>a/z<br>a/b/z<br>a/b/c/z</li>
</ul>
<p>因此如果所有 50 个图片都是 JPEG 图片，并且位于”samples”文件夹中，那么我们可以向 .gitignore 中添加以下行，使 git 忽略所有这 50 个图片。</p>
<pre><code>samples/*.jpg
</code></pre><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files" target="_blank" rel="external">忽略文件</a> git 图书<br><a href="https://git-scm.com/docs/gitignore#_pattern_format" target="_blank" rel="external">gitignore</a> git 文档<br><a href="https://help.github.com/articles/ignoring-files/" target="_blank" rel="external">忽略文件</a> GitHub 文档<br><a href="https://www.gitignore.io/" target="_blank" rel="external">gitignore.io</a></p>
<h3 id="12-git-tag"><a href="#12-git-tag" class="headerlink" title="12. git tag"></a>12. git tag</h3><p>与仓库的标签进行交互：</p>
<pre><code>$ git tag -a v1.0
</code></pre><p><code>-a</code> 选项告诉 git 创建一个带注释的标签。如果是<code>git tag v1.0</code>，那么它将创建一个轻量级标签。</p>
<p>应该始终使用带注释的标签，因为它们包含了大量的额外信息，例如：</p>
<ul>
<li>标签创建者</li>
<li>标签创建日期</li>
<li>标签消息</li>
</ul>
<p><strong>git log 的 –decorate 选项</strong><br><code>--decorate</code> 选项将显示默认视图隐藏起来的一些详情。<br>log 命令已改为自动启用 –decorate 选项。</p>
<p>删除 git 标签：</p>
<pre><code>$ git tag -d v1.0
</code></pre><p>向以前的 commit 添加标签<br>运行 git tag -a v1.0 将为最近的 commit 添加标签。<br>提供要添加标签的 commit 的 SHA 即可向仓库中很久之前的 Commit 添加标签。</p>
<pre><code>$ git tag -a v1.0 a87984
</code></pre><p><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging" target="_blank" rel="external">git 基础知识 - 添加标签</a> git 图书<br><a href="https://git-scm.com/docs/git-tag" target="_blank" rel="external">git tag</a> git 文档</p>
<h3 id="13-git-branch"><a href="#13-git-branch" class="headerlink" title="13. git branch"></a>13. git branch</h3><p>与 git 的分支进行交互。</p>
<p><strong>列出所有分支</strong>：</p>
<pre><code>$ git branch
</code></pre><p>要<strong>创建分支</strong>，只需使用 git branch 并提供要创建的分支对应的名称。<br>例如：创建一个叫做”sidebar”的分支：</p>
<pre><code>$ git branch sidebar
</code></pre><p>要<strong>在分支之间进行切换</strong>，我们需要使用 git 的 <code>checkout</code> 命令。</p>
<pre><code>$ git checkout sidebar
</code></pre><p>运行该命令将：</p>
<ul>
<li>从工作目录中删除 git 跟踪的所有文件和目录（git 跟踪的文件存储在仓库中，因此什么也不会丢失）</li>
<li>转到仓库，并提取分支指向的 commit 所对应的所有文件和目录</li>
</ul>
<p>因此此命令将删除 master 分支中的 commit 引用的所有文件。它会将这些文件替换为 sidebar 分支中的 commit 引用的文件。</p>
<p>判断<strong>活跃分支</strong>的最快速方式是查看 git branch 命令的输出结果。活跃分支名称旁边会显示一个星号。</p>
<p><strong>删除给出的分支</strong>（这里是”sidebar”分支）:</p>
<pre><code>$ git branch -d sidebar
</code></pre><p>注意，无法删除当前所在的分支。因此要删除 sidebar 分支，你需要切换到 master 分支，或者创建并切换到新的分支。</p>
<p><strong>强制删除</strong>，需要使用大写的 D 选项  </p>
<pre><code>$ git branch -D sidebar
</code></pre><p><code>git checkout</code> 命令也可以<strong>创建一个新的分支</strong>。<br>如果你添加 -b 选项，则能够用一个命令创建分支并切换到该分支。添加 master 让此 footer 分支的起点位置与 master 分支的一样。</p>
<pre><code>$ git checkout -b newbranchname master
</code></pre><p><strong>同时查看所有分支</strong>：</p>
<pre><code>$ git log --oneline --decorate --graph --all
</code></pre><p><code>--graph</code> 选项将条目和行添加到输出的最左侧。显示了实际的分支。–all 选项会显示仓库中的所有分支。</p>
<p><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging" target="_blank" rel="external">git 分支 - 分支的新建与合并</a> git 文档<br><a href="http://learngitbranching.js.org/" target="_blank" rel="external">了解 git 分支</a><br><a href="https://www.atlassian.com/git/tutorials/using-branches" target="_blank" rel="external">git 分支教程</a> Atlassian 博客</p>
<h3 id="14-git-merge"><a href="#14-git-merge" class="headerlink" title="14. git merge"></a>14. git merge</h3><p><strong>合并分支</strong>：</p>
<pre><code>$ git merge &lt;other-branch&gt;
</code></pre><p>将分支组合到一起称为合并。</p>
<p>git 可以自动将不同分支上的更改合并到一起。这种分支和合并功能正是 git 的强大之处！你可以在分支上做出小的或大的更改，然后使用 git 合并这些更改。</p>
<p>发生合并时，git 将：</p>
<ul>
<li>查看将合并的分支</li>
<li>查看分支的历史记录并寻找两个分支的 commit 历史记录中都有的单个 commit</li>
<li>将单个分支上更改的代码行合并到一起</li>
<li>提交一个 commit 来记录合并操作</li>
</ul>
<p><strong>撤消合并</strong>：</p>
<pre><code>$ git reset --hard HEAD^
</code></pre><p>（确保包含 ^ 字符！它属于“相对 commit 引用”并表示“父 级 commit”）</p>
<p><strong>快进合并</strong></p>
<p>快进合并将使当前检出的分支向前移动，直到它指向与另一个分支（这里是 footer）指向的 commit 一样为止。</p>
<p>要合并 footer 分支，运行：</p>
<pre><code>$ git merge footer
</code></pre><p><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merging" target="_blank" rel="external">分支合并</a> git 图书<br><a href="https://git-scm.com/docs/git-merge" target="_blank" rel="external">git-merge</a> git 文档<br><a href="https://www.atlassian.com/git/tutorials/git-merge" target="_blank" rel="external">git 合并</a> Atlassian 博客</p>
<h3 id="15-合并冲突"><a href="#15-合并冲突" class="headerlink" title="15. 合并冲突"></a>15. 合并冲突</h3><p>git 会跟踪文件中的代码行。如果完全相同的行在不同的文件中更改了，将产生合并冲突。</p>
<p>冲突指示符（例如 <code>&gt;&gt;&gt;</code> 和 <code>&lt;&lt;&lt;</code>）</p>
<p>要解决文件中的冲突：</p>
<ol>
<li>找到并删掉存在合并冲突指示符的所有行</li>
<li>决定保留哪些行</li>
<li>保存文件</li>
<li>暂存文件</li>
<li>提交 commit</li>
</ol>
<p><a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts" target="_blank" rel="external">遇到冲突时的分支合</a>并 git 图书<br><a href="https://git-scm.com/docs/git-merge#_how_conflicts_are_presented" target="_blank" rel="external">冲突如何被显示</a> git 文档</p>
<h3 id="16-commit更改、还原、重置"><a href="#16-commit更改、还原、重置" class="headerlink" title="16. commit更改、还原、重置"></a>16. commit更改、还原、重置</h3><p><strong>更改最近的 commit</strong>、<strong>包含忘记包含的文件（或文件更改）</strong>：</p>
<pre><code>$ git commit --amend
</code></pre><p>如果你的工作目录没有内容（也就是仓库中没有任何未 commit 的更改），那么运行 git commit –amend 将使你能够重新提供 commit 消息。代码编辑器将打开，并显示原始 commit 消息。只需纠正拼错的单词或重新表述即可！然后保存文件并关闭编辑器，以便采用新的 commit 消息。</p>
<p>可以运行 git commit –amend 来更新最近的 commit，而不是创建新的 commit。</p>
<p><strong>还原（revert） 具体的 commit</strong>：</p>
<pre><code>$ git revert &lt;SHA-of-commit-to-revert&gt;
</code></pre><p>此命令：将撤消目标 commit 所做出的更改，创建一个新的 commit 来记录这一更改。</p>
<p><a href="https://git-scm.com/docs/git-revert" target="_blank" rel="external">git-revert</a> git 文档<br><a href="https://www.atlassian.com/git/tutorials/undoing-changes" target="_blank" rel="external">git revert</a> Atlassian 教程</p>
<p><strong>重置（清除）commit</strong>：</p>
<pre><code>$ git reset &lt;reference-to-commit&gt;
</code></pre><p>可以用来：</p>
<ul>
<li>将 HEAD 和当前分支指针移到目标 commit</li>
<li>清除 commit</li>
<li>将 commit 的更改移到暂存区</li>
<li>取消暂存 commit 的更改</li>
</ul>
<p>还原（revert） 会创建一个新的 commit，并还原或撤消之前的 commit。但是重置（reset）会清除 commit！</p>
<p>一定要谨慎使用 git 的重置功能。这是少数几个可以从仓库中清除 commit 的命令。如果某个 commit 不再存在于仓库中，它所包含的内容也会消失。</p>
<p>为了减轻你的压力，澄清下，git 会在完全清除任何内容之前，持续跟踪大约 30 天。要调用这些内容，你需要使用 git reflog 命令。请参阅以下链接以了解详情：<br><a href="https://git-scm.com/docs/git-reflog" target="_blank" rel="external">git-reflog</a><br><a href="https://www.atlassian.com/git/tutorials/rewriting-history" target="_blank" rel="external">重写历史记录</a><br><a href="http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html" target="_blank" rel="external">reflog，你的安全屏障</a></p>
<p>备份分支<br>注意，使用 git reset 命令将清除当前分支上的 commit。因此，如果你想跟着操作接下来出现的所有重置操作，需要在当前 commit 上创建一个分支，以便用作备份。</p>
<p>在进行任何重置操作之前创建一个 backup 分支：</p>
<pre><code>$ git branch backup
</code></pre><p>回到正常状况:</p>
<pre><code>$ git checkout -- index.html
$ git merge backup
</code></pre><p>从工作目录中删除未 commit 的更改<br>将 backup 合并到 master（这将导致快进合并并使 master 向上移到和 backup 一样的点）</p>
<pre><code>* 9ec05ca (HEAD -&gt; master) Revert &quot;Set page heading to &quot;Quests &amp; Crusades&quot;&quot;
* db7e87a Set page heading to &quot;Quests &amp; Crusades&quot;
* 796ddb0 Merge branch &apos;heading-update&apos;
</code></pre><p> HEAD 指向 9ec05ca 上的 master。<br> 运行 <code>git reset --mixed HEAD^</code> 会把 commit 9ec05ca 中做出的更改移至工作目录中。<br> 运行 <code>git reset --soft HEAD^</code> 会把 commit 9ec05ca 中做出的更改直接移至暂存区。<br> 运行 <code>git reset --hard HEAD^</code> 将清除 commit 9ec05ca 中做出的更改。</p>
<p>来自 Git 文档的 <a href="https://git-scm.com/docs/git-reset" target="_blank" rel="external">git-reset</a><br>来自 Git Blog 的 <a href="https://git-scm.com/blog" target="_blank" rel="external">Reset Demystified</a><br>来自 Git Book 的<a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection#Ancestry-References" target="_blank" rel="external">祖先引用</a></p>
<h3 id="17-相关-commit-引用"><a href="#17-相关-commit-引用" class="headerlink" title="17. 相关 commit 引用"></a>17. 相关 commit 引用</h3><p>需要引用相对于另一个 commit 的 commit。<br>例如，有时候你需要告诉 git 调用当前 commit 的前一个 commit，或者是前两个 commit。<br>我们可以使用特殊的<strong>“祖先引用”字符</strong>来告诉 git 这些相对引用。这些字符为：</p>
<ul>
<li><code>^</code>  表示父 commit</li>
<li><code>~</code>  表示第一个父 commit</li>
</ul>
<p>我们可以通过以下方式引用之前的 commit：</p>
<ul>
<li>父 commit – 以下内容表示当前 commit 的父 commit<ul>
<li>HEAD^</li>
<li>HEAD~</li>
<li>HEAD~1</li>
</ul>
</li>
<li>祖父 commit – 以下内容表示当前 commit 的祖父 commit<ul>
<li>HEAD^^</li>
<li>HEAD~2</li>
</ul>
</li>
<li>曾祖父 commit – 以下内容表示当前 commit 的曾祖父 commit<ul>
<li>HEAD^^^</li>
<li>HEAD~3</li>
</ul>
</li>
</ul>
<p><code>^</code> 和 <code>~</code> 的区别主要体现在通过合并而创建的 commit 中。<br><code>合并 commit</code> 具有两个父级。对于<code>合并 commit</code>，<code>^</code> 引用用来表示第一个父 commit，而<code>^2</code> 表示第二个父 commit。<br>第一个父 commit 是当你运行 git merge 时所处的分支，而第二个父 commit 是被合并的分支。</p>
<p>我们来看一个示例，这样更好理解。这是我的 git log 当前的显示结果：</p>
<pre><code>* 9ec05ca (HEAD -&gt; master) Revert &quot;Set page heading to &quot;Quests &amp; Crusades&quot;&quot;
* db7e87a Set page heading to &quot;Quests &amp; Crusades&quot;
*   796ddb0 Merge branch &apos;heading-update&apos;
|\  
| * 4c9749e (heading-update) Set page heading to &quot;Crusade&quot;
* | 0c5975a Set page heading to &quot;Quest&quot;
|/  
*   1a56a81 Merge branch &apos;sidebar&apos;
|\  
| * f69811c (sidebar) Update sidebar with favorite movie
| * e6c65a6 Add new sidebar content
* | e014d91 (footer) Add links to social media
* | 209752a Improve site heading for SEO
* | 3772ab1 Set background color for page
|/  
* 5bfe5e7 Add starting HTML structure
* 6fa5f34 Add .gitignore file
* a879849 Add header to blog
* 94de470 Initial commit
</code></pre><p>我们来看看如何引用一些之前的 commit。因为 HEAD 指向 9ec05ca commit：</p>
<pre><code>HEAD^ 是 db7e87a commit
HEAD~1 同样是 db7e87a commit
HEAD^^ 是 796ddb0 commit
HEAD~2 同样是 796ddb0 commit
HEAD^^^ 是 0c5975a commit
HEAD~3 同样是 0c5975a commit
HEAD^^^2 是 4c9749e commit（这是曾祖父的 (HEAD^^) 第二个父 commit (^2))
</code></pre><p>创建一个仓库来记录你的计算机设置 <a href="https://dotfiles.github.io/" target="_blank" rel="external">https://dotfiles.github.io/</a></p>
<h3 id="18-向github上传代码"><a href="#18-向github上传代码" class="headerlink" title="18. 向github上传代码"></a>18. 向github上传代码</h3><pre><code>$ git init

$ git add .

$ git commit -m &quot;&quot;

$ git remote add origin https://github.com/仓库url地址

$ git pull --rebase origin master

$ git push -u origin master
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[千里之行，始于足下]]></title>
      <url>/2016/11/10/%E5%8D%83%E9%87%8C%E4%B9%8B%E8%A1%8C%EF%BC%8C%E5%A7%8B%E4%BA%8E%E8%B6%B3%E4%B8%8B/</url>
      <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要:"></a>摘要:</h2><blockquote>
<ul>
<li>建博客起因</li>
<li>hexo配置环境</li>
<li>配置过程</li>
<li>总结</li>
</ul>
</blockquote>
<hr>
<a id="more"></a>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>昨晚看到双十一阿里云打折，有几块钱的域名，不如买个建博客。因为个人使用，静态页面基本满足要求，所以没有租虚拟主机<del>（其实想省钱）</del>，而是利用了GitHub Pages平台和HEXO搭建。</p>
<p><a href="http://hexo.io/" target="_blank" rel="external">HEXO</a>是基于Node.js的静态博客程序，相比之下<a href="https://jekyllrb.com/" target="_blank" rel="external">jekyll</a>是基于Ruby的，个人目前不了解这个语言，所以虽然jekyll可以直接原文上传github，而hexo要本地生成后再上传，我还是选择了hexo。</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br>用命令行检查是否安装好：</p>
<pre><code>node -v
npm -v
</code></pre><p><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a></p>
<pre><code>git --version
</code></pre><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></p>
<ul>
<li>安装Hexo</li>
</ul>
<p>文件夹空白处按住Shift+鼠标右键 <code>在当前目录打开命令行</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo --save</div></pre></td></tr></table></figure>
<p>正常情况下用上面的方法就可以了，但因为校园网问题，<a href="https://npmjs.org" target="_blank" rel="external">npm</a>被墙了，所以我用了<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝npm镜像</a><del>（果然深水宝）</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install -g hexo-cli</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo --save</div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/mw690/789d050dgw1f9o5ad1hj5j20n00extbj.jpg" alt="此处输入图片的描述"><br>查看是否安装好hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/mw690/789d050dgw1f9o5csj7jhj20be073aae.jpg" alt="此处输入图片的描述"></p>
<ul>
<li>本地运行Hexo</li>
</ul>
<h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<h4 id="2-安装生成器"><a href="#2-安装生成器" class="headerlink" title="2.安装生成器"></a>2.安装生成器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install</div></pre></td></tr></table></figure>
<h4 id="3-本地运行"><a href="#3-本地运行" class="headerlink" title="3.本地运行"></a>3.本地运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g</div></pre></td></tr></table></figure>
<p>打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可在本地预览博客(=ﾟωﾟ)=<br><img src="http://ww2.sinaimg.cn/mw690/789d050dgw1f9o7cymx03j20zp0izmza.jpg" alt="此处输入图片的描述"></p>
<ul>
<li>部署到github</li>
</ul>
<h4 id="1-配置身份信息"><a href="#1-配置身份信息" class="headerlink" title="1.配置身份信息"></a>1.配置身份信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;用户名&quot;</div><div class="line">$ git config --global user.email &quot;邮箱&quot;</div></pre></td></tr></table></figure>
<h4 id="2-修改-config-yml文件"><a href="#2-修改-config-yml文件" class="headerlink" title="2.修改_config.yml文件"></a>2.修改<code>_config.yml</code>文件</h4><p>具体参数见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">官方文档</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#发布设置</div><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repository: https://github.com/github用户名/github用户名.github.io.git</div><div class="line">  #或者git@github.com:github用户名/github用户名.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>这里我查询的时候看到有人说必须是SSH形式的url，而不能是HTTPS形式的url。但是我两个都测试过了是可以的。<br>如果用SSH形式可以免去每次输账号密码的步骤，配置过程参见<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">Generating an SSH key</a></p>
<h4 id="3-安装hexo-git插件"><a href="#3-安装hexo-git插件" class="headerlink" title="3.安装hexo git插件"></a>3.安装hexo git插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h4 id="4-发布博客"><a href="#4-发布博客" class="headerlink" title="4.发布博客"></a>4.发布博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<h4 id="5-绑定域名"><a href="#5-绑定域名" class="headerlink" title="5.绑定域名"></a>5.绑定域名</h4><p>对域名添加解析，如图一次输入：CNAME、@、Github博客域名<br><img src="http://ww1.sinaimg.cn/mw690/789d050dgw1f9o860t6p7j20jc02cq32.jpg" alt="此处输入图片的描述"><br>在github仓库中<code>Create new file</code>,命名<code>CNAME</code>,文件内容为个人域名(注意：没有<a href="http://，没有www)，然后`Commit" target="_blank" rel="external">http://，没有www)，然后`Commit</a> new file`<br>最后CNAME文件必须在本地也创建一份。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="1-本地调试"><a href="#1-本地调试" class="headerlink" title="1.本地调试"></a>1.本地调试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g</div></pre></td></tr></table></figure>
<h4 id="2-部署步骤"><a href="#2-部署步骤" class="headerlink" title="2.部署步骤"></a>2.部署步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div><div class="line"># 可简写为$ hexo d -g  生成加部署</div></pre></td></tr></table></figure>
<h4 id="3-添加新文章"><a href="#3-添加新文章" class="headerlink" title="3.添加新文章"></a>3.添加新文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;My New Post&quot;</div></pre></td></tr></table></figure>
<p>打开<code>hexo目录\source\_posts</code>,能看到生成的markdown文件<code>My-New-Post.md</code><br>标题信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: My-New-Post   //在此处添加你的标题。</div><div class="line">date: 2016-11-10 00:00:01   //在此处输入你编辑这篇文章的时间。</div><div class="line">categories: Article   //在此处输入这篇文章的分类。</div><div class="line">toc: true  //在此处设定是否开启目录，需要主题支持。</div></pre></td></tr></table></figure></p>
<h4 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a>4.常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>
<h4 id="5-感想"><a href="#5-感想" class="headerlink" title="5.感想"></a>5.感想</h4><p>github帐号忘了，重新注册后又把密码输错了，在最后几步部署到github的时候输了十几次帐号密码。( ;´д`)<br>markdown语法好评，再也不用担心我的排版啦。<br>Hexo的主题和优化还没学习，但是一天时间能从一个想法到实现，果然还是那句话：<br><strong>A good beginning is half done！</strong><br>相信今年双十一买的最有价值的东西就是这个域名了( ﾟ∀ﾟ)</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/11/10/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
